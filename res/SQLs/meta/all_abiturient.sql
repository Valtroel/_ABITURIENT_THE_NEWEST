/******************************************************************************/
/***          Generated by IBExpert 2018.3.1.1 08.04.2022 8:43:35           ***/
/******************************************************************************/

SET NAMES WIN1251;

SET CLIENTLIB 'D:\DbFireBird\fbclient.dll';

CREATE DATABASE '172.16.1.30:abiturient'
USER 'SYSDBA' PASSWORD 'dbudfV544703'
PAGE_SIZE 4096
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR ABITURA_NOMER_AB START WITH 0 INCREMENT BY 1;
SET GENERATOR ABITURA_NOMER_AB TO 1517;

CREATE GENERATOR BALL_NOM_BALL START WITH 0 INCREMENT BY 1;
SET GENERATOR BALL_NOM_BALL TO 13;

CREATE GENERATOR CATEGORY_N_SPORT_CATEGORY START WITH 0 INCREMENT BY 1;
SET GENERATOR CATEGORY_N_SPORT_CATEGORY TO 12;

CREATE GENERATOR CK_N_CK START WITH 0 INCREMENT BY 1;
SET GENERATOR CK_N_CK TO 225;

CREATE GENERATOR DOCUM_N_DOC START WITH 0 INCREMENT BY 1;
SET GENERATOR DOCUM_N_DOC TO 99;

CREATE GENERATOR GEN_ABITUR_LOGBOOK_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_ABITUR_LOGBOOK_ID TO 1961;

CREATE GENERATOR GEN_ABITUR_QUEUE_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_ABITUR_QUEUE_ID TO 1649;

CREATE GENERATOR GEN_AB_P_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_AB_P_ID TO 0;

CREATE GENERATOR GEN_BLOCK_EDIT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_BLOCK_EDIT_ID TO 4;

CREATE GENERATOR GEN_CALL_ABITURIENT_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CALL_ABITURIENT_ID TO 0;

CREATE GENERATOR GEN_CONTROL_EXERC_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_CONTROL_EXERC_ID TO 7;

CREATE GENERATOR GEN_EDU_PERIOD_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_EDU_PERIOD_ID TO 2;

CREATE GENERATOR GEN_EXERCISE_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_EXERCISE_ID TO 190;

CREATE GENERATOR GEN_ORDER_SPECIALIZ_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_ORDER_SPECIALIZ_ID TO 1;

CREATE GENERATOR GEN_SEL_EXERCIZE_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_SEL_EXERCIZE_ID TO 0;

CREATE GENERATOR GEN_SHKALA_ID START WITH 0 INCREMENT BY 1;
SET GENERATOR GEN_SHKALA_ID TO 500;

CREATE GENERATOR IBE$LOG_TABLES_GEN START WITH 0 INCREMENT BY 1;
SET GENERATOR IBE$LOG_TABLES_GEN TO 431579;

CREATE GENERATOR KOL_PLACE_N_KOL_PLACE START WITH 0 INCREMENT BY 1;
SET GENERATOR KOL_PLACE_N_KOL_PLACE TO 157;

CREATE GENERATOR NOMER_GROUP START WITH 0 INCREMENT BY 1;
SET GENERATOR NOMER_GROUP TO 198;

CREATE GENERATOR PREDMET_N_PREDMET START WITH 0 INCREMENT BY 1;
SET GENERATOR PREDMET_N_PREDMET TO 19;

CREATE GENERATOR REGION_N_REGION START WITH 0 INCREMENT BY 1;
SET GENERATOR REGION_N_REGION TO 8;



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE ABITUR_FROM_QUEUE (
    STATUS_QUEUE SMALLINT,
    TIME_QUEUE DATE,
    N_SPECIALIZ SMALLINT,
    N_SPEC SMALLINT,
    VID_EDU SMALLINT,
    CATEGORY_AB SMALLINT,
    CATEGORY_EDU SMALLINT,
    TERM_EDU SMALLINT,
    PRICE SMALLINT,
    KONKURS SMALLINT,
    ID_AB SMALLINT,
    CATEGORY_IF SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITUR_LOGBOOK_INS (
    NOM_DELA SMALLINT,
    NOMER_AB INTEGER,
    DATE_IN DATE,
    VID_EDU SMALLINT,
    PRICE SMALLINT,
    TERM_EDU SMALLINT,
    ADDRESS_BEFORE VARCHAR(100),
    N_CK SMALLINT,
    N_SPECIALIZ SMALLINT,
    N_FAC SMALLINT,
    KONKURS SMALLINT,
    CATEGORY SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITUR_PRIVILEG_DEL (
    NOMER_AB INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITUR_PRIVILEG_INS (
    NOMER_AB INTEGER,
    N_PRIV SMALLINT,
    SEL_PRIV SMALLINT,
    DAT_PRIV SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITUR_QUEUE_DEL (
    ID_AB INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITUR_QUEUE_INS (
    FAM VARCHAR(30),
    NAME VARCHAR(30),
    OTCH VARCHAR(30),
    STATUS_QUEUE SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITUR_QUEUE_UPD (
    ID_AB INTEGER,
    STATUS_QUEUE SMALLINT,
    DIGIT_SIGN BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITUR_QUEUE_UPD_NO_SIGN (
    ID_AB INTEGER,
    STATUS_QUEUE SMALLINT,
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ABITURA_STATUS_UP
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ALL_MAS_KONKURS (
    IN_SP_ALL_M SMALLINT,
    IN_VID_EDU_ALL_M SMALLINT)
RETURNS (
    OUT_N_AB_ALL_M INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE BALL_SERTIFIKAT (
    PR INTEGER,
    B_S SMALLINT,
    R_B SMALLINT)
RETURNS (
    B DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CERTIFICATES_LOGBOOK_DEL (
    ID_LOG INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CERTIFICATES_LOGBOOK_INS (
    ID_LOG INTEGER,
    N_PREDMET SMALLINT,
    SERIA_S VARCHAR(10),
    NOMER_S VARCHAR(15),
    BALL SMALLINT,
    DESCRIBE VARCHAR(150),
    RUS_BEL SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CONTROL_EXERC_DEL (
    ID_CONTROL_EXERC INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CONTROL_EXERC_IU (
    ID_CONTROL_EXERC INTEGER,
    N_FAC SMALLINT,
    N_SPECIALIZ SMALLINT,
    POL CHAR(1),
    NUM_EXERC_GRP SMALLINT,
    ID_EXERC SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CONTROL_EXERC_SEL
RETURNS (
    ID_CONTROL_EXERC INTEGER,
    N_FAC SMALLINT,
    N_SPECIALIZ SMALLINT,
    POL CHAR(1),
    NUM_EXERC_GRP SMALLINT,
    ID_EXERC SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EXAM_CNT (
    N_SPEC SMALLINT,
    VID_EDU SMALLINT)
RETURNS (
    SUM1 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GET_NOMER_AB
RETURNS (
    NAB INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GIAZ01 (
    VID_EDU SMALLINT,
    DATE_IN DATE,
    N_SPEC SMALLINT)
RETURNS (
    S_B_ALL INTEGER,
    S_B_CK INTEGER,
    S_B_2 INTEGER,
    S_P INTEGER,
    S_3S INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GIAZ021 (
    VID_EDU SMALLINT,
    DATE_IN DATE)
RETURNS (
    S_ALL INTEGER,
    S_16 INTEGER,
    S_17 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GIAZ022 (
    VID_EDU SMALLINT,
    DATE_IN DATE)
RETURNS (
    S_ALL INTEGER,
    S_21 INTEGER,
    S_27 INTEGER,
    S_22_26 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GIAZ0221 (
    VID_EDU SMALLINT,
    DATE_IN DATE)
RETURNS (
    S_38 INTEGER,
    S_35 INTEGER,
    S_37 INTEGER,
    S_36 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GIAZ03 (
    DATE_IN DATE,
    VID_EDU SMALLINT)
RETURNS (
    S_SO_T INTEGER,
    S_SO_T_E INTEGER,
    S_SO_W INTEGER,
    S_SO_W_E INTEGER,
    S_L INTEGER,
    S_SSO INTEGER,
    S_SSO_E INTEGER,
    S_PTU INTEGER,
    S_PTU_E INTEGER,
    S_VUZ INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_KONK (
    IN_FAC SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_SPEC SMALLINT)
RETURNS (
    S_ALL_0 INTEGER,
    S_ALL_1 INTEGER,
    S_CEL INTEGER,
    S_2_0 INTEGER,
    S_2_1 INTEGER,
    S_VK_0 INTEGER,
    S_VK_1 INTEGER,
    S_WO_0 INTEGER,
    S_WO_1 INTEGER,
    S_ING INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_KONK1 (
    IN_FAC SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_SPEC SMALLINT)
RETURNS (
    S_ALL_0 INTEGER,
    S_ALL_1 INTEGER,
    S_CEL INTEGER,
    S_2_0 INTEGER,
    S_2_1 INTEGER,
    S_VK_0 INTEGER,
    S_VK_1 INTEGER,
    S_WO_0 INTEGER,
    S_WO_1 INTEGER,
    S_ING INTEGER,
    S_2V INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_PRIV (
    IN_FAC INTEGER,
    IN_VID_EDU INTEGER,
    IN_KONKURS INTEGER,
    IN_PRICE INTEGER)
RETURNS (
    SUM_WITHOUT INTEGER,
    SUM_V_K INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_SERTIFIKAT (
    N_SP INTEGER,
    N_VID_EDU SMALLINT,
    N_FAC SMALLINT,
    PREDM SMALLINT,
    ST_BALL SMALLINT,
    R_B SMALLINT)
RETURNS (
    N10_9 INTEGER,
    N9_8 INTEGER,
    N8_7 INTEGER,
    N7_6 INTEGER,
    N6_5 INTEGER,
    N5_4 INTEGER,
    N4_3 INTEGER,
    N3_2 INTEGER,
    N2 INTEGER,
    N1 INTEGER,
    N0 INTEGER,
    N_YA INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_SUMM_BALL (
    IN_FAC INTEGER,
    IN_SP INTEGER,
    IN_VID_EDU SMALLINT,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N9 INTEGER,
    N9_10 INTEGER,
    N10_11 INTEGER,
    N11_12 INTEGER,
    N12_13 INTEGER,
    N13_14 INTEGER,
    N14_15 INTEGER,
    N15_16 INTEGER,
    N16_17 INTEGER,
    N17_18 INTEGER,
    N18_19 INTEGER,
    N19_20 INTEGER,
    N20_21 INTEGER,
    N21_22 INTEGER,
    N22_23 INTEGER,
    N23_24 INTEGER,
    N24_25 INTEGER,
    N25_26 INTEGER,
    N26_27 INTEGER,
    N27_28 INTEGER,
    N28_29 INTEGER,
    N29_30 INTEGER,
    N30_31 INTEGER,
    N31_32 INTEGER,
    N32_33 INTEGER,
    N33_34 INTEGER,
    N34_35 INTEGER,
    N35_36 INTEGER,
    N36_37 INTEGER,
    N37_38 INTEGER,
    N38_39 INTEGER,
    N39_40 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_SUMM_BALL_100 (
    IN_SP INTEGER,
    IN_VID_EDU SMALLINT,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N100 INTEGER,
    N100_110 INTEGER,
    N110_120 INTEGER,
    N120_130 INTEGER,
    N130_140 INTEGER,
    N140_150 INTEGER,
    N150_160 INTEGER,
    N160_170 INTEGER,
    N170_180 INTEGER,
    N180_190 INTEGER,
    N190_200 INTEGER,
    N200_210 INTEGER,
    N210_220 INTEGER,
    N220_230 INTEGER,
    N230_240 INTEGER,
    N240_250 INTEGER,
    N250_260 INTEGER,
    N260_270 INTEGER,
    N270_280 INTEGER,
    N280_290 INTEGER,
    N290_300 INTEGER,
    N300_310 INTEGER,
    N310_320 INTEGER,
    N320_330 INTEGER,
    N330_340 INTEGER,
    N340_350 INTEGER,
    N350_360 INTEGER,
    N360_370 INTEGER,
    N370_380 INTEGER,
    N380_390 INTEGER,
    N390_400 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_SUMM_BALL12 (
    VID_EDU SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N1_2 SMALLINT,
    N2_3 SMALLINT,
    N3_4 SMALLINT,
    N4_5 SMALLINT,
    N5_6 SMALLINT,
    N6_7 SMALLINT,
    N7_8 SMALLINT,
    N8_9 SMALLINT,
    N9_10 SMALLINT,
    N10_11 SMALLINT,
    N11_12 SMALLINT,
    N12_13 SMALLINT,
    N13_14 SMALLINT,
    N14_15 SMALLINT,
    N15_16 SMALLINT,
    N16_17 SMALLINT,
    N17_18 SMALLINT,
    N18_19 SMALLINT,
    N19_20 SMALLINT,
    N20_21 SMALLINT,
    N21_22 SMALLINT,
    N22_23 SMALLINT,
    N23_24 SMALLINT,
    N24_25 SMALLINT,
    N25_26 SMALLINT,
    N26_27 SMALLINT,
    N27_28 SMALLINT,
    N28_29 SMALLINT,
    N29_30 SMALLINT,
    N30_31 SMALLINT,
    N31_32 SMALLINT,
    N32_33 SMALLINT,
    N33_34 SMALLINT,
    N34_35 SMALLINT,
    N35_36 SMALLINT,
    N36_37 SMALLINT,
    N37_38 SMALLINT,
    N38_39 SMALLINT,
    N39_40 SMALLINT,
    N40_41 SMALLINT,
    N41_42 SMALLINT,
    N42_43 SMALLINT,
    N43_44 SMALLINT,
    N44_45 SMALLINT,
    N45_46 SMALLINT,
    N46_47 SMALLINT,
    N47_48 SMALLINT,
    N48_49 SMALLINT,
    N49_50 SMALLINT,
    N50_51 SMALLINT,
    N51_52 SMALLINT,
    N52_53 SMALLINT,
    N53_54 SMALLINT,
    N54_55 SMALLINT,
    N55_56 SMALLINT,
    N56_57 SMALLINT,
    N57_58 SMALLINT,
    N58_59 SMALLINT,
    N59_60 SMALLINT,
    N60_61 SMALLINT,
    N61_62 SMALLINT,
    N62_63 SMALLINT,
    N63_64 SMALLINT,
    N64_65 SMALLINT,
    N65_66 SMALLINT,
    N66_67 SMALLINT,
    N67_68 SMALLINT,
    N68_69 SMALLINT,
    N69_70 SMALLINT,
    N70_71 SMALLINT,
    N71_72 SMALLINT,
    N72_73 SMALLINT,
    N73_74 SMALLINT,
    N74_75 SMALLINT,
    N75_76 SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_SUMM_BALL2 (
    IN_FAC INTEGER,
    IN_SP INTEGER,
    IN_VID_EDU SMALLINT,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N2_3 INTEGER,
    N3_4 INTEGER,
    N4_5 INTEGER,
    N5_6 INTEGER,
    N6_7 INTEGER,
    N7_8 INTEGER,
    N8_9 INTEGER,
    N9_10 INTEGER,
    N10_11 INTEGER,
    N11_12 INTEGER,
    N12_13 INTEGER,
    N13_14 INTEGER,
    N14_15 INTEGER,
    N15_16 INTEGER,
    N16_17 INTEGER,
    N17_18 INTEGER,
    N18_19 INTEGER,
    N19_20 INTEGER,
    N20_21 INTEGER,
    N21_22 INTEGER,
    N22_23 INTEGER,
    N23_24 INTEGER,
    N24_25 INTEGER,
    N25_26 INTEGER,
    N26_27 INTEGER,
    N27_28 INTEGER,
    N28_29 INTEGER,
    N29_30 INTEGER,
    N30_31 INTEGER,
    N31_32 INTEGER,
    N32_33 INTEGER,
    N33_34 INTEGER,
    N34_35 INTEGER,
    N35_36 INTEGER,
    N36_37 INTEGER,
    N37_38 INTEGER,
    N38_39 INTEGER,
    N39_40 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_SUMM_BALL3 (
    N_FAC SMALLINT,
    N_SP SMALLINT,
    VID_EDU SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N1_2 SMALLINT,
    N2_3 SMALLINT,
    N3_4 SMALLINT,
    N4_5 SMALLINT,
    N5_6 SMALLINT,
    N6_7 SMALLINT,
    N7_8 SMALLINT,
    N8_9 SMALLINT,
    N9_10 SMALLINT,
    N10_11 SMALLINT,
    N11_12 SMALLINT,
    N12_13 SMALLINT,
    N13_14 SMALLINT,
    N14_15 SMALLINT,
    N15_16 SMALLINT,
    N16_17 SMALLINT,
    N17_18 SMALLINT,
    N18_19 SMALLINT,
    N19_20 SMALLINT,
    N20_21 SMALLINT,
    N21_22 SMALLINT,
    N22_23 SMALLINT,
    N23_24 SMALLINT,
    N24_25 SMALLINT,
    N25_26 SMALLINT,
    N26_27 SMALLINT,
    N27_28 SMALLINT,
    N28_29 SMALLINT,
    N29_30 SMALLINT,
    N30_31 SMALLINT,
    N31_32 SMALLINT,
    N32_33 SMALLINT,
    N33_34 SMALLINT,
    N34_35 SMALLINT,
    N35_36 SMALLINT,
    N36_37 SMALLINT,
    N37_38 SMALLINT,
    N38_39 SMALLINT,
    N39_40 SMALLINT,
    N40_41 SMALLINT,
    N41_42 SMALLINT,
    N42_43 SMALLINT,
    N43_44 SMALLINT,
    N44_45 SMALLINT,
    N45_46 SMALLINT,
    N46_47 SMALLINT,
    N47_48 SMALLINT,
    N48_49 SMALLINT,
    N49_50 SMALLINT,
    N50_51 SMALLINT,
    N51_52 SMALLINT,
    N52_53 SMALLINT,
    N53_54 SMALLINT,
    N54_55 SMALLINT,
    N55_56 SMALLINT,
    N56_57 SMALLINT,
    N57_58 SMALLINT,
    N58_59 SMALLINT,
    N59_60 SMALLINT,
    N60_61 SMALLINT,
    N61_62 SMALLINT,
    N62_63 SMALLINT,
    N63_64 SMALLINT,
    N64_65 SMALLINT,
    N65_66 SMALLINT,
    N66_67 SMALLINT,
    N67_68 SMALLINT,
    N68_69 SMALLINT,
    N69_70 SMALLINT,
    N70_71 SMALLINT,
    N71_72 SMALLINT,
    N72_73 SMALLINT,
    N73_74 SMALLINT,
    N74_75 SMALLINT,
    N75_76 SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOL_SUMM_BALL4 (
    N_FAC SMALLINT,
    VID_EDU SMALLINT,
    PRICE SMALLINT,
    N_SP SMALLINT)
RETURNS (
    N1_2 SMALLINT,
    N2_3 SMALLINT,
    N3_4 SMALLINT,
    N4_5 SMALLINT,
    N5_6 SMALLINT,
    N6_7 SMALLINT,
    N7_8 SMALLINT,
    N8_9 SMALLINT,
    N9_10 SMALLINT,
    N10_11 SMALLINT,
    N11_12 SMALLINT,
    N12_13 SMALLINT,
    N13_14 SMALLINT,
    N14_15 SMALLINT,
    N15_16 SMALLINT,
    N16_17 SMALLINT,
    N17_18 SMALLINT,
    N18_19 SMALLINT,
    N19_20 SMALLINT,
    N20_21 SMALLINT,
    N21_22 SMALLINT,
    N22_23 SMALLINT,
    N23_24 SMALLINT,
    N24_25 SMALLINT,
    N25_26 SMALLINT,
    N26_27 SMALLINT,
    N27_28 SMALLINT,
    N28_29 SMALLINT,
    N29_30 SMALLINT,
    N30_31 SMALLINT,
    N31_32 SMALLINT,
    N32_33 SMALLINT,
    N33_34 SMALLINT,
    N34_35 SMALLINT,
    N35_36 SMALLINT,
    N36_37 SMALLINT,
    N37_38 SMALLINT,
    N38_39 SMALLINT,
    N39_40 SMALLINT,
    N40_41 SMALLINT,
    N41_42 SMALLINT,
    N42_43 SMALLINT,
    N43_44 SMALLINT,
    N44_45 SMALLINT,
    N45_46 SMALLINT,
    N46_47 SMALLINT,
    N47_48 SMALLINT,
    N48_49 SMALLINT,
    N49_50 SMALLINT,
    N50_51 SMALLINT,
    N51_52 SMALLINT,
    N52_53 SMALLINT,
    N53_54 SMALLINT,
    N54_55 SMALLINT,
    N55_56 SMALLINT,
    N56_57 SMALLINT,
    N57_58 SMALLINT,
    N58_59 SMALLINT,
    N59_60 SMALLINT,
    N60_61 SMALLINT,
    N61_62 SMALLINT,
    N62_63 SMALLINT,
    N63_64 SMALLINT,
    N64_65 SMALLINT,
    N65_66 SMALLINT,
    N66_67 SMALLINT,
    N67_68 SMALLINT,
    N68_69 SMALLINT,
    N69_70 SMALLINT,
    N70_71 SMALLINT,
    N71_72 SMALLINT,
    N72_73 SMALLINT,
    N73_74 SMALLINT,
    N74_75 SMALLINT,
    N75_76 SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KOLL_SUMM_BALL2K (
    IN_FAC INTEGER,
    IN_VID_EDU INTEGER,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N2_3 INTEGER,
    N3_4 INTEGER,
    N4_5 INTEGER,
    N5_6 INTEGER,
    N6_7 INTEGER,
    N7_8 INTEGER,
    N8_9 INTEGER,
    N9_10 INTEGER,
    N10_11 INTEGER,
    N11_12 INTEGER,
    N12_13 INTEGER,
    N13_14 INTEGER,
    N14_15 INTEGER,
    N15_16 INTEGER,
    N16_17 INTEGER,
    N17_18 INTEGER,
    N18_19 INTEGER,
    N19_20 INTEGER,
    N20_21 INTEGER,
    N21_22 INTEGER,
    N22_23 INTEGER,
    N23_24 INTEGER,
    N24_25 INTEGER,
    N25_26 INTEGER,
    N26_27 INTEGER,
    N27_28 INTEGER,
    N28_29 INTEGER,
    N29_30 INTEGER,
    N30_31 INTEGER,
    N31_32 INTEGER,
    N32_33 INTEGER,
    N33_34 INTEGER,
    N34_35 INTEGER,
    N35_36 INTEGER,
    N36_37 INTEGER,
    N37_38 INTEGER,
    N38_39 INTEGER,
    N39_40 INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONKURS (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_F VARCHAR(30),
    OUT_N VARCHAR(30),
    OUT_O VARCHAR(30),
    OUT_N_DELO SMALLINT,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_E_M VARCHAR(50),
    OUT_NAME_E_S VARCHAR(50),
    OUT_WHEN_E_M SMALLINT,
    OUT_WHEN_E_S SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SP DOUBLE PRECISION,
    OUT_SPORT VARCHAR(50),
    OUT_MID_B DOUBLE PRECISION,
    OUT_ADDRESS VARCHAR(100),
    OUT_COPY_AT SMALLINT,
    OUT_V_K VARCHAR(5),
    OUT_PRIV VARCHAR(50),
    OUT_WITHOUT VARCHAR(5),
    OUT_REGION INTEGER,
    OUT_CENTRE INTEGER,
    OUT_FIO VARCHAR(90),
    OUT_N_CK SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONKURS12 (
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_N_SPECIALIZ SMALLINT,
    OUT_FIO VARCHAR(90))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONKURS2 (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_F VARCHAR(30),
    OUT_N VARCHAR(30),
    OUT_O VARCHAR(30),
    OUT_N_DELO SMALLINT,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_E_M VARCHAR(50),
    OUT_NAME_E_S VARCHAR(50),
    OUT_WHEN_E_M SMALLINT,
    OUT_WHEN_E_S SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SP DOUBLE PRECISION,
    OUT_SPORT VARCHAR(50),
    OUT_MID_B DOUBLE PRECISION,
    OUT_ADDRESS VARCHAR(100),
    OUT_COPY_AT SMALLINT,
    OUT_V_K VARCHAR(5),
    OUT_PRIV VARCHAR(50),
    OUT_WITHOUT VARCHAR(5),
    OUT_REGION INTEGER,
    OUT_CENTRE INTEGER,
    OUT_FIO VARCHAR(90),
    OUT_N_CK SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONKURS2V (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_FIO VARCHAR(90))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONKURS3 (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_FIO VARCHAR(90))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONKURS333 (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_FIO VARCHAR(90))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE KONKURS34 (
    N_FAC SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_N_SPECIALIZ SMALLINT,
    OUT_FIO VARCHAR(90))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MAX_NUM_DELA (
    N_FAC SMALLINT,
    VID_EDU SMALLINT,
    TERM_EDU SMALLINT,
    PRICE SMALLINT)
RETURNS (
    MX_NUM_DELA INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PREDMET_BALL (
    IN_N_AB_BALL INTEGER)
RETURNS (
    OUT_N_PREDMET SMALLINT,
    OUT_TEXT_PREDMET VARCHAR(100),
    OUT_BALL DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PRIVILEG_LOG_DEL (
    ID_LOG INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PRIVILEG_LOG_INS (
    ID_LOG INTEGER,
    N_PRIV SMALLINT,
    SEL_PRIV SMALLINT,
    DAT_PRIV SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROC_SEL_EXERC_INS (
    FIN_ID_SEL_EXERC INTEGER,
    FIN_NOMER_AB INTEGER,
    FIN_NUM_EXERC_GRP SMALLINT,
    FIN_ID_EXERC SMALLINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE PROTOKOL (
    IN_N_FAC SMALLINT,
    IN_DATA DATE,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_FAM VARCHAR(30),
    OUT_NAME VARCHAR(30),
    OUT_OTCH VARCHAR(30),
    OUT_N_DEL SMALLINT,
    OUT_VK VARCHAR(5),
    OUT_WITHOUT VARCHAR(5))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE AB_P (
    N_AB_P          INTEGER,
    NOMER_AB        INTEGER,
    PRICE_DO        SMALLINT,
    PRICE_PO        SMALLINT,
    VID_EDU_DO      SMALLINT,
    VID_EDU_PO      SMALLINT,
    NOM_DELA_DO     SMALLINT,
    NOM_DELA_PO     SMALLINT,
    NOM_GROUP_DO    VARCHAR(5),
    NOM_GROUP_PO    VARCHAR(5),
    N_SPECIALIZ_DO  SMALLINT,
    N_SPECIALIZ_PO  SMALLINT,
    N_SPEC_DO       SMALLINT,
    N_SPEC_PO       SMALLINT,
    N_CK            SMALLINT,
    KONKURS_DO      SMALLINT,
    KONKURS_PO      SMALLINT,
    DATE_P          DATE
);


CREATE TABLE ABITUR_LOGBOOK (
    ID_LOG          INTEGER,
    NOM_DELA        SMALLINT,
    NOMER_AB        INTEGER,
    DATE_IN         DATE,
    VID_EDU         SMALLINT,
    PRICE           SMALLINT,
    TERM_EDU        SMALLINT,
    ADDRESS_BEFORE  VARCHAR(100) COLLATE PXW_CYRL,
    N_CK            SMALLINT,
    DATE_OUT        DATE,
    N_SPECIALIZ     SMALLINT,
    N_FAC           SMALLINT,
    KONKURS         SMALLINT,
    CATEGORY        SMALLINT
);


CREATE TABLE ABITUR_PRIVILEG (
    NOMER_AB  INTEGER,
    N_PRIV    SMALLINT,
    SEL_PRIV  SMALLINT,
    DAT_PRIV  SMALLINT
);


CREATE TABLE ABITUR_QUEUE (
    ID_AB         INTEGER,
    FAM           VARCHAR(30) COLLATE PXW_CYRL,
    NAME          VARCHAR(30) COLLATE PXW_CYRL,
    OTCH          VARCHAR(30) COLLATE PXW_CYRL,
    STATUS_QUEUE  SMALLINT DEFAULT 0,
    PHOTO         BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    DIGIT_SIGN    BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    N_FAC         SMALLINT DEFAULT 0,
    NOMER_QUEUE   SMALLINT DEFAULT 0,
    TIME_QUEUE    DATE,
    N_SPECIALIZ   SMALLINT DEFAULT -1,
    N_SPEC        SMALLINT DEFAULT -1,
    VID_EDU       SMALLINT DEFAULT -1,
    CATEGORY_AB   SMALLINT DEFAULT -1,
    CATEGORY_IF   SMALLINT DEFAULT -1,
    CATEGORY_EDU  SMALLINT DEFAULT -1,
    TERM_EDU      SMALLINT DEFAULT -1,
    PRICE         SMALLINT DEFAULT -1,
    KONKURS       SMALLINT DEFAULT -1,
    DATE_TIME_ID  SMALLINT
);


CREATE TABLE ABITURA (
    NOMER_AB          INTEGER,
    FAM               VARCHAR(30) COLLATE PXW_CYRL,
    NAME              VARCHAR(30) COLLATE PXW_CYRL,
    OTCH              VARCHAR(30) COLLATE PXW_CYRL,
    POL               CHAR(1) COLLATE PXW_CYRL,
    PLACE_R           VARCHAR(60) COLLATE PXW_CYRL,
    NAZ               VARCHAR(15) COLLATE PXW_CYRL,
    ADDRESS_BEFORE    VARCHAR(100) COLLATE PXW_CYRL,
    ADDRESS_LIFE      VARCHAR(100) COLLATE PXW_CYRL,
    MIDDLE_BALL       DOUBLE PRECISION,
    NAME_EDU_MIDDLE   VARCHAR(50) COLLATE PXW_CYRL,
    NAME_EDU_SPEC     VARCHAR(50) COLLATE PXW_CYRL,
    WHERE_EDU_MIDDLE  VARCHAR(50) COLLATE PXW_CYRL,
    WHERE_EDU_SPEC    VARCHAR(50) COLLATE PXW_CYRL,
    WHEN_EDU_MIDDLE   SMALLINT,
    WHEN_EDU_SPEC     SMALLINT,
    NOM_DELA          SMALLINT,
    VID_EDU           SMALLINT,
    NOM_GROUP         VARCHAR(5) COLLATE PXW_CYRL,
    MAMA              VARCHAR(50) COLLATE PXW_CYRL,
    PAPA              VARCHAR(50) COLLATE PXW_CYRL,
    WORK_MAMA         VARCHAR(70) COLLATE PXW_CYRL,
    WORK_PAPA         VARCHAR(70) COLLATE PXW_CYRL,
    GRAGDAN           VARCHAR(50) COLLATE PXW_CYRL,
    N_REGION          SMALLINT,
    N_SPECIALIZ       SMALLINT,
    STATUS            SMALLINT,
    N_PRIVILEGE_EXAM  SMALLINT,
    SUM_BALL          DOUBLE PRECISION,
    N_FAC             SMALLINT,
    N_VID_SPORT       SMALLINT,
    N_SPORT_CATEGORY  SMALLINT,
    D_PRIKAZ_INCLUDE  DATE,
    N_PRIKAZ_INCLUDE  SMALLINT,
    PHONE             VARCHAR(30) COLLATE PXW_CYRL,
    PHOTO             BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    STAG              DOUBLE PRECISION,
    DATE_PRIEM        DATE,
    DATE_VOZVRAT      DATE,
    DATE_R            DATE,
    KONKURS           SMALLINT,
    N_CK              SMALLINT,
    N_FOUND           SMALLINT,
    EDUCATION         SMALLINT,
    NOM_ATTEST        VARCHAR(20) COLLATE PXW_CYRL,
    NOM_DIPLOM        VARCHAR(20) COLLATE PXW_CYRL,
    STAG_SPEC         DOUBLE PRECISION,
    COPY_AT           SMALLINT DEFAULT 0,
    STAT_AB           VARCHAR(8),
    WORK_BEFORE       VARCHAR(70) COLLATE PXW_CYRL,
    N_SPEC            SMALLINT,
    RUS_BEL           SMALLINT,
    V_K               VARCHAR(5),
    PRIV              VARCHAR(50),
    WITHOUT           VARCHAR(5),
    N_LANGVICH        SMALLINT,
    LANGV_BALL        SMALLINT,
    N_CENTRE          INTEGER,
    PRICE             SMALLINT,
    PASPORT           VARCHAR(150) COLLATE PXW_CYRL,
    PERSONAL_NOMER    VARCHAR(14) COLLATE PXW_CYRL,
    DATE_V            DATE,
    ORGAN_V           VARCHAR(255) COLLATE PXW_CYRL,
    ID_AB_QUEUE       INTEGER DEFAULT 0,
    DIGIT_SIGN        BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    CATEGORY_AB       SMALLINT,
    TERM_EDU          SMALLINT,
    CATEGORY_IF       SMALLINT,
    ADDRESS_PAPA      VARCHAR(100) COLLATE PXW_CYRL,
    ADDRESS_MAMA      VARCHAR(100) COLLATE PXW_CYRL,
    CITIZENSHIP       SMALLINT,
    TOWN_VILLAGE      SMALLINT,
    TYPE_SCHOOL       SMALLINT,
    ID_TYPE           SMALLINT,
    DATE_OK           DATE,
    DISABLED          SMALLINT,
    STREET            INTEGER,
    HOUSE             VARCHAR(10),
    FLAT              SMALLINT,
    POSTCODE          INTEGER
);


CREATE TABLE BALL (
    NOM_BALL  SMALLINT,
    BALL      VARCHAR(15) COLLATE PXW_CYRL
);


CREATE TABLE BLOCK_EDIT (
    ID_BLOCK          INTEGER,
    N_FAC             SMALLINT,
    ADD_ABITUR        SMALLINT,
    TOOK_DOC1         SMALLINT,
    TOOK_DOC2         SMALLINT,
    RE_INSIDE_FAC     SMALLINT,
    RESTOR_LIST       SMALLINT,
    BLOCK             SMALLINT,
    PEREPODACHA       INTEGER,
    NOTE              VARCHAR(255),
    NOTE_PEREPODACHA  VARCHAR(100) COLLATE PXW_CYRL
);


CREATE TABLE CALL_ABITURIENT (
    ID_CALL            SMALLINT,
    N_FAC              SMALLINT,
    N_CALL_ABITURIENT  SMALLINT,
    P_CALL             SMALLINT,
    P_SOUND_01         SMALLINT,
    P_SOUND_02         SMALLINT,
    P_SOUND_03         SMALLINT
);


CREATE TABLE CATEGORY (
    N_SPORT_CATEGORY  SMALLINT,
    SPORT_CATEGORY    VARCHAR(50) COLLATE PXW_CYRL
);


CREATE TABLE CERTIFICATES_LOGBOOK (
    ID_LOG     INTEGER,
    N_PREDMET  SMALLINT,
    SERIA_S    VARCHAR(10),
    NOMER_S    VARCHAR(15),
    BALL       SMALLINT,
    DESCRIBE   VARCHAR(150),
    RUS_BEL    SMALLINT
);


CREATE TABLE CK (
    N_CK            SMALLINT,
    N_SPECIALIZ     SMALLINT,
    N_REGION        SMALLINT,
    TEXT_DEP        VARCHAR(30) COLLATE PXW_CYRL,
    KOL_P           SMALLINT,
    CUSTOMER_PLACE  VARCHAR(50) COLLATE PXW_CYRL,
    N_FAC           SMALLINT,
    N_CENTRE        INTEGER,
    CUSTOMER        SMALLINT,
    TERM_EDUC       SMALLINT
);


CREATE TABLE CK_PLAN (
    ID_CK_PLAN   INTEGER,
    N_SPECIALIZ  SMALLINT,
    KOL_PLACE    SMALLINT,
    TERM_EDUC    SMALLINT
);


CREATE TABLE CONTROL_EXERC (
    ID_CONTROL_EXERC  INTEGER,
    N_FAC             SMALLINT,
    N_SPECIALIZ       SMALLINT,
    POL               CHAR(1),
    NUM_EXERC_GRP     SMALLINT,
    ID_EXERC          SMALLINT
);


CREATE TABLE DATE_ARRIVED (
    ID_DATE    INTEGER NOT NULL,
    DATE_TEXT  VARCHAR(20)
);


CREATE TABLE DATE_TIME_ARRIVED (
    ID_DATE_TIME  INTEGER NOT NULL,
    DATE_ID       INTEGER,
    TIME_ID       INTEGER,
    N_FAC         INTEGER
);


CREATE TABLE DOCUM (
    N_DOC      SMALLINT,
    TEXT_DOC   VARCHAR(200) COLLATE PXW_CYRL,
    DATE_DOC   BOOLEAN,
    INDEX_DOC  BOOLEAN
);


CREATE TABLE EDU_DOCUMENT (
    N_EDU_DOC  SMALLINT,
    EDU_DOC    VARCHAR(50) COLLATE PXW_CYRL
);


CREATE TABLE EDU_PERIOD (
    ID          SMALLINT,
    EDU_PERIOD  VARCHAR(32)
);


CREATE TABLE EDUCATION (
    ID         INTEGER,
    NOMER_AB   INTEGER,
    N_EDU_DOC  SMALLINT,
    NOM_DOC    VARCHAR(20),
    NAME_EDU   VARCHAR(50),
    WHERE_EDU  VARCHAR(50),
    WHEN_EDU   VARCHAR(50)
);


CREATE TABLE EXAMEN (
    NOMER_AB     INTEGER,
    N_PREDMET    SMALLINT,
    NOM_BALL     SMALLINT,
    BALL         DOUBLE PRECISION,
    STATUS_BALL  SMALLINT
);


CREATE TABLE EXERCISE (
    ID_EXERC    SMALLINT,
    NAME_EXERC  VARCHAR(255)
);


CREATE TABLE FACULTY (
    N_FAC    INTEGER,
    FAC      VARCHAR(70) COLLATE PXW_CYRL,
    FAC1     VARCHAR(20) COLLATE PXW_CYRL,
    KOD_FAC  SMALLINT,
    DEAN     VARCHAR(30),
    FAC_RP   VARCHAR(70)
);


CREATE TABLE IBE$LOG_BLOB_FIELDS (
    LOG_TABLES_ID   INTEGER,
    FIELD_NAME      VARCHAR(31) CHARACTER SET UNICODE_FSS,
    OLD_CHAR_VALUE  VARCHAR(10000) CHARACTER SET UNICODE_FSS,
    NEW_CHAR_VALUE  VARCHAR(10000) CHARACTER SET UNICODE_FSS,
    OLD_BLOB_VALUE  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    NEW_BLOB_VALUE  BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE IBE$LOG_FIELDS (
    LOG_TABLES_ID  INTEGER,
    FIELD_NAME     VARCHAR(31) CHARACTER SET UNICODE_FSS,
    OLD_VALUE      VARCHAR(255) CHARACTER SET UNICODE_FSS,
    NEW_VALUE      VARCHAR(255) CHARACTER SET UNICODE_FSS
);


CREATE TABLE IBE$LOG_KEYS (
    LOG_TABLES_ID  INTEGER,
    KEY_FIELD      VARCHAR(31) CHARACTER SET UNICODE_FSS,
    KEY_VALUE      VARCHAR(255) CHARACTER SET UNICODE_FSS
);


CREATE TABLE IBE$LOG_TABLES (
    ID          INTEGER,
    TABLE_NAME  VARCHAR(31) CHARACTER SET UNICODE_FSS,
    OPERATION   VARCHAR(1),
    DATE_TIME   DATE,
    USER_NAME   VARCHAR(31)
);


CREATE TABLE INTERMEDIATE_ABITUR (
    ABITUR_ID             INTEGER NOT NULL,
    FAM                   VARCHAR(30) COLLATE PXW_CYRL,
    NAME                  VARCHAR(30) COLLATE PXW_CYRL,
    OTCH                  VARCHAR(30) COLLATE PXW_CYRL,
    PHONE                 VARCHAR(30) COLLATE PXW_CYRL,
    DATE_BIRD             DATE,
    POL                   SMALLINT,
    ADDRESS_REG           VARCHAR(100) COLLATE PXW_CYRL,
    ADDRESS_LIFE          VARCHAR(100) COLLATE PXW_CYRL,
    MIDDLE_BALL           INTEGER,
    NAME_EDU_MIDDLE       VARCHAR(50) COLLATE PXW_CYRL,
    NAME_EDU_SPEC         VARCHAR(50) COLLATE PXW_CYRL,
    WHERE_EDUC_MIDDLE     VARCHAR(50) COLLATE PXW_CYRL,
    WHERE_EDU_SPEC        VARCHAR(50) COLLATE PXW_CYRL,
    WHEN_EDU_MIDDLE       SMALLINT,
    WHEN_EDU_SPEC         SMALLINT,
    VID_EDU               SMALLINT,
    FIO_MOM               VARCHAR(50) COLLATE PXW_CYRL,
    FIO_DAD               VARCHAR(50) COLLATE PXW_CYRL,
    ADDRESS_MOM           VARCHAR(100) COLLATE PXW_CYRL,
    ADDRESS_DAD           VARCHAR(100) COLLATE PXW_CYRL,
    GRAGDAN               INTEGER,
    N_REGION              SMALLINT,
    N_DISTRICT            SMALLINT,
    N_TYPE_LOCALITY       SMALLINT,
    N_LOCALITY            SMALLINT,
    N_TYPE_STREET         SMALLINT,
    N_STREET              INTEGER,
    HOUSE                 VARCHAR(10),
    FLAT                  SMALLINT,
    POSTCODE              INTEGER,
    N_FAC                 SMALLINT,
    N_SPECIALIZ           SMALLINT,
    N_VID_SPORT           SMALLINT,
    N_SPORT_CATEGORY      SMALLINT,
    WORK_BEFORE           VARCHAR(70) COLLATE PXW_CYRL,
    STAGE                 DOUBLE PRECISION,
    N_LANGUAGE            SMALLINT,
    N_DOCUM_TYPE          SMALLINT,
    PASPORT               VARCHAR(150) COLLATE PXW_CYRL,
    PERSONAL_NUMBER       VARCHAR(14) COLLATE PXW_CYRL,
    DATE_V                DATE,
    DATE_OK               DATE,
    ORGAN_V               VARCHAR(255) COLLATE PXW_CYRL,
    CATEGORY_AB           SMALLINT,
    TOWN_VILLAGE          SMALLINT,
    TYPE_SCHOOL           SMALLINT,
    VERIFICATION          SMALLINT,
    NUMBER_ATEEST_MIDDLE  VARCHAR(20),
    NUMBER_DIPLOM_SPEC    VARCHAR(20),
    EMAIL                 VARCHAR(100) COLLATE PXW_CYRL,
    EDUCATION             SMALLINT,
    REJECTION_REASON      VARCHAR(255),
    N_SPEC                SMALLINT
);


CREATE TABLE KOL_PLACE (
    N_KOL_PLACE  SMALLINT,
    N_SPECIALIZ  SMALLINT,
    KOL_PLACE    SMALLINT,
    TEXT         SMALLINT,
    N_FAC        SMALLINT,
    VID_EDU      SMALLINT,
    PRICE        SMALLINT DEFAULT 0,
    RECRUIT      SMALLINT DEFAULT 1 NOT NULL
);


CREATE TABLE LANGUAGE (
    N_LANGUAGE  INTEGER,
    LANGUAGE    VARCHAR(20)
);


CREATE TABLE LIST_DOC (
    NOMER_AB   INTEGER NOT NULL,
    N_DOC      SMALLINT NOT NULL,
    DATE_DOC   DATE,
    DOC_INDEX  VARCHAR(20)
);


CREATE TABLE LOCALITY (
    ID             INTEGER,
    N_REGION       SMALLINT,
    N_DISTRICT     SMALLINT,
    NAME_LOCALITY  VARCHAR(30),
    CODE_SOATO     VARCHAR(30),
    CODE_CATEGORY  SMALLINT,
    TYPE_LOCALITY  SMALLINT
);


CREATE TABLE N_GROUP (
    N_GROUP      SMALLINT,
    NOM_GROUP    VARCHAR(5) COLLATE PXW_CYRL,
    N_SPECIALIZ  SMALLINT,
    VID_EDU      SMALLINT,
    DESCRIBE     VARCHAR(150),
    N_FAC        SMALLINT,
    N_COUNT      SMALLINT
);


CREATE TABLE ORDER_SPECIALIZ (
    N_OR_SPEC    INTEGER,
    N_SPECIALIZ  INTEGER,
    ORDER_SP     INTEGER
);


CREATE TABLE PERSONAL_TYPE (
    ID_TYPE    INTEGER NOT NULL,
    NAME_TYPE  VARCHAR(50) COLLATE PXW_CYRL
);


CREATE TABLE PREDMET (
    N_PREDMET     SMALLINT,
    TEXT_PREDMET  VARCHAR(100)
);


CREATE TABLE PRIVELEG_ARRAY (
    ID_PRIV  SMALLINT,
    N_ITEM   SMALLINT,
    ID_DET   SMALLINT
);


CREATE TABLE PRIVELEG_DETAILS (
    ID_DET       SMALLINT,
    NAME_DETAIS  VARCHAR(30) COLLATE PXW_CYRL,
    SHORT_NAME   VARCHAR(7) COLLATE PXW_CYRL
);


CREATE TABLE PRIVILEG_LOG (
    ID_LOG    INTEGER,
    N_PRIV    SMALLINT,
    SEL_PRIV  SMALLINT,
    DAT_PRIV  SMALLINT
);


CREATE TABLE PRIVILEGE (
    ID_PRIV          SMALLINT,
    NAME_PRIV        VARCHAR(80) COLLATE PXW_CYRL,
    SHORT_NAME       VARCHAR(15) COLLATE PXW_CYRL,
    N_WITHOUT_TESTS  SMALLINT,
    N_OUT_TESTS      SMALLINT,
    N_OTHERS         SMALLINT
);


CREATE TABLE QUEUE (
    TIME_QUEUE           DATE,
    SIGN                 INTEGER,
    REFERENCE            INTEGER,
    SIIE_DEKAN           INTEGER,
    MVS_DEKAN            INTEGER,
    OFK_DEKAN            INTEGER,
    MSTIG_DEKAN          INTEGER,
    SIIE                 INTEGER,
    MVS                  INTEGER,
    OFK                  INTEGER,
    MSTIG                INTEGER,
    SIGN_ONLINE          INTEGER,
    REFERENCE_ONLINE     INTEGER,
    SIIE_DEKAN_ONLINE    INTEGER,
    MVS_DEKAN_ONLINE     INTEGER,
    OFK_DEKAN_ONLINE     INTEGER,
    MSTIG_DEKAN_ONLINE   INTEGER,
    SIIE_DEKAN_PICK_UP   INTEGER,
    MVS_DEKAN_PICK_UP    INTEGER,
    OFK_DEKAN_PICK_UP    INTEGER,
    MSTIG_DEKAN_PICK_UP  INTEGER,
    SIIE_PICK_UP         INTEGER,
    MVS_PICK_UP          INTEGER,
    OFK_PICK_UP          INTEGER,
    MSTIG_PICK_UP        INTEGER
);


CREATE TABLE REGION (
    N_REGION     SMALLINT,
    TEXT_REGION  VARCHAR(40) COLLATE PXW_CYRL
);


CREATE TABLE SCANS (
    ID_SCAN    INTEGER,
    ID_ABITUR  INTEGER,
    SCAN       BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    TYPE_DOC   INTEGER
);


CREATE TABLE SEL_EXERCIZE (
    ID_SEL_EXERC   INTEGER,
    NOMER_AB       INTEGER,
    NUM_EXERC_GRP  SMALLINT,
    ID_EXERC       SMALLINT
);


CREATE TABLE SELECTION_COMMITTEE (
    POST       VARCHAR(30) NOT NULL COLLATE PXW_CYRL,
    FIO        VARCHAR(30) COLLATE PXW_CYRL,
    IOF        VARCHAR(30) COLLATE PXW_CYRL,
    SIGNATURE  BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE SERTIFICAT (
    NOMER_AB   INTEGER,
    N_PREDMET  SMALLINT,
    SERIA_S    VARCHAR(10),
    NOMER_S    VARCHAR(15),
    BALLS      SMALLINT,
    DESCRIBE   VARCHAR(150) COLLATE PXW_CYRL,
    RUS_BEL    SMALLINT,
    PRICE      SMALLINT,
    YEAR_S     INTEGER
);


CREATE TABLE SHKALA (
    INC_SHKALA       INTEGER,
    N_PREDMET        INTEGER,
    BALL_SERTIFIKAT  SMALLINT,
    BALL             DOUBLE PRECISION,
    RUS_BEL          SMALLINT
);


CREATE TABLE SPECIALITY (
    N_SPEC     SMALLINT,
    SPEC       VARCHAR(255),
    OLD_NUM    SMALLINT DEFAULT 0,
    CODE_SPEC  VARCHAR(10)
);


CREATE TABLE SPECIALIZ (
    N_SPECIALIZ             SMALLINT,
    CODE_SPECIALIZ          VARCHAR(15),
    SPECIAL                 VARCHAR(80) COLLATE PXW_CYRL,
    N_FAC                   SMALLINT,
    N_SPEC                  SMALLINT,
    SPECIAL_SKLON           VARCHAR(80) COLLATE PXW_CYRL,
    SPECIAL_DIRECTION       VARCHAR(255) COLLATE PXW_CYRL,
    N_SPEC_DIR              INTEGER,
    SPECIAL_DIRECTION_SOKR  VARCHAR(255) COLLATE PXW_CYRL
);


CREATE TABLE STREET (
    ID           INTEGER,
    ID_LOCALITY  INTEGER,
    NAME_IN_RUS  VARCHAR(62),
    BEL_NAME     VARCHAR(49),
    DATE_REG     DATE,
    SOATO        VARCHAR(30),
    TYPE_STREET  INTEGER
);


CREATE TABLE TIME_ARRIVED (
    ID_TIME    INTEGER NOT NULL,
    TIME_NAME  VARCHAR(20)
);


CREATE TABLE VID_EDU (
    ID_VID_EDU  SMALLINT NOT NULL,
    VID_EDU     VARCHAR(10)
);




/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: ABITUR_VIEW */
CREATE VIEW ABITUR_VIEW(
    NOMER_AB,
    FAM,
    NAME,
    OTCH,
    N_SPECIALIZ,
    VID_EDU,
    N_FAC,
    NOM_DELA,
    NOM_GROUP,
    TERM_EDU,
    PRICE,
    KONKURS)
AS
SELECT
    ABITURA.nomer_ab,
    ABITURA.FAM,
    ABITURA.NAME,
    ABITURA.OTCH,
    ABITURA.N_SPECIALIZ,
    ABITURA.VID_EDU,
    ABITURA.N_FAC,
    ABITURA.NOM_DELA,
    ABITURA.NOM_GROUP,
    ABITURA.term_edu,
    ABITURA.price,
    ABITURA.konkurs
FROM
    ABITURA Abitura
WHERE
    ABITURA.NOMER_AB = 1
;



/* View: COMP_NOM */
CREATE VIEW COMP_NOM(
    NOMER_AB)
AS
select a.nomer_ab from abitura a, abitura b
where a.n_fac = b.n_fac
and a.vid_edu = b.vid_edu
and a.price = b.price
and a.term_edu = b.term_edu
and a.nom_dela = b.nom_dela
and a.nomer_ab <> b.nomer_ab
and a.status = 0
and b.status = 0
;



/* View: NEW_VIEW */
CREATE VIEW NEW_VIEW(
    NOMER_AB,
    BALL,
    SUM_BALL,
    MIDDLE_BALL)
AS
SELECT Abitura.NOMER_AB, SUM( Examen.BALL ), Abitura.SUM_BALL, abitura.middle_ball
FROM ABITURA Abitura
   INNER JOIN EXAMEN Examen
   ON  (Abitura.NOMER_AB = Examen.NOMER_AB)  
WHERE   (Abitura.NOMER_AB = 3 )
     -- (Abitura.n_fac =:N_FAC)
       --Abitura.sum_ball <>  SUM( Examen.BALL ) + abitura.middle_ball
      --and  Abitura.sum_ball <>  SUM( Examen.BALL)
GROUP BY Abitura.NOMER_AB, Abitura.SUM_BALL, abitura.middle_ball
;



/* View: SUM_EXAM */
CREATE VIEW SUM_EXAM(
    NOMER_AB,
    SUM_BAL)
AS
select examen.nomer_ab, sum(examen.ball) from examen
group by examen.nomer_ab
;



/* View: SUMM_BAL */
CREATE VIEW SUMM_BAL(
    NOMER_AB,
    BALLS,
    MIDDLE)
AS
select examen.nomer_ab, examen.ball, abitura.middle_ball  from abitura, examen
where examen.nomer_ab = abitura.nomer_ab
;



/* View: SUMM_BALL */
CREATE VIEW SUMM_BALL(
    NOMER_AB,
    BALLS,
    MIDDLE)
AS
select sertificat.nomer_ab, sertificat.balls, abitura.middle_ball  from sertificat, abitura, examen
where sertificat.nomer_ab = abitura.nomer_ab
and examen.nomer_ab = sertificat.nomer_ab
--and examen.nomer_ab = sertificat.nomer_ab
--and examen.nomer_ab = 2
group by  sertificat.nomer_ab, sertificat.balls, abitura.middle_ball
;



/* View: SUMM_BALLS */
CREATE VIEW SUMM_BALLS(
    NOMER_AB,
    BALLS,
    MIDDLE)
AS
select sertificat.nomer_ab, sertificat.balls, abitura.middle_ball  from sertificat, abitura
where sertificat.nomer_ab = abitura.nomer_ab
;



/* View: SUMMA */
CREATE VIEW SUMMA(
    NOMER_AB,
    SUMM_BAL)
AS
select summ_bal.nomer_ab, (sum(summ_bal.balls) + avg(summ_bal.middle)) as summa  from summ_bal
group by summ_bal.nomer_ab
;



/* View: SUMM_ERROR */
CREATE VIEW SUMM_ERROR(
    NOMER_AB,
    SUM_AB,
    SUM_SERT)
AS
select summa.nomer_ab, abitura.sum_ball, summa.summ_bal from summa, abitura
where summa.nomer_ab = abitura.nomer_ab
and summa.summ_bal <> abitura.sum_ball
;




/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE ABITURA ADD PRIMARY KEY (NOMER_AB);
ALTER TABLE ABITUR_LOGBOOK ADD CONSTRAINT PK_ABITUR_LOGBOOK PRIMARY KEY (ID_LOG);
ALTER TABLE ABITUR_QUEUE ADD CONSTRAINT PK_ABITUR_QUEUE PRIMARY KEY (ID_AB);
ALTER TABLE AB_P ADD CONSTRAINT PK_AB_P PRIMARY KEY (N_AB_P);
ALTER TABLE BALL ADD PRIMARY KEY (NOM_BALL);
ALTER TABLE BLOCK_EDIT ADD CONSTRAINT PK_BLOCK_EDIT PRIMARY KEY (ID_BLOCK);
ALTER TABLE CALL_ABITURIENT ADD CONSTRAINT PK_CALL_ABITURIENT PRIMARY KEY (ID_CALL);
ALTER TABLE CATEGORY ADD PRIMARY KEY (N_SPORT_CATEGORY);
ALTER TABLE CK ADD PRIMARY KEY (N_CK);
ALTER TABLE CK_PLAN ADD CONSTRAINT PK_CK_PLAN PRIMARY KEY (ID_CK_PLAN);
ALTER TABLE CONTROL_EXERC ADD CONSTRAINT PK_CONTROL_EXERC PRIMARY KEY (ID_CONTROL_EXERC);
ALTER TABLE DATE_ARRIVED ADD CONSTRAINT PK_DATE_ARRIVED PRIMARY KEY (ID_DATE);
ALTER TABLE DATE_TIME_ARRIVED ADD CONSTRAINT PK_DATE_TIME_ARRIVED PRIMARY KEY (ID_DATE_TIME);
ALTER TABLE DOCUM ADD PRIMARY KEY (N_DOC);
ALTER TABLE EDU_PERIOD ADD CONSTRAINT PK_EDU_PERIOD PRIMARY KEY (ID);
ALTER TABLE EXERCISE ADD CONSTRAINT PK_EXERCISE PRIMARY KEY (ID_EXERC);
ALTER TABLE IBE$LOG_TABLES ADD PRIMARY KEY (ID);
ALTER TABLE KOL_PLACE ADD PRIMARY KEY (N_KOL_PLACE);
ALTER TABLE ORDER_SPECIALIZ ADD PRIMARY KEY (N_OR_SPEC);
ALTER TABLE PERSONAL_TYPE ADD CONSTRAINT PK_PERSONAL_TYPE PRIMARY KEY (ID_TYPE);
ALTER TABLE PREDMET ADD PRIMARY KEY (N_PREDMET);
ALTER TABLE PRIVELEG_DETAILS ADD CONSTRAINT PK_PRIVELEG_DETAILS PRIMARY KEY (ID_DET);
ALTER TABLE PRIVILEGE ADD CONSTRAINT PK_PRIVILEGE PRIMARY KEY (ID_PRIV);
ALTER TABLE REGION ADD PRIMARY KEY (N_REGION);
ALTER TABLE SELECTION_COMMITTEE ADD CONSTRAINT PK_SELECTION_COMMITTEE PRIMARY KEY (POST);
ALTER TABLE SEL_EXERCIZE ADD CONSTRAINT PK_SEL_EXERCIZE PRIMARY KEY (ID_SEL_EXERC);
ALTER TABLE SHKALA ADD CONSTRAINT PK_SHKALA PRIMARY KEY (INC_SHKALA);
ALTER TABLE TIME_ARRIVED ADD CONSTRAINT PK_TIME_ARRIVED PRIMARY KEY (ID_TIME);
ALTER TABLE VID_EDU ADD CONSTRAINT PK_VID_EDU PRIMARY KEY (ID_VID_EDU);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE CONTROL_EXERC ADD CONSTRAINT FK_CONTROL_EXERC_1 FOREIGN KEY (ID_EXERC) REFERENCES EXERCISE (ID_EXERC);
ALTER TABLE SEL_EXERCIZE ADD CONSTRAINT FK_SEL_EXERCIZE_1 FOREIGN KEY (ID_EXERC) REFERENCES EXERCISE (ID_EXERC);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX ABITURA_CENTRE ON ABITURA (N_CENTRE);
CREATE INDEX ABITURA_DATE_PRIEM ON ABITURA (DATE_PRIEM);
CREATE INDEX ABITURA_FAC ON ABITURA (N_FAC);
CREATE INDEX ABITURA_FAC_EDU_GROUP ON ABITURA (N_FAC, VID_EDU, NOM_GROUP);
CREATE INDEX ABITURA_FAC_EDU_SPEC ON ABITURA (N_FAC, VID_EDU, N_SPECIALIZ);
CREATE INDEX ABITURA_FAM ON ABITURA (FAM);
CREATE INDEX ABITURA_GRAGDAN ON ABITURA (GRAGDAN);
CREATE INDEX ABITURA_KONKURS ON ABITURA (KONKURS);
CREATE INDEX ABITURA_LANGVICH ON ABITURA (N_LANGVICH);
CREATE INDEX ABITURA_MIDDLE_BALL ON ABITURA (MIDDLE_BALL);
CREATE INDEX ABITURA_NAME ON ABITURA (NAME);
CREATE INDEX ABITURA_NOM_DELA ON ABITURA (NOM_DELA);
CREATE INDEX ABITURA_NOM_GROUP ON ABITURA (NOM_GROUP);
CREATE INDEX ABITURA_N_CK ON ABITURA (N_CK);
CREATE INDEX ABITURA_N_FOUND ON ABITURA (N_FOUND);
CREATE INDEX ABITURA_OTCH ON ABITURA (OTCH);
CREATE INDEX ABITURA_PRIV ON ABITURA (PRIV);
CREATE INDEX ABITURA_REGION ON ABITURA (N_REGION);
CREATE INDEX ABITURA_SPEC ON ABITURA (N_SPEC);
CREATE INDEX ABITURA_SPECIALIZ ON ABITURA (N_SPECIALIZ);
CREATE INDEX ABITURA_SPEC_EDU ON ABITURA (N_SPEC, VID_EDU);
CREATE INDEX ABITURA_STAG ON ABITURA (STAG);
CREATE INDEX ABITURA_STAG_SPEC ON ABITURA (STAG_SPEC);
CREATE INDEX ABITURA_STATUS ON ABITURA (STATUS);
CREATE INDEX ABITURA_STAT_AB ON ABITURA (STAT_AB);
CREATE INDEX ABITURA_SUM_BALL ON ABITURA (SUM_BALL);
CREATE INDEX ABITURA_VID_EDU ON ABITURA (VID_EDU);
CREATE INDEX ABITURA_VK ON ABITURA (V_K);
CREATE INDEX ABITURA_WHEN_MIDDLE ON ABITURA (WHEN_EDU_MIDDLE);
CREATE INDEX ABITURA_WHEN_SPEC ON ABITURA (WHEN_EDU_SPEC);
CREATE INDEX ABITURA_WITHOUT ON ABITURA (WITHOUT);
CREATE INDEX AB_P_NOMER_AB ON AB_P (NOMER_AB);
CREATE INDEX BALL_TEXT_BALL ON BALL (BALL);
CREATE INDEX CATEGORY_SPORT_CATEGORY ON CATEGORY (SPORT_CATEGORY);
CREATE INDEX CK_CENTRE ON CK (N_CENTRE);
CREATE INDEX CK_FAC ON CK (N_FAC);
CREATE INDEX CK_FAC_SPECIALIZ ON CK (N_FAC, N_SPECIALIZ);
CREATE INDEX CK_REGION ON CK (N_REGION);
CREATE INDEX CK_SPECIALIZ ON CK (N_SPECIALIZ);
CREATE INDEX CK_TEXT_DEP ON CK (TEXT_DEP);
CREATE INDEX DOC_IND ON DOCUM (TEXT_DOC);
CREATE INDEX EXAMEN_BALL ON EXAMEN (BALL);
CREATE INDEX EXAMEN_NOMER_AB ON EXAMEN (NOMER_AB);
CREATE INDEX EXAMEN_NOMER_AB_PREDMET ON EXAMEN (NOMER_AB, N_PREDMET);
CREATE INDEX EXAMEN_NOM_BALL ON EXAMEN (NOM_BALL);
CREATE INDEX EXAMEN_PREDMET ON EXAMEN (N_PREDMET);
CREATE INDEX EXAMEN_STATUS_BALL ON EXAMEN (STATUS_BALL);
CREATE INDEX IBE$LOG_BLOB_FIELDS_IDX1 ON IBE$LOG_BLOB_FIELDS (LOG_TABLES_ID);
CREATE INDEX IBE$LOG_FIELDS_IDX1 ON IBE$LOG_FIELDS (LOG_TABLES_ID);
CREATE INDEX IBE$LOG_KEYS_IDX1 ON IBE$LOG_KEYS (LOG_TABLES_ID);
CREATE INDEX KOL_PLACE_FAC ON KOL_PLACE (N_FAC);
CREATE INDEX KOL_PLACE_FAC_EDU ON KOL_PLACE (N_FAC, VID_EDU);
CREATE INDEX KOL_PLACE_FAC_EDU_SPEC ON KOL_PLACE (N_FAC, VID_EDU, N_SPECIALIZ);
CREATE INDEX KOL_PLACE_SPECIALIZ ON KOL_PLACE (N_SPECIALIZ);
CREATE INDEX KOL_PLACE_TEXT ON KOL_PLACE (TEXT);
CREATE INDEX KOL_PLACE_VID_EDU ON KOL_PLACE (VID_EDU);
CREATE INDEX N_GROUP_COUNT ON N_GROUP (N_COUNT);
CREATE INDEX N_GROUP_DESC ON N_GROUP (DESCRIBE);
CREATE INDEX N_GROUP_FAC ON N_GROUP (N_FAC);
CREATE INDEX N_GROUP_FAC_EDU ON N_GROUP (N_FAC, VID_EDU);
CREATE INDEX N_GROUP_FAC_EDU_DESC ON N_GROUP (N_FAC, VID_EDU, DESCRIBE);
CREATE UNIQUE INDEX N_GROUP_INC ON N_GROUP (N_GROUP);
CREATE INDEX N_GROUP_NOM_GROUP ON N_GROUP (NOM_GROUP);
CREATE INDEX N_GROUP_VID_EDU ON N_GROUP (VID_EDU);
CREATE INDEX OR_SPEC_ORDER ON ORDER_SPECIALIZ (ORDER_SP);
CREATE INDEX OR_SPEC_OR_SP ON ORDER_SPECIALIZ (N_SPECIALIZ, ORDER_SP);
CREATE INDEX OR_SPEC_SPECIALIZ ON ORDER_SPECIALIZ (N_SPECIALIZ);
CREATE INDEX PREDMET_TEXT_PREDMET ON PREDMET (TEXT_PREDMET);
CREATE INDEX REGION_TEXT_REGION ON REGION (TEXT_REGION);
CREATE INDEX SERTIFICAT_BALLS ON SERTIFICAT (BALLS);
CREATE INDEX SERTIFICAT_NOMER_AB ON SERTIFICAT (NOMER_AB);
CREATE INDEX SERTIFICAT_NOMER_AB_PREDMET ON SERTIFICAT (NOMER_AB, N_PREDMET);
CREATE INDEX SERTIFICAT_PREDMET ON SERTIFICAT (N_PREDMET);
CREATE INDEX SERTIFICAT_PRICE ON SERTIFICAT (PRICE);
CREATE INDEX SERTIFICAT_RUS_BEL ON SERTIFICAT (RUS_BEL);
CREATE INDEX SHKALA_SEARCH ON SHKALA (N_PREDMET, BALL_SERTIFIKAT, RUS_BEL);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: ABITUR_LOGBOOK_BI */
CREATE TRIGGER ABITUR_LOGBOOK_BI FOR ABITUR_LOGBOOK
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_log is null) then
    new.id_log = gen_id(gen_abitur_logbook_id,1);
end
^


/* Trigger: ABITUR_QUEUE_BI */
CREATE TRIGGER ABITUR_QUEUE_BI FOR ABITUR_QUEUE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_ab is null) then
    new.id_ab = gen_id(gen_abitur_queue_id,1);
end
^


/* Trigger: AB_P_BI */
CREATE TRIGGER AB_P_BI FOR AB_P
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.N_AB_P IS NULL) THEN
    NEW.N_AB_P = GEN_ID(GEN_AB_P_ID,1);
END
^


/* Trigger: BLOCK_EDIT_BI */
CREATE TRIGGER BLOCK_EDIT_BI FOR BLOCK_EDIT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_block is null) then
    new.id_block = gen_id(gen_block_edit_id,1);
end
^


/* Trigger: CALL_ABITURIENT_BI */
CREATE TRIGGER CALL_ABITURIENT_BI FOR CALL_ABITURIENT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_call is null) then
    new.id_call = gen_id(gen_call_abiturient_id,1);
end
^


/* Trigger: CONTROL_EXERC_BI */
CREATE TRIGGER CONTROL_EXERC_BI FOR CONTROL_EXERC
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_control_exerc is null) then
    new.id_control_exerc = gen_id(gen_control_exerc_id,1);
end
^


/* Trigger: DEL_ABITURIENT */
CREATE TRIGGER DEL_ABITURIENT FOR ABITURA
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
    DELETE FROM EXAMEN WHERE EXAMEN.NOMER_AB=OLD.NOMER_AB;
    DELETE FROM sertificat where sertificat.nomer_ab=OLD.nomer_ab;
    DELETE FROM ab_p where ab_p.nomer_ab=OLD.nomer_ab;
END
^


/* Trigger: EDU_PERIOD_BI */
CREATE TRIGGER EDU_PERIOD_BI FOR EDU_PERIOD
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_edu_period_id,1);
end
^


/* Trigger: EXERCISE_BI */
CREATE TRIGGER EXERCISE_BI FOR EXERCISE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_exerc is null) then
    new.id_exerc = gen_id(gen_exercise_id,1);
end
^


/* Trigger: IBE$ABITURA_AD */
CREATE TRIGGER IBE$ABITURA_AD FOR ABITURA
ACTIVE AFTER DELETE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'ABITURA', 'D', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'NOMER_AB', OLD.NOMER_AB);
 
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOMER_AB',OLD.NOMER_AB, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'FAM',OLD.FAM, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NAME',OLD.NAME, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'OTCH',OLD.OTCH, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'POL',OLD.POL, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PLACE_R',OLD.PLACE_R, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NAZ',OLD.NAZ, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'ADDRESS_BEFORE',OLD.ADDRESS_BEFORE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'MIDDLE_BALL',OLD.MIDDLE_BALL, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NAME_EDU_MIDDLE',OLD.NAME_EDU_MIDDLE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NAME_EDU_SPEC',OLD.NAME_EDU_SPEC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WHERE_EDU_MIDDLE',OLD.WHERE_EDU_MIDDLE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WHERE_EDU_SPEC',OLD.WHERE_EDU_SPEC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WHEN_EDU_MIDDLE',OLD.WHEN_EDU_MIDDLE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WHEN_EDU_SPEC',OLD.WHEN_EDU_SPEC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOM_DELA',OLD.NOM_DELA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'VID_EDU',OLD.VID_EDU, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOM_GROUP',OLD.NOM_GROUP, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'MAMA',OLD.MAMA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PAPA',OLD.PAPA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WORK_MAMA',OLD.WORK_MAMA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WORK_PAPA',OLD.WORK_PAPA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'GRAGDAN',OLD.GRAGDAN, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_REGION',OLD.N_REGION, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_SPECIALIZ',OLD.N_SPECIALIZ, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'STATUS',OLD.STATUS, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_FAC',OLD.N_FAC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_VID_SPORT',OLD.N_VID_SPORT, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_SPORT_CATEGORY',OLD.N_SPORT_CATEGORY, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'D_PRIKAZ_INCLUDE',OLD.D_PRIKAZ_INCLUDE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_PRIKAZ_INCLUDE',OLD.N_PRIKAZ_INCLUDE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PHONE',OLD.PHONE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'STAG',OLD.STAG, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'DATE_PRIEM',OLD.DATE_PRIEM, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'DATE_VOZVRAT',OLD.DATE_VOZVRAT, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'DATE_R',OLD.DATE_R, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'KONKURS',OLD.KONKURS, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_CK',OLD.N_CK, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_FOUND',OLD.N_FOUND, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'EDUCATION',OLD.EDUCATION, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOM_ATTEST',OLD.NOM_ATTEST, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOM_DIPLOM',OLD.NOM_DIPLOM, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'STAG_SPEC',OLD.STAG_SPEC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'STAT_AB',OLD.STAT_AB, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WORK_BEFORE',OLD.WORK_BEFORE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_SPEC',OLD.N_SPEC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'V_K',OLD.V_K, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PRIV',OLD.PRIV, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WITHOUT',OLD.WITHOUT, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_LANGVICH',OLD.N_LANGVICH, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'LANGV_BALL',OLD.LANGV_BALL, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_CENTRE',OLD.N_CENTRE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PRICE',OLD.PRICE, NULL);
 
  
END
^


/* Trigger: IBE$ABITURA_AI */
CREATE TRIGGER IBE$ABITURA_AI FOR ABITURA
ACTIVE AFTER INSERT POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'ABITURA', 'I', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'NOMER_AB', NEW.NOMER_AB);
 
  IF (NOT (NEW.NOMER_AB IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOMER_AB', NULL, NEW.NOMER_AB);
  
  IF (NOT (NEW.FAM IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'FAM', NULL, NEW.FAM);
  
  IF (NOT (NEW.NAME IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NAME', NULL, NEW.NAME);
  
  IF (NOT (NEW.OTCH IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'OTCH', NULL, NEW.OTCH);
  
  IF (NOT (NEW.POL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'POL', NULL, NEW.POL);
  
  IF (NOT (NEW.PLACE_R IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PLACE_R', NULL, NEW.PLACE_R);
  
  IF (NOT (NEW.NAZ IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NAZ', NULL, NEW.NAZ);
  
  IF (NOT (NEW.ADDRESS_BEFORE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'ADDRESS_BEFORE', NULL, NEW.ADDRESS_BEFORE);
  
  IF (NOT (NEW.MIDDLE_BALL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'MIDDLE_BALL', NULL, NEW.MIDDLE_BALL);
  
  IF (NOT (NEW.NAME_EDU_MIDDLE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NAME_EDU_MIDDLE', NULL, NEW.NAME_EDU_MIDDLE);
  
  IF (NOT (NEW.NAME_EDU_SPEC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NAME_EDU_SPEC', NULL, NEW.NAME_EDU_SPEC);
  
  IF (NOT (NEW.WHERE_EDU_MIDDLE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WHERE_EDU_MIDDLE', NULL, NEW.WHERE_EDU_MIDDLE);
  
  IF (NOT (NEW.WHERE_EDU_SPEC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WHERE_EDU_SPEC', NULL, NEW.WHERE_EDU_SPEC);
  
  IF (NOT (NEW.WHEN_EDU_MIDDLE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WHEN_EDU_MIDDLE', NULL, NEW.WHEN_EDU_MIDDLE);
  
  IF (NOT (NEW.WHEN_EDU_SPEC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WHEN_EDU_SPEC', NULL, NEW.WHEN_EDU_SPEC);
  
  IF (NOT (NEW.NOM_DELA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_DELA', NULL, NEW.NOM_DELA);
  
  IF (NOT (NEW.VID_EDU IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'VID_EDU', NULL, NEW.VID_EDU);
  
  IF (NOT (NEW.NOM_GROUP IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_GROUP', NULL, NEW.NOM_GROUP);
  
  IF (NOT (NEW.MAMA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'MAMA', NULL, NEW.MAMA);
  
  IF (NOT (NEW.PAPA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PAPA', NULL, NEW.PAPA);
  
  IF (NOT (NEW.WORK_MAMA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WORK_MAMA', NULL, NEW.WORK_MAMA);
  
  IF (NOT (NEW.WORK_PAPA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WORK_PAPA', NULL, NEW.WORK_PAPA);
  
  IF (NOT (NEW.GRAGDAN IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'GRAGDAN', NULL, NEW.GRAGDAN);
  
  IF (NOT (NEW.N_REGION IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_REGION', NULL, NEW.N_REGION);
  
  IF (NOT (NEW.N_SPECIALIZ IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPECIALIZ', NULL, NEW.N_SPECIALIZ);
  
  IF (NOT (NEW.STATUS IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'STATUS', NULL, NEW.STATUS);
  
  IF (NOT (NEW.N_FAC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_FAC', NULL, NEW.N_FAC);
  
  IF (NOT (NEW.N_VID_SPORT IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_VID_SPORT', NULL, NEW.N_VID_SPORT);
  
  IF (NOT (NEW.N_SPORT_CATEGORY IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPORT_CATEGORY', NULL, NEW.N_SPORT_CATEGORY);
  
  IF (NOT (NEW.D_PRIKAZ_INCLUDE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'D_PRIKAZ_INCLUDE', NULL, NEW.D_PRIKAZ_INCLUDE);
  
  IF (NOT (NEW.N_PRIKAZ_INCLUDE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_PRIKAZ_INCLUDE', NULL, NEW.N_PRIKAZ_INCLUDE);
  
  IF (NOT (NEW.PHONE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PHONE', NULL, NEW.PHONE);
  
  IF (NOT (NEW.STAG IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'STAG', NULL, NEW.STAG);
  
  IF (NOT (NEW.DATE_PRIEM IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'DATE_PRIEM', NULL, NEW.DATE_PRIEM);
  
  IF (NOT (NEW.DATE_VOZVRAT IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'DATE_VOZVRAT', NULL, NEW.DATE_VOZVRAT);
  
  IF (NOT (NEW.DATE_R IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'DATE_R', NULL, NEW.DATE_R);
  
  IF (NOT (NEW.KONKURS IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'KONKURS', NULL, NEW.KONKURS);
  
  IF (NOT (NEW.N_CK IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_CK', NULL, NEW.N_CK);
  
  IF (NOT (NEW.N_FOUND IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_FOUND', NULL, NEW.N_FOUND);
  
  IF (NOT (NEW.EDUCATION IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'EDUCATION', NULL, NEW.EDUCATION);
  
  IF (NOT (NEW.NOM_ATTEST IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_ATTEST', NULL, NEW.NOM_ATTEST);
  
  IF (NOT (NEW.NOM_DIPLOM IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_DIPLOM', NULL, NEW.NOM_DIPLOM);
  
  IF (NOT (NEW.STAG_SPEC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'STAG_SPEC', NULL, NEW.STAG_SPEC);
  
  IF (NOT (NEW.STAT_AB IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'STAT_AB', NULL, NEW.STAT_AB);
  
  IF (NOT (NEW.WORK_BEFORE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WORK_BEFORE', NULL, NEW.WORK_BEFORE);
  
  IF (NOT (NEW.N_SPEC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPEC', NULL, NEW.N_SPEC);
  
  IF (NOT (NEW.V_K IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'V_K', NULL, NEW.V_K);
  
  IF (NOT (NEW.PRIV IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PRIV', NULL, NEW.PRIV);
  
  IF (NOT (NEW.WITHOUT IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WITHOUT', NULL, NEW.WITHOUT);
  
  IF (NOT (NEW.N_LANGVICH IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_LANGVICH', NULL, NEW.N_LANGVICH);
  
  IF (NOT (NEW.LANGV_BALL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'LANGV_BALL', NULL, NEW.LANGV_BALL);
  
  IF (NOT (NEW.N_CENTRE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_CENTRE', NULL, NEW.N_CENTRE);
  
  IF (NOT (NEW.PRICE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PRICE', NULL, NEW.PRICE);
 
  
END
^


/* Trigger: IBE$ABITURA_AU */
CREATE TRIGGER IBE$ABITURA_AU FOR ABITURA
ACTIVE AFTER UPDATE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'ABITURA', 'U', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'NOMER_AB', OLD.NOMER_AB);
 
  IF ((OLD.NOMER_AB IS NULL AND NEW.NOMER_AB IS NOT NULL) OR
      (NEW.NOMER_AB IS NULL AND OLD.NOMER_AB IS NOT NULL) OR
      (NEW.NOMER_AB IS NOT NULL AND OLD.NOMER_AB IS NOT NULL AND NEW.NOMER_AB <> OLD.NOMER_AB)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOMER_AB',OLD.NOMER_AB, NEW.NOMER_AB);
  
  IF ((OLD.FAM IS NULL AND NEW.FAM IS NOT NULL) OR
      (NEW.FAM IS NULL AND OLD.FAM IS NOT NULL) OR
      (NEW.FAM IS NOT NULL AND OLD.FAM IS NOT NULL AND NEW.FAM <> OLD.FAM)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'FAM',OLD.FAM, NEW.FAM);
  
  IF ((OLD.NAME IS NULL AND NEW.NAME IS NOT NULL) OR
      (NEW.NAME IS NULL AND OLD.NAME IS NOT NULL) OR
      (NEW.NAME IS NOT NULL AND OLD.NAME IS NOT NULL AND NEW.NAME <> OLD.NAME)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NAME',OLD.NAME, NEW.NAME);
  
  IF ((OLD.OTCH IS NULL AND NEW.OTCH IS NOT NULL) OR
      (NEW.OTCH IS NULL AND OLD.OTCH IS NOT NULL) OR
      (NEW.OTCH IS NOT NULL AND OLD.OTCH IS NOT NULL AND NEW.OTCH <> OLD.OTCH)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'OTCH',OLD.OTCH, NEW.OTCH);
  
  IF ((OLD.POL IS NULL AND NEW.POL IS NOT NULL) OR
      (NEW.POL IS NULL AND OLD.POL IS NOT NULL) OR
      (NEW.POL IS NOT NULL AND OLD.POL IS NOT NULL AND NEW.POL <> OLD.POL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'POL',OLD.POL, NEW.POL);
  
  IF ((OLD.PLACE_R IS NULL AND NEW.PLACE_R IS NOT NULL) OR
      (NEW.PLACE_R IS NULL AND OLD.PLACE_R IS NOT NULL) OR
      (NEW.PLACE_R IS NOT NULL AND OLD.PLACE_R IS NOT NULL AND NEW.PLACE_R <> OLD.PLACE_R)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PLACE_R',OLD.PLACE_R, NEW.PLACE_R);
  
  IF ((OLD.NAZ IS NULL AND NEW.NAZ IS NOT NULL) OR
      (NEW.NAZ IS NULL AND OLD.NAZ IS NOT NULL) OR
      (NEW.NAZ IS NOT NULL AND OLD.NAZ IS NOT NULL AND NEW.NAZ <> OLD.NAZ)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NAZ',OLD.NAZ, NEW.NAZ);
  
  IF ((OLD.ADDRESS_BEFORE IS NULL AND NEW.ADDRESS_BEFORE IS NOT NULL) OR
      (NEW.ADDRESS_BEFORE IS NULL AND OLD.ADDRESS_BEFORE IS NOT NULL) OR
      (NEW.ADDRESS_BEFORE IS NOT NULL AND OLD.ADDRESS_BEFORE IS NOT NULL AND NEW.ADDRESS_BEFORE <> OLD.ADDRESS_BEFORE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'ADDRESS_BEFORE',OLD.ADDRESS_BEFORE, NEW.ADDRESS_BEFORE);
  
  IF ((OLD.MIDDLE_BALL IS NULL AND NEW.MIDDLE_BALL IS NOT NULL) OR
      (NEW.MIDDLE_BALL IS NULL AND OLD.MIDDLE_BALL IS NOT NULL) OR
      (NEW.MIDDLE_BALL IS NOT NULL AND OLD.MIDDLE_BALL IS NOT NULL AND NEW.MIDDLE_BALL <> OLD.MIDDLE_BALL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'MIDDLE_BALL',OLD.MIDDLE_BALL, NEW.MIDDLE_BALL);
  
  IF ((OLD.NAME_EDU_MIDDLE IS NULL AND NEW.NAME_EDU_MIDDLE IS NOT NULL) OR
      (NEW.NAME_EDU_MIDDLE IS NULL AND OLD.NAME_EDU_MIDDLE IS NOT NULL) OR
      (NEW.NAME_EDU_MIDDLE IS NOT NULL AND OLD.NAME_EDU_MIDDLE IS NOT NULL AND NEW.NAME_EDU_MIDDLE <> OLD.NAME_EDU_MIDDLE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NAME_EDU_MIDDLE',OLD.NAME_EDU_MIDDLE, NEW.NAME_EDU_MIDDLE);
  
  IF ((OLD.NAME_EDU_SPEC IS NULL AND NEW.NAME_EDU_SPEC IS NOT NULL) OR
      (NEW.NAME_EDU_SPEC IS NULL AND OLD.NAME_EDU_SPEC IS NOT NULL) OR
      (NEW.NAME_EDU_SPEC IS NOT NULL AND OLD.NAME_EDU_SPEC IS NOT NULL AND NEW.NAME_EDU_SPEC <> OLD.NAME_EDU_SPEC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NAME_EDU_SPEC',OLD.NAME_EDU_SPEC, NEW.NAME_EDU_SPEC);
  
  IF ((OLD.WHERE_EDU_MIDDLE IS NULL AND NEW.WHERE_EDU_MIDDLE IS NOT NULL) OR
      (NEW.WHERE_EDU_MIDDLE IS NULL AND OLD.WHERE_EDU_MIDDLE IS NOT NULL) OR
      (NEW.WHERE_EDU_MIDDLE IS NOT NULL AND OLD.WHERE_EDU_MIDDLE IS NOT NULL AND NEW.WHERE_EDU_MIDDLE <> OLD.WHERE_EDU_MIDDLE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WHERE_EDU_MIDDLE',OLD.WHERE_EDU_MIDDLE, NEW.WHERE_EDU_MIDDLE);
  
  IF ((OLD.WHERE_EDU_SPEC IS NULL AND NEW.WHERE_EDU_SPEC IS NOT NULL) OR
      (NEW.WHERE_EDU_SPEC IS NULL AND OLD.WHERE_EDU_SPEC IS NOT NULL) OR
      (NEW.WHERE_EDU_SPEC IS NOT NULL AND OLD.WHERE_EDU_SPEC IS NOT NULL AND NEW.WHERE_EDU_SPEC <> OLD.WHERE_EDU_SPEC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WHERE_EDU_SPEC',OLD.WHERE_EDU_SPEC, NEW.WHERE_EDU_SPEC);
  
  IF ((OLD.WHEN_EDU_MIDDLE IS NULL AND NEW.WHEN_EDU_MIDDLE IS NOT NULL) OR
      (NEW.WHEN_EDU_MIDDLE IS NULL AND OLD.WHEN_EDU_MIDDLE IS NOT NULL) OR
      (NEW.WHEN_EDU_MIDDLE IS NOT NULL AND OLD.WHEN_EDU_MIDDLE IS NOT NULL AND NEW.WHEN_EDU_MIDDLE <> OLD.WHEN_EDU_MIDDLE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WHEN_EDU_MIDDLE',OLD.WHEN_EDU_MIDDLE, NEW.WHEN_EDU_MIDDLE);
  
  IF ((OLD.WHEN_EDU_SPEC IS NULL AND NEW.WHEN_EDU_SPEC IS NOT NULL) OR
      (NEW.WHEN_EDU_SPEC IS NULL AND OLD.WHEN_EDU_SPEC IS NOT NULL) OR
      (NEW.WHEN_EDU_SPEC IS NOT NULL AND OLD.WHEN_EDU_SPEC IS NOT NULL AND NEW.WHEN_EDU_SPEC <> OLD.WHEN_EDU_SPEC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WHEN_EDU_SPEC',OLD.WHEN_EDU_SPEC, NEW.WHEN_EDU_SPEC);
  
  IF ((OLD.NOM_DELA IS NULL AND NEW.NOM_DELA IS NOT NULL) OR
      (NEW.NOM_DELA IS NULL AND OLD.NOM_DELA IS NOT NULL) OR
      (NEW.NOM_DELA IS NOT NULL AND OLD.NOM_DELA IS NOT NULL AND NEW.NOM_DELA <> OLD.NOM_DELA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOM_DELA',OLD.NOM_DELA, NEW.NOM_DELA);
  
  IF ((OLD.VID_EDU IS NULL AND NEW.VID_EDU IS NOT NULL) OR
      (NEW.VID_EDU IS NULL AND OLD.VID_EDU IS NOT NULL) OR
      (NEW.VID_EDU IS NOT NULL AND OLD.VID_EDU IS NOT NULL AND NEW.VID_EDU <> OLD.VID_EDU)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'VID_EDU',OLD.VID_EDU, NEW.VID_EDU);
  
  IF ((OLD.NOM_GROUP IS NULL AND NEW.NOM_GROUP IS NOT NULL) OR
      (NEW.NOM_GROUP IS NULL AND OLD.NOM_GROUP IS NOT NULL) OR
      (NEW.NOM_GROUP IS NOT NULL AND OLD.NOM_GROUP IS NOT NULL AND NEW.NOM_GROUP <> OLD.NOM_GROUP)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOM_GROUP',OLD.NOM_GROUP, NEW.NOM_GROUP);
  
  IF ((OLD.MAMA IS NULL AND NEW.MAMA IS NOT NULL) OR
      (NEW.MAMA IS NULL AND OLD.MAMA IS NOT NULL) OR
      (NEW.MAMA IS NOT NULL AND OLD.MAMA IS NOT NULL AND NEW.MAMA <> OLD.MAMA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'MAMA',OLD.MAMA, NEW.MAMA);
  
  IF ((OLD.PAPA IS NULL AND NEW.PAPA IS NOT NULL) OR
      (NEW.PAPA IS NULL AND OLD.PAPA IS NOT NULL) OR
      (NEW.PAPA IS NOT NULL AND OLD.PAPA IS NOT NULL AND NEW.PAPA <> OLD.PAPA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PAPA',OLD.PAPA, NEW.PAPA);
  
  IF ((OLD.WORK_MAMA IS NULL AND NEW.WORK_MAMA IS NOT NULL) OR
      (NEW.WORK_MAMA IS NULL AND OLD.WORK_MAMA IS NOT NULL) OR
      (NEW.WORK_MAMA IS NOT NULL AND OLD.WORK_MAMA IS NOT NULL AND NEW.WORK_MAMA <> OLD.WORK_MAMA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WORK_MAMA',OLD.WORK_MAMA, NEW.WORK_MAMA);
  
  IF ((OLD.WORK_PAPA IS NULL AND NEW.WORK_PAPA IS NOT NULL) OR
      (NEW.WORK_PAPA IS NULL AND OLD.WORK_PAPA IS NOT NULL) OR
      (NEW.WORK_PAPA IS NOT NULL AND OLD.WORK_PAPA IS NOT NULL AND NEW.WORK_PAPA <> OLD.WORK_PAPA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WORK_PAPA',OLD.WORK_PAPA, NEW.WORK_PAPA);
  
  IF ((OLD.GRAGDAN IS NULL AND NEW.GRAGDAN IS NOT NULL) OR
      (NEW.GRAGDAN IS NULL AND OLD.GRAGDAN IS NOT NULL) OR
      (NEW.GRAGDAN IS NOT NULL AND OLD.GRAGDAN IS NOT NULL AND NEW.GRAGDAN <> OLD.GRAGDAN)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'GRAGDAN',OLD.GRAGDAN, NEW.GRAGDAN);
  
  IF ((OLD.N_REGION IS NULL AND NEW.N_REGION IS NOT NULL) OR
      (NEW.N_REGION IS NULL AND OLD.N_REGION IS NOT NULL) OR
      (NEW.N_REGION IS NOT NULL AND OLD.N_REGION IS NOT NULL AND NEW.N_REGION <> OLD.N_REGION)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_REGION',OLD.N_REGION, NEW.N_REGION);
  
  IF ((OLD.N_SPECIALIZ IS NULL AND NEW.N_SPECIALIZ IS NOT NULL) OR
      (NEW.N_SPECIALIZ IS NULL AND OLD.N_SPECIALIZ IS NOT NULL) OR
      (NEW.N_SPECIALIZ IS NOT NULL AND OLD.N_SPECIALIZ IS NOT NULL AND NEW.N_SPECIALIZ <> OLD.N_SPECIALIZ)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_SPECIALIZ',OLD.N_SPECIALIZ, NEW.N_SPECIALIZ);
  
  IF ((OLD.STATUS IS NULL AND NEW.STATUS IS NOT NULL) OR
      (NEW.STATUS IS NULL AND OLD.STATUS IS NOT NULL) OR
      (NEW.STATUS IS NOT NULL AND OLD.STATUS IS NOT NULL AND NEW.STATUS <> OLD.STATUS)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STATUS',OLD.STATUS, NEW.STATUS);
  
  IF ((OLD.N_FAC IS NULL AND NEW.N_FAC IS NOT NULL) OR
      (NEW.N_FAC IS NULL AND OLD.N_FAC IS NOT NULL) OR
      (NEW.N_FAC IS NOT NULL AND OLD.N_FAC IS NOT NULL AND NEW.N_FAC <> OLD.N_FAC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_FAC',OLD.N_FAC, NEW.N_FAC);
  
  IF ((OLD.N_VID_SPORT IS NULL AND NEW.N_VID_SPORT IS NOT NULL) OR
      (NEW.N_VID_SPORT IS NULL AND OLD.N_VID_SPORT IS NOT NULL) OR
      (NEW.N_VID_SPORT IS NOT NULL AND OLD.N_VID_SPORT IS NOT NULL AND NEW.N_VID_SPORT <> OLD.N_VID_SPORT)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_VID_SPORT',OLD.N_VID_SPORT, NEW.N_VID_SPORT);
  
  IF ((OLD.N_SPORT_CATEGORY IS NULL AND NEW.N_SPORT_CATEGORY IS NOT NULL) OR
      (NEW.N_SPORT_CATEGORY IS NULL AND OLD.N_SPORT_CATEGORY IS NOT NULL) OR
      (NEW.N_SPORT_CATEGORY IS NOT NULL AND OLD.N_SPORT_CATEGORY IS NOT NULL AND NEW.N_SPORT_CATEGORY <> OLD.N_SPORT_CATEGORY)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_SPORT_CATEGORY',OLD.N_SPORT_CATEGORY, NEW.N_SPORT_CATEGORY);
  
  IF ((OLD.D_PRIKAZ_INCLUDE IS NULL AND NEW.D_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.D_PRIKAZ_INCLUDE IS NULL AND OLD.D_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.D_PRIKAZ_INCLUDE IS NOT NULL AND OLD.D_PRIKAZ_INCLUDE IS NOT NULL AND NEW.D_PRIKAZ_INCLUDE <> OLD.D_PRIKAZ_INCLUDE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'D_PRIKAZ_INCLUDE',OLD.D_PRIKAZ_INCLUDE, NEW.D_PRIKAZ_INCLUDE);
  
  IF ((OLD.N_PRIKAZ_INCLUDE IS NULL AND NEW.N_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.N_PRIKAZ_INCLUDE IS NULL AND OLD.N_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.N_PRIKAZ_INCLUDE IS NOT NULL AND OLD.N_PRIKAZ_INCLUDE IS NOT NULL AND NEW.N_PRIKAZ_INCLUDE <> OLD.N_PRIKAZ_INCLUDE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_PRIKAZ_INCLUDE',OLD.N_PRIKAZ_INCLUDE, NEW.N_PRIKAZ_INCLUDE);
  
  IF ((OLD.PHONE IS NULL AND NEW.PHONE IS NOT NULL) OR
      (NEW.PHONE IS NULL AND OLD.PHONE IS NOT NULL) OR
      (NEW.PHONE IS NOT NULL AND OLD.PHONE IS NOT NULL AND NEW.PHONE <> OLD.PHONE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PHONE',OLD.PHONE, NEW.PHONE);
  
  IF ((OLD.STAG IS NULL AND NEW.STAG IS NOT NULL) OR
      (NEW.STAG IS NULL AND OLD.STAG IS NOT NULL) OR
      (NEW.STAG IS NOT NULL AND OLD.STAG IS NOT NULL AND NEW.STAG <> OLD.STAG)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STAG',OLD.STAG, NEW.STAG);
  
  IF ((OLD.DATE_PRIEM IS NULL AND NEW.DATE_PRIEM IS NOT NULL) OR
      (NEW.DATE_PRIEM IS NULL AND OLD.DATE_PRIEM IS NOT NULL) OR
      (NEW.DATE_PRIEM IS NOT NULL AND OLD.DATE_PRIEM IS NOT NULL AND NEW.DATE_PRIEM <> OLD.DATE_PRIEM)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'DATE_PRIEM',OLD.DATE_PRIEM, NEW.DATE_PRIEM);
  
  IF ((OLD.DATE_VOZVRAT IS NULL AND NEW.DATE_VOZVRAT IS NOT NULL) OR
      (NEW.DATE_VOZVRAT IS NULL AND OLD.DATE_VOZVRAT IS NOT NULL) OR
      (NEW.DATE_VOZVRAT IS NOT NULL AND OLD.DATE_VOZVRAT IS NOT NULL AND NEW.DATE_VOZVRAT <> OLD.DATE_VOZVRAT)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'DATE_VOZVRAT',OLD.DATE_VOZVRAT, NEW.DATE_VOZVRAT);
  
  IF ((OLD.DATE_R IS NULL AND NEW.DATE_R IS NOT NULL) OR
      (NEW.DATE_R IS NULL AND OLD.DATE_R IS NOT NULL) OR
      (NEW.DATE_R IS NOT NULL AND OLD.DATE_R IS NOT NULL AND NEW.DATE_R <> OLD.DATE_R)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'DATE_R',OLD.DATE_R, NEW.DATE_R);
  
  IF ((OLD.KONKURS IS NULL AND NEW.KONKURS IS NOT NULL) OR
      (NEW.KONKURS IS NULL AND OLD.KONKURS IS NOT NULL) OR
      (NEW.KONKURS IS NOT NULL AND OLD.KONKURS IS NOT NULL AND NEW.KONKURS <> OLD.KONKURS)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'KONKURS',OLD.KONKURS, NEW.KONKURS);
  
  IF ((OLD.N_CK IS NULL AND NEW.N_CK IS NOT NULL) OR
      (NEW.N_CK IS NULL AND OLD.N_CK IS NOT NULL) OR
      (NEW.N_CK IS NOT NULL AND OLD.N_CK IS NOT NULL AND NEW.N_CK <> OLD.N_CK)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_CK',OLD.N_CK, NEW.N_CK);
  
  IF ((OLD.N_FOUND IS NULL AND NEW.N_FOUND IS NOT NULL) OR
      (NEW.N_FOUND IS NULL AND OLD.N_FOUND IS NOT NULL) OR
      (NEW.N_FOUND IS NOT NULL AND OLD.N_FOUND IS NOT NULL AND NEW.N_FOUND <> OLD.N_FOUND)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_FOUND',OLD.N_FOUND, NEW.N_FOUND);
  
  IF ((OLD.EDUCATION IS NULL AND NEW.EDUCATION IS NOT NULL) OR
      (NEW.EDUCATION IS NULL AND OLD.EDUCATION IS NOT NULL) OR
      (NEW.EDUCATION IS NOT NULL AND OLD.EDUCATION IS NOT NULL AND NEW.EDUCATION <> OLD.EDUCATION)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'EDUCATION',OLD.EDUCATION, NEW.EDUCATION);
  
  IF ((OLD.NOM_ATTEST IS NULL AND NEW.NOM_ATTEST IS NOT NULL) OR
      (NEW.NOM_ATTEST IS NULL AND OLD.NOM_ATTEST IS NOT NULL) OR
      (NEW.NOM_ATTEST IS NOT NULL AND OLD.NOM_ATTEST IS NOT NULL AND NEW.NOM_ATTEST <> OLD.NOM_ATTEST)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOM_ATTEST',OLD.NOM_ATTEST, NEW.NOM_ATTEST);
  
  IF ((OLD.NOM_DIPLOM IS NULL AND NEW.NOM_DIPLOM IS NOT NULL) OR
      (NEW.NOM_DIPLOM IS NULL AND OLD.NOM_DIPLOM IS NOT NULL) OR
      (NEW.NOM_DIPLOM IS NOT NULL AND OLD.NOM_DIPLOM IS NOT NULL AND NEW.NOM_DIPLOM <> OLD.NOM_DIPLOM)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOM_DIPLOM',OLD.NOM_DIPLOM, NEW.NOM_DIPLOM);
  
  IF ((OLD.STAG_SPEC IS NULL AND NEW.STAG_SPEC IS NOT NULL) OR
      (NEW.STAG_SPEC IS NULL AND OLD.STAG_SPEC IS NOT NULL) OR
      (NEW.STAG_SPEC IS NOT NULL AND OLD.STAG_SPEC IS NOT NULL AND NEW.STAG_SPEC <> OLD.STAG_SPEC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STAG_SPEC',OLD.STAG_SPEC, NEW.STAG_SPEC);
  
  IF ((OLD.STAT_AB IS NULL AND NEW.STAT_AB IS NOT NULL) OR
      (NEW.STAT_AB IS NULL AND OLD.STAT_AB IS NOT NULL) OR
      (NEW.STAT_AB IS NOT NULL AND OLD.STAT_AB IS NOT NULL AND NEW.STAT_AB <> OLD.STAT_AB)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STAT_AB',OLD.STAT_AB, NEW.STAT_AB);
  
  IF ((OLD.WORK_BEFORE IS NULL AND NEW.WORK_BEFORE IS NOT NULL) OR
      (NEW.WORK_BEFORE IS NULL AND OLD.WORK_BEFORE IS NOT NULL) OR
      (NEW.WORK_BEFORE IS NOT NULL AND OLD.WORK_BEFORE IS NOT NULL AND NEW.WORK_BEFORE <> OLD.WORK_BEFORE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WORK_BEFORE',OLD.WORK_BEFORE, NEW.WORK_BEFORE);
  
  IF ((OLD.N_SPEC IS NULL AND NEW.N_SPEC IS NOT NULL) OR
      (NEW.N_SPEC IS NULL AND OLD.N_SPEC IS NOT NULL) OR
      (NEW.N_SPEC IS NOT NULL AND OLD.N_SPEC IS NOT NULL AND NEW.N_SPEC <> OLD.N_SPEC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_SPEC',OLD.N_SPEC, NEW.N_SPEC);
  
  IF ((OLD.V_K IS NULL AND NEW.V_K IS NOT NULL) OR
      (NEW.V_K IS NULL AND OLD.V_K IS NOT NULL) OR
      (NEW.V_K IS NOT NULL AND OLD.V_K IS NOT NULL AND NEW.V_K <> OLD.V_K)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'V_K',OLD.V_K, NEW.V_K);
  
  IF ((OLD.PRIV IS NULL AND NEW.PRIV IS NOT NULL) OR
      (NEW.PRIV IS NULL AND OLD.PRIV IS NOT NULL) OR
      (NEW.PRIV IS NOT NULL AND OLD.PRIV IS NOT NULL AND NEW.PRIV <> OLD.PRIV)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PRIV',OLD.PRIV, NEW.PRIV);
  
  IF ((OLD.WITHOUT IS NULL AND NEW.WITHOUT IS NOT NULL) OR
      (NEW.WITHOUT IS NULL AND OLD.WITHOUT IS NOT NULL) OR
      (NEW.WITHOUT IS NOT NULL AND OLD.WITHOUT IS NOT NULL AND NEW.WITHOUT <> OLD.WITHOUT)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WITHOUT',OLD.WITHOUT, NEW.WITHOUT);
  
  IF ((OLD.N_LANGVICH IS NULL AND NEW.N_LANGVICH IS NOT NULL) OR
      (NEW.N_LANGVICH IS NULL AND OLD.N_LANGVICH IS NOT NULL) OR
      (NEW.N_LANGVICH IS NOT NULL AND OLD.N_LANGVICH IS NOT NULL AND NEW.N_LANGVICH <> OLD.N_LANGVICH)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_LANGVICH',OLD.N_LANGVICH, NEW.N_LANGVICH);
  
  IF ((OLD.LANGV_BALL IS NULL AND NEW.LANGV_BALL IS NOT NULL) OR
      (NEW.LANGV_BALL IS NULL AND OLD.LANGV_BALL IS NOT NULL) OR
      (NEW.LANGV_BALL IS NOT NULL AND OLD.LANGV_BALL IS NOT NULL AND NEW.LANGV_BALL <> OLD.LANGV_BALL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'LANGV_BALL',OLD.LANGV_BALL, NEW.LANGV_BALL);
  
  IF ((OLD.N_CENTRE IS NULL AND NEW.N_CENTRE IS NOT NULL) OR
      (NEW.N_CENTRE IS NULL AND OLD.N_CENTRE IS NOT NULL) OR
      (NEW.N_CENTRE IS NOT NULL AND OLD.N_CENTRE IS NOT NULL AND NEW.N_CENTRE <> OLD.N_CENTRE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_CENTRE',OLD.N_CENTRE, NEW.N_CENTRE);
  
  IF ((OLD.PRICE IS NULL AND NEW.PRICE IS NOT NULL) OR
      (NEW.PRICE IS NULL AND OLD.PRICE IS NOT NULL) OR
      (NEW.PRICE IS NOT NULL AND OLD.PRICE IS NOT NULL AND NEW.PRICE <> OLD.PRICE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PRICE',OLD.PRICE, NEW.PRICE);
 
  
END
^


/* Trigger: IBE$AB_P_AI */
CREATE TRIGGER IBE$AB_P_AI FOR AB_P
ACTIVE AFTER INSERT POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'AB_P', 'I', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'N_AB_P', NEW.N_AB_P);
 
  IF (NOT (NEW.N_AB_P IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_AB_P', NULL, NEW.N_AB_P);
  
  IF (NOT (NEW.NOMER_AB IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOMER_AB', NULL, NEW.NOMER_AB);
  
  IF (NOT (NEW.PRICE_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PRICE_DO', NULL, NEW.PRICE_DO);
  
  IF (NOT (NEW.PRICE_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PRICE_PO', NULL, NEW.PRICE_PO);
  
  IF (NOT (NEW.VID_EDU_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'VID_EDU_DO', NULL, NEW.VID_EDU_DO);
  
  IF (NOT (NEW.VID_EDU_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'VID_EDU_PO', NULL, NEW.VID_EDU_PO);
  
  IF (NOT (NEW.NOM_DELA_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_DELA_DO', NULL, NEW.NOM_DELA_DO);
  
  IF (NOT (NEW.NOM_DELA_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_DELA_PO', NULL, NEW.NOM_DELA_PO);
  
  IF (NOT (NEW.NOM_GROUP_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_GROUP_DO', NULL, NEW.NOM_GROUP_DO);
  
  IF (NOT (NEW.NOM_GROUP_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_GROUP_PO', NULL, NEW.NOM_GROUP_PO);
  
  IF (NOT (NEW.N_SPECIALIZ_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPECIALIZ_DO', NULL, NEW.N_SPECIALIZ_DO);
  
  IF (NOT (NEW.N_SPECIALIZ_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPECIALIZ_PO', NULL, NEW.N_SPECIALIZ_PO);
  
  IF (NOT (NEW.N_SPEC_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPEC_DO', NULL, NEW.N_SPEC_DO);
  
  IF (NOT (NEW.N_SPEC_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPEC_PO', NULL, NEW.N_SPEC_PO);
  
  IF (NOT (NEW.N_CK IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_CK', NULL, NEW.N_CK);
  
  IF (NOT (NEW.KONKURS_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'KONKURS_DO', NULL, NEW.KONKURS_DO);
  
  IF (NOT (NEW.KONKURS_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'KONKURS_PO', NULL, NEW.KONKURS_PO);
  
  IF (NOT (NEW.DATE_P IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'DATE_P', NULL, NEW.DATE_P);
 
  
END
^


/* Trigger: IBE$DOCUM_AD */
CREATE TRIGGER IBE$DOCUM_AD FOR DOCUM
ACTIVE AFTER DELETE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'DOCUM', 'D', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'N_DOC', OLD.N_DOC);
 
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_DOC',OLD.N_DOC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'TEXT_DOC',OLD.TEXT_DOC, NULL);
 
  
END
^


/* Trigger: IBE$DOCUM_AI */
CREATE TRIGGER IBE$DOCUM_AI FOR DOCUM
ACTIVE AFTER INSERT POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'DOCUM', 'I', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'N_DOC', NEW.N_DOC);
 
  IF (NOT (NEW.N_DOC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_DOC', NULL, NEW.N_DOC);
  
  IF (NOT (NEW.TEXT_DOC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'TEXT_DOC', NULL, NEW.TEXT_DOC);
 
  
END
^


/* Trigger: IBE$DOCUM_AU */
CREATE TRIGGER IBE$DOCUM_AU FOR DOCUM
ACTIVE AFTER UPDATE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'DOCUM', 'U', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'N_DOC', OLD.N_DOC);
 
  IF ((OLD.N_DOC IS NULL AND NEW.N_DOC IS NOT NULL) OR
      (NEW.N_DOC IS NULL AND OLD.N_DOC IS NOT NULL) OR
      (NEW.N_DOC IS NOT NULL AND OLD.N_DOC IS NOT NULL AND NEW.N_DOC <> OLD.N_DOC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_DOC',OLD.N_DOC, NEW.N_DOC);
  
  IF ((OLD.TEXT_DOC IS NULL AND NEW.TEXT_DOC IS NOT NULL) OR
      (NEW.TEXT_DOC IS NULL AND OLD.TEXT_DOC IS NOT NULL) OR
      (NEW.TEXT_DOC IS NOT NULL AND OLD.TEXT_DOC IS NOT NULL AND NEW.TEXT_DOC <> OLD.TEXT_DOC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'TEXT_DOC',OLD.TEXT_DOC, NEW.TEXT_DOC);
 
  
END
^


/* Trigger: IBE$EXAMEN_AD */
CREATE TRIGGER IBE$EXAMEN_AD FOR EXAMEN
ACTIVE AFTER DELETE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);

  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'EXAMEN', 'D', 'NOW', USER);


  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOMER_AB',OLD.NOMER_AB, NULL);

  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_PREDMET',OLD.N_PREDMET, NULL);

  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOM_BALL',OLD.NOM_BALL, NULL);

  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'BALL',OLD.BALL, NULL);

  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'STATUS_BALL',OLD.STATUS_BALL, NULL);

END
^


/* Trigger: IBE$EXAMEN_AI */
CREATE TRIGGER IBE$EXAMEN_AI FOR EXAMEN
ACTIVE AFTER INSERT POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);

  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'EXAMEN', 'I', 'NOW', USER);


  IF (NOT (NEW.NOMER_AB IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOMER_AB',NULL, NEW.NOMER_AB);

  IF (NOT (NEW.N_PREDMET IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_PREDMET',NULL, NEW.N_PREDMET);

  IF (NOT (NEW.NOM_BALL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOM_BALL',NULL, NEW.NOM_BALL);

  IF (NOT (NEW.BALL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'BALL',NULL, NEW.BALL);

  IF (NOT (NEW.STATUS_BALL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STATUS_BALL',NULL, NEW.STATUS_BALL);

END
^


/* Trigger: IBE$EXAMEN_AU */
CREATE TRIGGER IBE$EXAMEN_AU FOR EXAMEN
ACTIVE AFTER UPDATE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);

  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'EXAMEN', 'U', 'NOW', USER);


  IF ((OLD.NOMER_AB IS NULL AND NEW.NOMER_AB IS NOT NULL) OR
      (NEW.NOMER_AB IS NULL AND OLD.NOMER_AB IS NOT NULL) OR
      (NEW.NOMER_AB IS NOT NULL AND OLD.NOMER_AB IS NOT NULL AND NEW.NOMER_AB <> OLD.NOMER_AB)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOMER_AB',OLD.NOMER_AB, NEW.NOMER_AB);

  IF ((OLD.N_PREDMET IS NULL AND NEW.N_PREDMET IS NOT NULL) OR
      (NEW.N_PREDMET IS NULL AND OLD.N_PREDMET IS NOT NULL) OR
      (NEW.N_PREDMET IS NOT NULL AND OLD.N_PREDMET IS NOT NULL AND NEW.N_PREDMET <> OLD.N_PREDMET)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_PREDMET',OLD.N_PREDMET, NEW.N_PREDMET);

  IF ((OLD.NOM_BALL IS NULL AND NEW.NOM_BALL IS NOT NULL) OR
      (NEW.NOM_BALL IS NULL AND OLD.NOM_BALL IS NOT NULL) OR
      (NEW.NOM_BALL IS NOT NULL AND OLD.NOM_BALL IS NOT NULL AND NEW.NOM_BALL <> OLD.NOM_BALL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOM_BALL',OLD.NOM_BALL, NEW.NOM_BALL);

  IF ((OLD.BALL IS NULL AND NEW.BALL IS NOT NULL) OR
      (NEW.BALL IS NULL AND OLD.BALL IS NOT NULL) OR
      (NEW.BALL IS NOT NULL AND OLD.BALL IS NOT NULL AND NEW.BALL <> OLD.BALL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'BALL',OLD.BALL, NEW.BALL);

  IF ((OLD.STATUS_BALL IS NULL AND NEW.STATUS_BALL IS NOT NULL) OR
      (NEW.STATUS_BALL IS NULL AND OLD.STATUS_BALL IS NOT NULL) OR
      (NEW.STATUS_BALL IS NOT NULL AND OLD.STATUS_BALL IS NOT NULL AND NEW.STATUS_BALL <> OLD.STATUS_BALL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STATUS_BALL',OLD.STATUS_BALL, NEW.STATUS_BALL);

END
^


/* Trigger: IBE$LOG_TABLES_BD */
CREATE TRIGGER IBE$LOG_TABLES_BD FOR IBE$LOG_TABLES
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
  DELETE FROM IBE$LOG_FIELDS WHERE LOG_TABLES_ID = OLD.ID;
  DELETE FROM IBE$LOG_BLOB_FIELDS WHERE LOG_TABLES_ID = OLD.ID;
  DELETE FROM IBE$LOG_KEYS WHERE LOG_TABLES_ID = OLD.ID;
END
^


/* Trigger: INS_N_GROUP */
CREATE TRIGGER INS_N_GROUP FOR N_GROUP
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.N_GROUP=GEN_ID(NOMER_GROUP,1);
END
^


/* Trigger: ORDER_SPECIALIZ_BI */
CREATE TRIGGER ORDER_SPECIALIZ_BI FOR ORDER_SPECIALIZ
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.N_OR_SPEC IS NULL) THEN
    NEW.N_OR_SPEC = GEN_ID(GEN_ORDER_SPECIALIZ_ID,1);
END
^


/* Trigger: SEL_EXERCIZE_BI */
CREATE TRIGGER SEL_EXERCIZE_BI FOR SEL_EXERCIZE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_sel_exerc is null) then
    new.id_sel_exerc = gen_id(gen_sel_exercize_id,1);
end
^


/* Trigger: SHKALA_BI */
CREATE TRIGGER SHKALA_BI FOR SHKALA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.INC_SHKALA IS NULL) THEN
    NEW.INC_SHKALA = GEN_ID(GEN_SHKALA_ID,1);
END
^


/* Trigger: TI_BALL */
CREATE TRIGGER TI_BALL FOR BALL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.NOM_BALL=GEN_ID(BALL_NOM_BALL,1);
END
^


/* Trigger: TI_CATEGORY */
CREATE TRIGGER TI_CATEGORY FOR CATEGORY
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.N_SPORT_CATEGORY=GEN_ID(CATEGORY_N_SPORT_CATEGORY,1);
END
^


/* Trigger: TI_CK */
CREATE TRIGGER TI_CK FOR CK
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.N_CK=GEN_ID(CK_N_CK,1);
END
^


/* Trigger: TI_DOCUM */
CREATE TRIGGER TI_DOCUM FOR DOCUM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.N_DOC=GEN_ID(DOCUM_N_DOC,1);
END
^


/* Trigger: TI_KOL_PLACE */
CREATE TRIGGER TI_KOL_PLACE FOR KOL_PLACE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.N_KOL_PLACE=GEN_ID(KOL_PLACE_N_KOL_PLACE,1);
END
^


/* Trigger: TI_PREDMET */
CREATE TRIGGER TI_PREDMET FOR PREDMET
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.N_PREDMET=GEN_ID(PREDMET_N_PREDMET,1);
END
^


/* Trigger: TI_REGION */
CREATE TRIGGER TI_REGION FOR REGION
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.N_REGION=GEN_ID(REGION_N_REGION,1);
END
^

SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE ABITUR_FROM_QUEUE (
    STATUS_QUEUE SMALLINT,
    TIME_QUEUE DATE,
    N_SPECIALIZ SMALLINT,
    N_SPEC SMALLINT,
    VID_EDU SMALLINT,
    CATEGORY_AB SMALLINT,
    CATEGORY_EDU SMALLINT,
    TERM_EDU SMALLINT,
    PRICE SMALLINT,
    KONKURS SMALLINT,
    ID_AB SMALLINT,
    CATEGORY_IF SMALLINT)
AS
begin
    update abitur_queue
        set status_queue = :status_queue,
        time_queue = :time_queue,
        n_specializ = :n_specializ,
        n_spec = :n_spec,
        vid_edu = :vid_edu,
        category_ab = :category_ab,
        category_if = :category_if,
        category_edu = :category_edu,
        term_edu = :term_edu,
        price = :price,
        konkurs = :konkurs
    where (id_ab = :id_ab);
end^


ALTER PROCEDURE ABITUR_LOGBOOK_INS (
    NOM_DELA SMALLINT,
    NOMER_AB INTEGER,
    DATE_IN DATE,
    VID_EDU SMALLINT,
    PRICE SMALLINT,
    TERM_EDU SMALLINT,
    ADDRESS_BEFORE VARCHAR(100),
    N_CK SMALLINT,
    N_SPECIALIZ SMALLINT,
    N_FAC SMALLINT,
    KONKURS SMALLINT,
    CATEGORY SMALLINT)
AS
begin
  insert into abitur_logbook (
    nom_dela,
    nomer_ab,
    date_in,
    vid_edu,
    price,
    term_edu,
    address_before,
    n_ck,
    n_specializ,
    n_fac,
    konkurs,
    category)
  values (
    :nom_dela,
    :nomer_ab,
    :date_in,
    :vid_edu,
    :price,
    :term_edu,
    :address_before,
    :n_ck,
    :n_specializ,
    :n_fac,
    :konkurs,
    :category);
end^


ALTER PROCEDURE ABITUR_PRIVILEG_DEL (
    NOMER_AB INTEGER)
AS
begin
    delete from abitur_privileg
    where abitur_privileg.nomer_ab = :nomer_ab;
end^


ALTER PROCEDURE ABITUR_PRIVILEG_INS (
    NOMER_AB INTEGER,
    N_PRIV SMALLINT,
    SEL_PRIV SMALLINT,
    DAT_PRIV SMALLINT)
AS
begin
  insert into abitur_privileg (
    nomer_ab,
    n_priv,
    sel_priv,
    dat_priv)
  values (
    :nomer_ab,
    :n_priv,
    :sel_priv,
    :dat_priv);
end^


ALTER PROCEDURE ABITUR_QUEUE_DEL (
    ID_AB INTEGER)
AS
begin
    delete from abitur_queue
    where abitur_queue.id_ab = :id_ab;
end^


ALTER PROCEDURE ABITUR_QUEUE_INS (
    FAM VARCHAR(30),
    NAME VARCHAR(30),
    OTCH VARCHAR(30),
    STATUS_QUEUE SMALLINT)
AS
begin
  insert into abitur_queue (
    fam,
    name,
    otch,
    status_queue)
  values (
    :fam,
    :name,
    :otch,
    :status_queue);
end^


ALTER PROCEDURE ABITUR_QUEUE_UPD (
    ID_AB INTEGER,
    STATUS_QUEUE SMALLINT,
    DIGIT_SIGN BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
begin
  update abitur_queue
  set status_queue = :status_queue,
      photo = :photo,
      digit_sign = :digit_sign
  where (id_ab = :id_ab);
end^


ALTER PROCEDURE ABITUR_QUEUE_UPD_NO_SIGN (
    ID_AB INTEGER,
    STATUS_QUEUE SMALLINT,
    PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
begin
  update abitur_queue
  set status_queue = :status_queue,
      photo = :photo
  where (id_ab = :id_ab);
end^


ALTER PROCEDURE ABITURA_STATUS_UP
AS
declare variable N_AB integer;
begin
    for
        select abitura.id_ab_queue from abitura
        where abitura.status = 5
        into n_ab
    do begin
    update abitur_queue
        set abitur_queue.status_queue = 1105
        where abitur_queue.id_ab = :n_ab;
    end
    suspend;
end^


ALTER PROCEDURE ALL_MAS_KONKURS (
    IN_SP_ALL_M SMALLINT,
    IN_VID_EDU_ALL_M SMALLINT)
RETURNS (
    OUT_N_AB_ALL_M INTEGER)
AS
BEGIN
FOR SELECT A.NOMER_AB
FROM ABITURA A 
WHERE (A.N_SPECIALIZ=:IN_SP_ALL_M)  AND (A.STATUS=0)  AND (A.VID_EDU=:IN_VID_EDU_ALL_M) AND (A.KONKURS NOT IN (3))
INTO :OUT_N_AB_ALL_M
DO
SUSPEND;
END^


ALTER PROCEDURE BALL_SERTIFIKAT (
    PR INTEGER,
    B_S SMALLINT,
    R_B SMALLINT)
RETURNS (
    B DOUBLE PRECISION)
AS
begin
  /* Procedure Text */
  select s.ball from shkala s where s.n_predmet=:PR
                           and s.ball_sertifikat=:B_S
                           and s.rus_bel=:R_B
  INTO : B;
  suspend;
end^


ALTER PROCEDURE CERTIFICATES_LOGBOOK_DEL (
    ID_LOG INTEGER)
AS
begin
    delete from certificates_logbook
    where certificates_logbook.id_log = :id_log;
end^


ALTER PROCEDURE CERTIFICATES_LOGBOOK_INS (
    ID_LOG INTEGER,
    N_PREDMET SMALLINT,
    SERIA_S VARCHAR(10),
    NOMER_S VARCHAR(15),
    BALL SMALLINT,
    DESCRIBE VARCHAR(150),
    RUS_BEL SMALLINT)
AS
begin
  insert into certificates_logbook (
    id_log,
    n_predmet,
    seria_s,
    nomer_s,
    ball,
    describe,
    rus_bel)
  values (
    :id_log,
    :n_predmet,
    :seria_s,
    :nomer_s,
    :ball,
    :describe,
    :rus_bel);
end^


ALTER PROCEDURE CONTROL_EXERC_DEL (
    ID_CONTROL_EXERC INTEGER)
AS
begin
  delete from control_exerc
  where (id_control_exerc = :id_control_exerc);
end^


ALTER PROCEDURE CONTROL_EXERC_IU (
    ID_CONTROL_EXERC INTEGER,
    N_FAC SMALLINT,
    N_SPECIALIZ SMALLINT,
    POL CHAR(1),
    NUM_EXERC_GRP SMALLINT,
    ID_EXERC SMALLINT)
AS
begin
  if (exists(select id_control_exerc from control_exerc where (id_control_exerc = :id_control_exerc))) then
    update control_exerc
    set n_fac = :n_fac,
        n_specializ = :n_specializ,
        pol = :pol,
        num_exerc_grp = :num_exerc_grp,
        id_exerc = :id_exerc
    where (id_control_exerc = :id_control_exerc);
  else
    insert into control_exerc (
        id_control_exerc,
        n_fac,
        n_specializ,
        pol,
        num_exerc_grp,
        id_exerc)
    values (
        :id_control_exerc,
        :n_fac,
        :n_specializ,
        :pol,
        :num_exerc_grp,
        :id_exerc);
end^


ALTER PROCEDURE CONTROL_EXERC_SEL
RETURNS (
    ID_CONTROL_EXERC INTEGER,
    N_FAC SMALLINT,
    N_SPECIALIZ SMALLINT,
    POL CHAR(1),
    NUM_EXERC_GRP SMALLINT,
    ID_EXERC SMALLINT)
AS
begin
  for select id_control_exerc,
             n_fac,
             n_specializ,
             pol,
             num_exerc_grp,
             id_exerc
      from control_exerc
      into :id_control_exerc,
           :n_fac,
           :n_specializ,
           :pol,
           :num_exerc_grp,
           :id_exerc
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE EXAM_CNT (
    N_SPEC SMALLINT,
    VID_EDU SMALLINT)
RETURNS (
    SUM1 INTEGER)
AS
declare variable N_AB integer;
declare variable N_PR smallint;
declare variable BLL smallint;
declare variable S_B smallint;
declare variable KNKRS smallint;
declare variable SPRT_CAT smallint;
declare variable N_AB1 integer;
begin
  n_ab1 = 0; sum1 = 0;
  for
    select  examen.nomer_ab, examen.n_predmet, examen.ball, examen.status_ball, abitura.konkurs, abitura.n_sport_category from examen, abitura
    where abitura.n_spec = :n_spec
        and abitura.vid_edu = :vid_edu
        and abitura.nomer_ab = examen.nomer_ab
        and abitura.category_if = 0
        and abitura.term_edu < 4
        and abitura.konkurs != 1
        and examen.status_ball=0
    order by examen.nomer_ab
    into n_ab, n_pr, bll, s_b, knkrs, sprt_cat
    do begin
     if (n_ab <> n_ab1) then begin
            if (bll > 0) then begin
                if (n_pr != 2) then begin
                   sum1 = sum1 + 1;
                   n_ab1 = n_ab;
                end else begin
                  if ((sprt_cat=5) or (sprt_cat=6) or (sprt_cat=7)) then
                       sum1 = sum1;
                    else begin
                       sum1 = sum1 + 1;
                      n_ab1 = n_ab;
                    end
              end
            end
        end
    end
  suspend;
end^


ALTER PROCEDURE GET_NOMER_AB
RETURNS (
    NAB INTEGER)
AS
BEGIN
 NAB = GEN_ID (ABITURA_NOMER_AB,1);
END^


ALTER PROCEDURE GIAZ01 (
    VID_EDU SMALLINT,
    DATE_IN DATE,
    N_SPEC SMALLINT)
RETURNS (
    S_B_ALL INTEGER,
    S_B_CK INTEGER,
    S_B_2 INTEGER,
    S_P INTEGER,
    S_3S INTEGER)
AS
declare variable PRICE smallint;
declare variable N_FAC smallint;
declare variable N_CK smallint;
declare variable TERM_EDU smallint;
declare variable N1 integer;
declare variable N_AB integer;
begin
    S_B_ALL = 0; S_B_CK = 0; S_B_2 = 0; S_P = 0; S_3S = 0; N1 = 0;
    for
        select abitura.nomer_ab, abitura.price, abitura.n_fac, abitura.n_ck, abitura.term_edu from abitura, abitur_logbook
        where
            abitura.vid_edu = :vid_edu and
            abitura.status is not null and
            abitura.n_spec = :n_spec and
            abitur_logbook.date_in < :date_in and
            ((abitur_logbook.date_out > :date_in) or (abitur_logbook.date_out is null)) and
            ((abitura.term_edu != 4) and (abitura.term_edu != 5)) and
            abitura.category_if = 0 and
            abitur_logbook.nomer_ab = abitura.nomer_ab
            order by abitura.nomer_ab
    into N_AB, PRICE, N_FAC, N_CK, TERM_EDU
    do begin
        if (n_ab <> N1) then begin
            if (PRICE = 0) then begin
                S_B_ALL = S_B_ALL + 1;
                if (N_CK > -1) then S_B_CK = S_B_CK + 1;
                if ((TERM_EDU = 1) or (TERM_EDU = 2) ) then S_B_2 = S_B_2 + 1;
            end else S_P = S_P + 1;
            if ((N_FAC = 4) and ((TERM_EDU = 0) or (TERM_EDU = 3))) then S_3S = S_3S + 1;
        end
        N1 = N_AB;
    end
    suspend;
end^


ALTER PROCEDURE GIAZ021 (
    VID_EDU SMALLINT,
    DATE_IN DATE)
RETURNS (
    S_ALL INTEGER,
    S_16 INTEGER,
    S_17 INTEGER)
AS
declare variable N_AB integer;
declare variable SEL_PRIV smallint;
declare variable DAT_PRIV smallint;
declare variable NOM_1 integer;
begin
    S_ALL = 0; S_17 = 0; S_16 = 0; NOM_1 = 0;
    for
        select abitura.nomer_ab, privileg_log.sel_priv, privileg_log.dat_priv from abitura, privileg_log, abitur_logbook
        where
            abitura.vid_edu = :vid_edu and
            abitura.status is not null and
            abitur_logbook.date_in < :date_in and
            ((abitur_logbook.date_out > :date_in) or (abitur_logbook.date_out is null)) and
            ((abitura.term_edu != 4) and (abitura.term_edu != 5)) and
            abitura.category_if = 0 and

            abitura.konkurs = 1 and
            privileg_log.n_priv = 0 and
            privileg_log.id_log = abitur_logbook.id_log and
            abitur_logbook.nomer_ab = abitura.nomer_ab
            order by abitura.nomer_ab
         into N_AB, SEL_PRIV, DAT_PRIV
         do begin
            if (NOM_1 <> N_AB) then begin
                s_all = s_all + 1;
                if (SEL_PRIV = 16) then begin
                    s_17 = s_17 + 1;
                    s_all = s_all - 1;
                end
                if (SEL_PRIV = 15) then begin
                    s_16 = s_16 + 1;
                    s_all = s_all - 1;
                end
            end
            NOM_1 = N_AB;
         end

  suspend;
end^


ALTER PROCEDURE GIAZ022 (
    VID_EDU SMALLINT,
    DATE_IN DATE)
RETURNS (
    S_ALL INTEGER,
    S_21 INTEGER,
    S_27 INTEGER,
    S_22_26 INTEGER)
AS
declare variable N_AB integer;
declare variable N_PRIV smallint;
declare variable SEL_PRIV smallint;
declare variable DAT_PRIV smallint;
declare variable N_A1 integer;
begin
    S_ALL = 0; S_21 = 0; S_27 = 0; S_22_26 = 0; N_A1 = 0;
    for
        select abitura.nomer_ab, privileg_log.n_priv, privileg_log.sel_priv, privileg_log.dat_priv from abitura, privileg_log, abitur_logbook
        where
            abitura.vid_edu = :vid_edu and
            abitura.status is not null and
            abitur_logbook.date_in < :date_in and
            ((abitur_logbook.date_out > :date_in) or (abitur_logbook.date_out is null)) and
            ((abitura.term_edu != 4) and (abitura.term_edu != 5)) and
            abitura.category_if = 0 and

            abitura.konkurs = 2 and
            privileg_log.n_priv = 1 and
            privileg_log.id_log = abitur_logbook.id_log and
            abitur_logbook.nomer_ab = abitura.nomer_ab
            order by abitura.nomer_ab
         into N_AB, N_PRIV, SEL_PRIV, DAT_PRIV
         do begin
            if (n_a1 <> n_ab) then begin
                  s_all = s_all + 1;
                    if (SEL_PRIV = 0) then s_21 = s_21 + 1;
                    if (SEL_PRIV = 6) then S_27 = S_27 + 1;
                    if (SEL_PRIV = 1) then S_22_26 = S_22_26 + 1;
                    if (SEL_PRIV = 2) then S_22_26 = S_22_26 + 1;
                    if (SEL_PRIV = 3) then S_22_26 = S_22_26 + 1;
                    if (SEL_PRIV = 4) then S_22_26 = S_22_26 + 1;
                    if (SEL_PRIV = 5) then S_22_26 = S_22_26 + 1;
            end
            n_a1 = n_ab;
         end

  suspend;
end^


ALTER PROCEDURE GIAZ0221 (
    VID_EDU SMALLINT,
    DATE_IN DATE)
RETURNS (
    S_38 INTEGER,
    S_35 INTEGER,
    S_37 INTEGER,
    S_36 INTEGER)
AS
declare variable N_AB integer;
declare variable N_A1 integer;
declare variable N_PRIV smallint;
declare variable SEL_PRIV smallint;
declare variable DAT_PRIV date;
begin
    S_38 = 0; S_35 = 0; S_36 = 0; S_37 = 0;
    for
        select abitura.nomer_ab, privileg_log.n_priv, privileg_log.sel_priv, privileg_log.dat_priv from abitura, privileg_log, abitur_logbook
        where
            abitura.vid_edu = :vid_edu and
            abitura.status is not null and
            abitur_logbook.date_in < :date_in and
            ((abitur_logbook.date_out > :date_in) or (abitur_logbook.date_out is null)) and
            ((abitura.term_edu != 4) and (abitura.term_edu != 5)) and
            abitura.category_if = 0 and

            privileg_log.n_priv = 2 and
            privileg_log.id_log = abitur_logbook.id_log and
            abitur_logbook.nomer_ab = abitura.nomer_ab
            order by abitura.nomer_ab
         into N_AB, N_PRIV, SEL_PRIV, DAT_PRIV
         do begin
            if (n_a1 <> n_ab) then begin
                if (SEL_PRIV = 7) then S_38 = S_38 + 1;
                if (SEL_PRIV = 4) then S_35 = S_35 + 1;
                if (SEL_PRIV = 6) then S_37 = S_37 + 1;
                if (SEL_PRIV = 5) then S_36 = S_36 + 1;
            end
            n_a1 = n_ab;
         end

  suspend;
end^


ALTER PROCEDURE GIAZ03 (
    DATE_IN DATE,
    VID_EDU SMALLINT)
RETURNS (
    S_SO_T INTEGER,
    S_SO_T_E INTEGER,
    S_SO_W INTEGER,
    S_SO_W_E INTEGER,
    S_L INTEGER,
    S_SSO INTEGER,
    S_SSO_E INTEGER,
    S_PTU INTEGER,
    S_PTU_E INTEGER,
    S_VUZ INTEGER)
AS
declare variable N_A1 integer;
declare variable N_AB integer;
declare variable TYP_SCL integer;
declare variable TW integer;
declare variable MDL_WHN integer;
declare variable SPEC_WHEN integer;
declare variable EDUC integer;
declare variable TE integer;
begin
    S_SO_T = 0; S_SO_T_E = 0; S_SO_W = 0; S_SO_W_E = 0; S_L = 0; S_SSO = 0; S_SSO_E = 0; S_PTU = 0; S_PTU_E = 0; S_VUZ = 0; N_A1 = 0;
    for
        select abitura.nomer_ab, abitura.type_school, abitura.town_village, abitura.when_edu_middle, abitura.when_edu_spec, abitura.education, abitura.term_edu
            from abitura, abitur_logbook
        where
            abitura.vid_edu = :vid_edu and
            abitura.status is not null and
            abitur_logbook.date_in < :date_in and
            ((abitura.term_edu != 4) and (abitura.term_edu != 5)) and
            abitura.category_if = 0 and

            abitur_logbook.nomer_ab = abitura.nomer_ab
            order by abitura.nomer_ab
         into N_AB, TYP_SCL, TW, MDL_WHN, SPEC_WHEN, EDUC, TE
         do begin
            if (n_a1 <> n_ab) then begin
               if (TE = 3) then begin
                    S_VUZ = S_VUZ + 1;
               end
               else begin
                    if (TYP_SCL = 3) then begin
                        S_L = S_L + 1;
                    end
                    else begin
                        if (TYP_SCL = 0) then begin
                            if (tw = 0) then begin
                                S_SO_T = S_SO_T + 1;
                                if (MDL_WHN = 2020) then S_SO_T_E = S_SO_T_E + 1;
                            end
                            else begin
                                S_SO_W = S_SO_W + 1;
                                if (MDL_WHN = 2020) then S_SO_W_E = S_SO_W_E + 1;
                            end
                         end
                         else begin
                            if (TYP_SCL = 1) then begin
                                S_SSO = S_SSO + 1;
                                if (SPEC_WHEN = 2020) then S_SSO_E = S_SSO_E + 1;
                            end
                            else begin
                                S_PTU = S_PTU + 1;
                                if (SPEC_WHEN = 2020) then S_PTU_E = S_PTU_E + 1;
                            end
                         end
                    end
                  end
            end
            n_a1 = n_ab;
         end

  suspend;
end^


ALTER PROCEDURE KOL_KONK (
    IN_FAC SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_SPEC SMALLINT)
RETURNS (
    S_ALL_0 INTEGER,
    S_ALL_1 INTEGER,
    S_CEL INTEGER,
    S_2_0 INTEGER,
    S_2_1 INTEGER,
    S_VK_0 INTEGER,
    S_VK_1 INTEGER,
    S_WO_0 INTEGER,
    S_WO_1 INTEGER,
    S_ING INTEGER)
AS
declare variable S smallint;
declare variable PR smallint;
begin
  s_all_0=0; s_all_1=0; s_cel=0; s_2_0=0; s_2_1=0; s_vk_0=0; s_vk_1=0; s_wo_0=0; s_wo_1=0; s_ing=0;
  FOR
  select konkurs, price from abitura
  where STATUS=0 and N_FAC=:IN_FAC and vid_edu=:in_vid_edu and n_specializ=:in_spec
  into :s, :pr
  do begin
    if (pr=0) then begin 
      if (s=0) then s_all_0=s_all_0+1;
      if (s=1) then s_cel=s_cel+1;
      if (s=2) then s_2_0=s_2_0+1;
      if (s=3) then s_vk_0=s_vk_0+1;
      if (s=4) then s_wo_0 = s_wo_0 + 1;
    end else begin 
      if (s=0) then s_all_1=s_all_1+1;
      if (s=2) then s_2_1=s_2_1+1;
      if (s=3) then s_vk_1=s_vk_1+1;
      if (s=4) then s_wo_1=s_wo_1+1;
      if (s=5) then s_ing=s_ing+1;
    end
  end 

  suspend;
end^


ALTER PROCEDURE KOL_KONK1 (
    IN_FAC SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_SPEC SMALLINT)
RETURNS (
    S_ALL_0 INTEGER,
    S_ALL_1 INTEGER,
    S_CEL INTEGER,
    S_2_0 INTEGER,
    S_2_1 INTEGER,
    S_VK_0 INTEGER,
    S_VK_1 INTEGER,
    S_WO_0 INTEGER,
    S_WO_1 INTEGER,
    S_ING INTEGER,
    S_2V INTEGER)
AS
declare variable KONK smallint;
declare variable PR smallint;
declare variable CAT smallint;
declare variable term smallint;
begin
    s_all_0=0; s_all_1=0; s_cel=0; s_2_0=0; s_2_1=0; s_vk_0=0; s_vk_1=0; s_wo_0=0; s_wo_1=0; s_ing=0; s_2v=0;
    FOR
        select konkurs, price, category_if, term_edu from abitura
    where status=0 and n_fac=:in_fac and vid_edu=:in_vid_edu and n_specializ=:in_spec
    into :konk, :pr, :cat, :term
    do begin
        if (:cat=1) then begin
            s_ing=s_ing+1;
        end else begin
            if (((:term=4) or (:term=5))  and (:pr=1)) then begin
                s_2v=s_2v+1;
            end else begin
                if (:pr=0) then begin
                    if ((:term=1) or (:term=2))  then begin
                        s_2_0=s_2_0+1;
                    end else begin
                        if (:konk=0) then s_all_0=s_all_0+1;
                        if (:konk=1) then s_wo_0=s_wo_0+1;
                        if (:konk=2) then s_vk_0=s_vk_0+1;
                        if (:konk=3) then s_cel=s_cel+1;
                    end
                end else begin
                    if ((:term=1) or (:term=2)) then begin
                        s_2_1=s_2_1+1;
                    end else begin
                        if (:konk=0) then s_all_1=s_all_1+1;
                        if (:konk=1) then s_wo_1=s_wo_1+1;
                        if (:konk=2) then s_vk_1=s_vk_1+1;
                    end
                end
            end
        end
    end

  suspend;
end^


ALTER PROCEDURE KOL_PRIV (
    IN_FAC INTEGER,
    IN_VID_EDU INTEGER,
    IN_KONKURS INTEGER,
    IN_PRICE INTEGER)
RETURNS (
    SUM_WITHOUT INTEGER,
    SUM_V_K INTEGER)
AS
declare variable S_WITHOUT varchar(10);
declare variable S_V_K varchar(10);
begin
  sum_without=0; sum_v_k=0;
  for
  select without, v_k from abitura
    where
        abitura.n_fac=:in_fac and
        abitura.vid_edu=:in_vid_edu and
        abitura.konkurs=:in_konkurs and
        abitura.price=:in_price and
        abitura.status in (0)
  into :s_without, :s_v_k

  do
    begin
        if (s_without!="") then sum_without=sum_without+1;
        else
            if (s_v_k!="") then sum_v_k=sum_v_k+1;
    end

  suspend;
end^


ALTER PROCEDURE KOL_SERTIFIKAT (
    N_SP INTEGER,
    N_VID_EDU SMALLINT,
    N_FAC SMALLINT,
    PREDM SMALLINT,
    ST_BALL SMALLINT,
    R_B SMALLINT)
RETURNS (
    N10_9 INTEGER,
    N9_8 INTEGER,
    N8_7 INTEGER,
    N7_6 INTEGER,
    N6_5 INTEGER,
    N5_4 INTEGER,
    N4_3 INTEGER,
    N3_2 INTEGER,
    N2 INTEGER,
    N1 INTEGER,
    N0 INTEGER,
    N_YA INTEGER)
AS
declare variable n_b integer;
declare variable b double precision;
declare variable c integer;
begin
N10_9=0; N9_8=0; N8_7=0; N7_6=0; N6_5=0; N5_4=0; N4_3=0; N3_2=0;
N2=0; N1=0; N0=0; N_YA=0;


if (:st_ball=1) then
begin
/*это для сертификатов*/
for
SELECT examen.ball, COUNT(DISTINCT Abitura.NOMER_AB)
FROM ABITURA Abitura
   INNER JOIN EXAMEN Examen  ON  (Abitura.NOMER_AB = Examen.NOMER_AB)
  INNER JOIN SERTIFICAT  Sertificat  ON (Abitura.NOMER_AB =Sertificat.NOMER_AB)
WHERE  abitura.n_specializ=:n_sp and Abitura.VID_EDU =:n_vid_edu and Abitura.N_FAC =:n_fac
   and Examen.N_PREDMET =:predm and Examen.STATUS_BALL=:st_ball and Sertificat.RUS_BEL =:r_b
   and Sertificat.n_predmet=:predm and abitura.status<>1
GROUP BY examen.BALL
into :b, :c
do
    begin

      if (:n_fac<>4) then
         begin
               if (b>9)            then n10_9=n10_9+c;
               if (b>8 and b<=9) then n9_8=n9_8+c;
               if (b>7 and b<=8) then n8_7=n8_7+c;
               if (b>6 and b<=7) then n7_6=n7_6+c;
               if (b>5 and b<=6) then n6_5=n6_5+c;
               if (b>4 and b<=5) then n5_4=n5_4+c;
               if (b>3 and b<=4) then n4_3=n4_3+c;
               if (b>2 and b<=3) then n3_2=n3_2+c;
         end
      else
         begin
               if (b>90)            then n10_9=n10_9+c;
               if (b>80 and b<=90) then n9_8=n9_8+c;
               if (b>70 and b<=80) then n8_7=n8_7+c;
               if (b>60 and b<=70) then n7_6=n7_6+c;
               if (b>50 and b<=60) then n6_5=n6_5+c;
               if (b>40 and b<=50) then n5_4=n5_4+c;
               if (b>30 and b<=40) then n4_3=n4_3+c;
               if (b>20 and b<=30) then n3_2=n3_2+c;
               if (b<=20) then n2=n2+c;
         end

    end

  suspend;
 /*------- это для сертификатов*/
end
else
  begin
  /*это для экзаменов*/
for
SELECT examen.ball, examen.nom_ball, COUNT(DISTINCT Abitura.NOMER_AB)
FROM ABITURA Abitura
   INNER JOIN EXAMEN Examen  ON  (Abitura.NOMER_AB = Examen.NOMER_AB)
WHERE  abitura.n_specializ=:n_sp and Abitura.VID_EDU =:n_vid_edu and Abitura.N_FAC =:n_fac
   and Examen.N_PREDMET =:predm and Examen.STATUS_BALL=:st_ball and abitura.status<>1
GROUP BY examen.nom_ball, examen.BALL
into :b, :n_b, :c
do
    begin

      if (:n_fac<>4) then
         begin
               if (b=10)then n10_9=n10_9+c;
               if (b=9) then n9_8=n9_8+c;
               if (b=8) then n8_7=n8_7+c;
               if (b=7) then n7_6=n7_6+c;
               if (b=6) then n6_5=n6_5+c;
               if (b=5) then n5_4=n5_4+c;
               if (b=4) then n4_3=n4_3+c;
               if (b=3) then n3_2=n3_2+c;
               if (b=2) then n2=n2+c;
               if (b=1) then n1=n1+c;
               if (b=0) then /*проверка это ноль или неявка*/
                   begin
                     if (n_b=1) then n0=n0+c;
                     if (n_b=12)then n_ya=n_ya+c;
                   end
         end
      else
         begin
               if (b>90)            then n10_9=n10_9+c;
               if (b>80 and b<=90) then n9_8=n9_8+c;
               if (b>70 and b<=80) then n8_7=n8_7+c;
               if (b>60 and b<=70) then n7_6=n7_6+c;
               if (b>50 and b<=60) then n6_5=n6_5+c;
               if (b>40 and b<=50) then n5_4=n5_4+c;
               if (b>30 and b<=40) then n4_3=n4_3+c;
               if (b>20 and b<=30) then n3_2=n3_2+c;
               if (b<=20) then n2=n2+c;
         end

    end

  suspend;


  /*------- это для экзаменов*/
  end
end^


ALTER PROCEDURE KOL_SUMM_BALL (
    IN_FAC INTEGER,
    IN_SP INTEGER,
    IN_VID_EDU SMALLINT,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N9 INTEGER,
    N9_10 INTEGER,
    N10_11 INTEGER,
    N11_12 INTEGER,
    N12_13 INTEGER,
    N13_14 INTEGER,
    N14_15 INTEGER,
    N15_16 INTEGER,
    N16_17 INTEGER,
    N17_18 INTEGER,
    N18_19 INTEGER,
    N19_20 INTEGER,
    N20_21 INTEGER,
    N21_22 INTEGER,
    N22_23 INTEGER,
    N23_24 INTEGER,
    N24_25 INTEGER,
    N25_26 INTEGER,
    N26_27 INTEGER,
    N27_28 INTEGER,
    N28_29 INTEGER,
    N29_30 INTEGER,
    N30_31 INTEGER,
    N31_32 INTEGER,
    N32_33 INTEGER,
    N33_34 INTEGER,
    N34_35 INTEGER,
    N35_36 INTEGER,
    N36_37 INTEGER,
    N37_38 INTEGER,
    N38_39 INTEGER,
    N39_40 INTEGER)
AS
declare variable S double precision;
begin
  n9=0;   n9_10=0;  n10_11=0;  n11_12=0;  n12_13=0;  n13_14=0;  n14_15=0;  n15_16=0;  n16_17=0;  n17_18=0;  n18_19=0;
  n19_20=0;  n20_21=0;  n21_22=0;  n22_23=0;  n23_24=0;  n24_25=0;  n25_26=0;  n26_27=0;  n27_28=0;
  n28_29=0;  n29_30=0;  n30_31=0;  n31_32=0;  n32_33=0;  n33_34=0;  n34_35=0;  n35_36=0;  n36_37=0;  n37_38=0;
  n38_39=0;  n39_40=0;
  FOR
  select abitura.sum_ball from abitura
  where abitura.n_fac=:in_fac and abitura.n_specializ=:in_sp and abitura.vid_edu=:in_vid_edu and abitura.price=:price
  and abitura.status in (0) AND abitura.konkurs=:konk
  into :s
  do
     begin 
          if (s<9 or (s is NULL) ) then n9=n9+1;
          if (s>=9 and s<=10)  then n9_10=n9_10+1;
          if (s>10 and s<=11) then n10_11=n10_11+1;
          if (s>11 and s<=12) then n11_12=n11_12+1;
          if (s>12 and s<=13) then n12_13=n12_13+1;
          if (s>13 and s<=14) then n13_14=n13_14+1;
          if (s>14 and s<=15) then n14_15=n14_15+1;
          if (s>15 and s<=16) then n15_16=n15_16+1;
          if (s>16 and s<=17) then n16_17=n16_17+1;
          if (s>17 and s<=18) then n17_18=n17_18+1;
          if (s>18 and s<=19) then n18_19=n18_19+1;
          if (s>19 and s<=20) then n19_20=n19_20+1;
          if (s>20 and s<=21) then n20_21=n20_21+1;
          if (s>21 and s<=22) then n21_22=n21_22+1;
          if (s>22 and s<=23) then n22_23=n22_23+1;
          if (s>23 and s<=24) then n23_24=n23_24+1;
          if (s>24 and s<=25) then n24_25=n24_25+1;
          if (s>25 and s<=26) then n25_26=n25_26+1;
          if (s>26 and s<=27) then n26_27=n26_27+1;
          if (s>27 and s<=28) then n27_28=n27_28+1;
          if (s>28 and s<=29) then n28_29=n28_29+1;
          if (s>29 and s<=30) then n29_30=n29_30+1;
          if (s>30 and s<=31) then n30_31=n30_31+1;
          if (s>31 and s<=32) then n31_32=n31_32+1;
          if (s>32 and s<=33) then n32_33=n32_33+1;
          if (s>33 and s<=34) then n33_34=n33_34+1;
          if (s>34 and s<=35) then n34_35=n34_35+1;
          if (s>35 and s<=36) then n35_36=n35_36+1;
          if (s>36 and s<=37) then n36_37=n36_37+1;
          if (s>37 and s<=38) then n37_38=n37_38+1;
          if (s>38 and s<=39) then n38_39=n38_39+1;
          if (s>39 and s<=40) then n39_40=n39_40+1;

     end

  suspend;
end^


ALTER PROCEDURE KOL_SUMM_BALL_100 (
    IN_SP INTEGER,
    IN_VID_EDU SMALLINT,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N100 INTEGER,
    N100_110 INTEGER,
    N110_120 INTEGER,
    N120_130 INTEGER,
    N130_140 INTEGER,
    N140_150 INTEGER,
    N150_160 INTEGER,
    N160_170 INTEGER,
    N170_180 INTEGER,
    N180_190 INTEGER,
    N190_200 INTEGER,
    N200_210 INTEGER,
    N210_220 INTEGER,
    N220_230 INTEGER,
    N230_240 INTEGER,
    N240_250 INTEGER,
    N250_260 INTEGER,
    N260_270 INTEGER,
    N270_280 INTEGER,
    N280_290 INTEGER,
    N290_300 INTEGER,
    N300_310 INTEGER,
    N310_320 INTEGER,
    N320_330 INTEGER,
    N330_340 INTEGER,
    N340_350 INTEGER,
    N350_360 INTEGER,
    N360_370 INTEGER,
    N370_380 INTEGER,
    N380_390 INTEGER,
    N390_400 INTEGER)
AS
DECLARE VARIABLE S DOUBLE PRECISION;
begin
n100=0; n100_110=0; n110_120=0; n120_130=0; n130_140=0; n140_150=0; n150_160=0; n160_170=0; n170_180=0; n180_190=0;

n190_200=0; n200_210=0; n210_220=0; n220_230=0; n230_240=0; n240_250=0; n250_260=0; n260_270=0; n270_280=0;

n280_290=0; n290_300=0; n300_310=0; n310_320=0; n320_330=0; n330_340=0; n340_350=0; n350_360=0; n360_370=0; n370_380=0;

n380_390=0; n390_400=0;

FOR

select case

when ((abitura.sum_ball is NULL) or (abitura.sum_ball = 0) )

then abitura.middle_ball

when ((abitura.sum_ball >401))

then abitura.sum_ball/10

else abitura.sum_ball

end sum_ball from abitura

where abitura.n_specializ=:in_sp and abitura.vid_edu=:in_vid_edu and abitura.price=:price

and abitura.status in (0) AND abitura.konkurs=:konk

into :s

do

begin

if (s<100 or (s is NULL) ) then n100=n100+1;

if (s>=100 and s<=110) then n100_110=n100_110+1;

if (s>110 and s<=120) then n110_120=n110_120+1;

if (s>120 and s<=130) then n120_130=n120_130+1;

if (s>130 and s<=140) then n130_140=n130_140+1;

if (s>140 and s<=150) then n140_150=n140_150+1;

if (s>150 and s<=160) then n150_160=n150_160+1;

if (s>160 and s<=170) then n160_170=n160_170+1;

if (s>170 and s<=180) then n170_180=n170_180+1;

if (s>180 and s<=190) then n180_190=n180_190+1;

if (s>190 and s<=200) then n190_200=n190_200+1;

if (s>200 and s<=210) then n200_210=n200_210+1;

if (s>210 and s<=220) then n210_220=n210_220+1;

if (s>220 and s<=230) then n220_230=n220_230+1;

if (s>230 and s<=240) then n230_240=n230_240+1;

if (s>240 and s<=250) then n240_250=n240_250+1;

if (s>250 and s<=260) then n250_260=n250_260+1;

if (s>260 and s<=270) then n260_270=n260_270+1;

if (s>270 and s<=280) then n270_280=n270_280+1;

if (s>280 and s<=290) then n280_290=n280_290+1;

if (s>290 and s<=300) then n290_300=n290_300+1;

if (s>300 and s<=310) then n300_310=n300_310+1;

if (s>310 and s<=320) then n310_320=n310_320+1;

if (s>320 and s<=330) then n320_330=n320_330+1;

if (s>330 and s<=340) then n330_340=n330_340+1;

if (s>340 and s<=350) then n340_350=n340_350+1;

if (s>350 and s<=360) then n350_360=n350_360+1;

if (s>360 and s<=370) then n360_370=n360_370+1;

if (s>370 and s<=380) then n370_380=n370_380+1;

if (s>380 and s<=390) then n380_390=n380_390+1;

if (s>390 and s<=400) then n390_400=n390_400+1;

end

suspend;
end^


ALTER PROCEDURE KOL_SUMM_BALL12 (
    VID_EDU SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N1_2 SMALLINT,
    N2_3 SMALLINT,
    N3_4 SMALLINT,
    N4_5 SMALLINT,
    N5_6 SMALLINT,
    N6_7 SMALLINT,
    N7_8 SMALLINT,
    N8_9 SMALLINT,
    N9_10 SMALLINT,
    N10_11 SMALLINT,
    N11_12 SMALLINT,
    N12_13 SMALLINT,
    N13_14 SMALLINT,
    N14_15 SMALLINT,
    N15_16 SMALLINT,
    N16_17 SMALLINT,
    N17_18 SMALLINT,
    N18_19 SMALLINT,
    N19_20 SMALLINT,
    N20_21 SMALLINT,
    N21_22 SMALLINT,
    N22_23 SMALLINT,
    N23_24 SMALLINT,
    N24_25 SMALLINT,
    N25_26 SMALLINT,
    N26_27 SMALLINT,
    N27_28 SMALLINT,
    N28_29 SMALLINT,
    N29_30 SMALLINT,
    N30_31 SMALLINT,
    N31_32 SMALLINT,
    N32_33 SMALLINT,
    N33_34 SMALLINT,
    N34_35 SMALLINT,
    N35_36 SMALLINT,
    N36_37 SMALLINT,
    N37_38 SMALLINT,
    N38_39 SMALLINT,
    N39_40 SMALLINT,
    N40_41 SMALLINT,
    N41_42 SMALLINT,
    N42_43 SMALLINT,
    N43_44 SMALLINT,
    N44_45 SMALLINT,
    N45_46 SMALLINT,
    N46_47 SMALLINT,
    N47_48 SMALLINT,
    N48_49 SMALLINT,
    N49_50 SMALLINT,
    N50_51 SMALLINT,
    N51_52 SMALLINT,
    N52_53 SMALLINT,
    N53_54 SMALLINT,
    N54_55 SMALLINT,
    N55_56 SMALLINT,
    N56_57 SMALLINT,
    N57_58 SMALLINT,
    N58_59 SMALLINT,
    N59_60 SMALLINT,
    N60_61 SMALLINT,
    N61_62 SMALLINT,
    N62_63 SMALLINT,
    N63_64 SMALLINT,
    N64_65 SMALLINT,
    N65_66 SMALLINT,
    N66_67 SMALLINT,
    N67_68 SMALLINT,
    N68_69 SMALLINT,
    N69_70 SMALLINT,
    N70_71 SMALLINT,
    N71_72 SMALLINT,
    N72_73 SMALLINT,
    N73_74 SMALLINT,
    N74_75 SMALLINT,
    N75_76 SMALLINT)
AS
declare variable S integer;
begin
             n1_2=0;    n2_3=0;    n3_4=0;    n4_5=0;    n5_6=0;    n6_7=0;    n7_8=0;    n8_9=0;     n9_10=0;
  n10_11=0;  n11_12=0;  n12_13=0;  n13_14=0;  n14_15=0;  n15_16=0;  n16_17=0;  n17_18=0;  n18_19=0;   n19_20=0;
  n20_21=0;  n21_22=0;  n22_23=0;  n23_24=0;  n24_25=0;  n25_26=0;  n26_27=0;  n27_28=0;  n28_29=0;   n29_30=0;
  n30_31=0;  n31_32=0;  n32_33=0;  n33_34=0;  n34_35=0;  n35_36=0;  n36_37=0;  n37_38=0;  n38_39=0;   n39_40=0;
  n40_41=0;  n41_42=0;  n42_43=0;  n43_44=0;  n44_45=0;  n45_46=0;  n46_47=0;  n47_48=0;  n48_49=0;   n49_50=0;
  n50_51=0;  n51_52=0;  n52_53=0;  n53_54=0;  n54_55=0;  n55_56=0;  n56_57=0;  n57_58=0;  n58_59=0;   n59_60=0;
  n60_61=0;  n61_62=0;  n62_63=0;  n63_64=0;  n64_65=0;  n65_66=0;  n66_67=0;  n67_68=0;  n68_69=0;   n69_70=0;
  n70_71=0;  n71_72=0;  n72_73=0;  n73_74=0;  n74_75=0;  n75_76=0;
  FOR
    select case 
        when ((abitura.sum_ball is NULL) or (abitura.sum_ball in (0)))
            then abitura.middle_ball
        else abitura.sum_ball
    end sum_ball from abitura
  where
abitura.n_fac in (1, 2) and
abitura.vid_edu = :vid_edu and
abitura.status in (0) and
abitura.term_edu in (1,2) and
abitura.konkurs in (0) and
abitura.price = :price and
abitura.category_if in (0)
  into :s
  do
     begin
          if (s<=30) then n1_2=n1_2+1;
          if (s>30 and s<=35) then n2_3=n2_3+1;
          if (s>35 and s<=40) then n3_4=n3_4+1;
          if (s>40 and s<=45) then n4_5=n4_5+1;
          if (s>45 and s<=50) then n5_6=n5_6+1;
          if (s>50 and s<=55) then n6_7=n6_7+1;
          if (s>55 and s<=60) then n7_8=n7_8+1;
          if (s>60 and s<=65) then n8_9=n8_9+1;
          if (s>65 and s<=70) then n9_10=n9_10+1;
          if (s>70 and s<=75) then n10_11=n10_11+1;
          if (s>75 and s<=80) then n11_12=n11_12+1;
          if (s>80 and s<=85) then n12_13=n12_13+1;
          if (s>85 and s<=90) then n13_14=n13_14+1;
          if (s>90 and s<=95) then n14_15=n14_15+1;
          if (s>95 and s<=100) then n15_16=n15_16+1;
          if (s>100 and s<=105) then n16_17=n16_17+1;
          if (s>105 and s<=110) then n17_18=n17_18+1;
          if (s>110 and s<=115) then n18_19=n18_19+1;
          if (s>115 and s<=120) then n19_20=n19_20+1;
          if (s>120 and s<=125) then n20_21=n20_21+1;
          if (s>125 and s<=130) then n21_22=n21_22+1;
          if (s>130 and s<=135) then n22_23=n22_23+1;
          if (s>135 and s<=140) then n23_24=n23_24+1;
          if (s>140 and s<=145) then n24_25=n24_25+1;
          if (s>145 and s<=150) then n25_26=n25_26+1;
          if (s>150 and s<=155) then n26_27=n26_27+1;
          if (s>155 and s<=160) then n27_28=n27_28+1;
          if (s>160 and s<=165) then n28_29=n28_29+1;
          if (s>165 and s<=170) then n29_30=n29_30+1;
          if (s>170 and s<=175) then n30_31=n30_31+1;
          if (s>175 and s<=180) then n31_32=n31_32+1;
          if (s>180 and s<=185) then n32_33=n32_33+1;
          if (s>185 and s<=190) then n33_34=n33_34+1;
          if (s>190 and s<=195) then n34_35=n34_35+1;
          if (s>195 and s<=200) then n35_36=n35_36+1;
          if (s>200 and s<=205) then n36_37=n36_37+1;
          if (s>205 and s<=210) then n37_38=n37_38+1;
          if (s>210 and s<=215) then n38_39=n38_39+1;
          if (s>215 and s<=220) then n39_40=n39_40+1;
          if (s>220 and s<=225) then n40_41=n40_41+1;
          if (s>225 and s<=230) then n41_42=n41_42+1;
          if (s>230 and s<=235) then n42_43=n42_43+1;
          if (s>235 and s<=240) then n43_44=n43_44+1;
          if (s>240 and s<=245) then n44_45=n44_45+1;
          if (s>245 and s<=250) then n45_46=n45_46+1;
          if (s>250 and s<=255) then n46_47=n46_47+1;
          if (s>255 and s<=260) then n47_48=n47_48+1;
          if (s>260 and s<=265) then n48_49=n48_49+1;
          if (s>265 and s<=270) then n49_50=n49_50+1;
          if (s>270 and s<=275) then n50_51=n50_51+1;
          if (s>275 and s<=280) then n51_52=n51_52+1;
          if (s>280 and s<=285) then n52_53=n52_53+1;
          if (s>285 and s<=290) then n53_54=n53_54+1;
          if (s>290 and s<=295) then n54_55=n54_55+1;
          if (s>295 and s<=300) then n55_56=n55_56+1;
          if (s>300 and s<=305) then n56_57=n56_57+1;
          if (s>305 and s<=310) then n57_58=n57_58+1;
          if (s>310 and s<=315) then n58_59=n58_59+1;
          if (s>315 and s<=320) then n59_60=n59_60+1;
          if (s>320 and s<=325) then n60_61=n60_61+1;
          if (s>325 and s<=330) then n61_62=n61_62+1;
          if (s>330 and s<=335) then n62_63=n62_63+1;
          if (s>335 and s<=340) then n63_64=n63_64+1;
          if (s>340 and s<=345) then n64_65=n64_65+1;
          if (s>345 and s<=350) then n65_66=n65_66+1;
          if (s>350 and s<=355) then n66_67=n66_67+1;
          if (s>355 and s<=360) then n67_68=n67_68+1;
          if (s>360 and s<=365) then n68_69=n68_69+1;
          if (s>365 and s<=370) then n69_70=n69_70+1;
          if (s>370 and s<=375) then n70_71=n70_71+1;
          if (s>375 and s<=380) then n71_72=n71_72+1;
          if (s>380 and s<=385) then n72_73=n72_73+1;
          if (s>385 and s<=390) then n73_74=n73_74+1;
          if (s>390 and s<=395) then n74_75=n74_75+1;
          if (s>395) then n75_76=n75_76+1;
     end

  suspend;
end^


ALTER PROCEDURE KOL_SUMM_BALL2 (
    IN_FAC INTEGER,
    IN_SP INTEGER,
    IN_VID_EDU SMALLINT,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N2_3 INTEGER,
    N3_4 INTEGER,
    N4_5 INTEGER,
    N5_6 INTEGER,
    N6_7 INTEGER,
    N7_8 INTEGER,
    N8_9 INTEGER,
    N9_10 INTEGER,
    N10_11 INTEGER,
    N11_12 INTEGER,
    N12_13 INTEGER,
    N13_14 INTEGER,
    N14_15 INTEGER,
    N15_16 INTEGER,
    N16_17 INTEGER,
    N17_18 INTEGER,
    N18_19 INTEGER,
    N19_20 INTEGER,
    N20_21 INTEGER,
    N21_22 INTEGER,
    N22_23 INTEGER,
    N23_24 INTEGER,
    N24_25 INTEGER,
    N25_26 INTEGER,
    N26_27 INTEGER,
    N27_28 INTEGER,
    N28_29 INTEGER,
    N29_30 INTEGER,
    N30_31 INTEGER,
    N31_32 INTEGER,
    N32_33 INTEGER,
    N33_34 INTEGER,
    N34_35 INTEGER,
    N35_36 INTEGER,
    N36_37 INTEGER,
    N37_38 INTEGER,
    N38_39 INTEGER,
    N39_40 INTEGER)
AS
declare variable S double precision;
begin
                        n2_3=0;    n3_4=0;    n4_5=0;    n5_6=0;    n6_7=0;    n7_8=0;    n8_9=0;     n9_10=0;
  n10_11=0;  n11_12=0;  n12_13=0;  n13_14=0;  n14_15=0;  n15_16=0;  n16_17=0;  n17_18=0;  n18_19=0;   n19_20=0;
  n20_21=0;  n21_22=0;  n22_23=0;  n23_24=0;  n24_25=0;  n25_26=0;  n26_27=0;  n27_28=0;  n28_29=0;   n29_30=0;
  n30_31=0;  n31_32=0;  n32_33=0;  n33_34=0;  n34_35=0;  n35_36=0;  n36_37=0;  n37_38=0;  n38_39=0;   n39_40=0;
  FOR
  select case 
 when ((abitura.sum_ball is NULL) or (abitura.sum_ball = 0))
then abitura.middle_ball
else abitura.sum_ball
end sum_ball from abitura
  where abitura.n_fac=:in_fac and abitura.n_specializ=:in_sp and abitura.vid_edu=:in_vid_edu and abitura.price=:price
  and abitura.status in (0) and abitura.konkurs=:konk
  into :s
  do
     begin

          if (s<=30)            then n2_3=n2_3+1;
          if (s>30 and s<=40)   then n3_4=n3_4+1;
          if (s>40 and s<=50)   then n4_5=n4_5+1;
          if (s>50 and s<=60)   then n5_6=n5_6+1;
          if (s>60 and s<=70)   then n6_7=n6_7+1;
          if (s>70 and s<=80)   then n7_8=n7_8+1;
          if (s>80 and s<=90)   then n8_9=n8_9+1;
          if (s>90 and s<=100)  then n9_10=n9_10+1;
          if (s>100 and s<=110) then n10_11=n10_11+1;
          if (s>110 and s<=120) then n11_12=n11_12+1;
          if (s>120 and s<=130) then n12_13=n12_13+1;
          if (s>130 and s<=140) then n13_14=n13_14+1;
          if (s>140 and s<=150) then n14_15=n14_15+1;
          if (s>150 and s<=160) then n15_16=n15_16+1;
          if (s>160 and s<=170) then n16_17=n16_17+1;
          if (s>170 and s<=180) then n17_18=n17_18+1;
          if (s>180 and s<=190) then n18_19=n18_19+1;
          if (s>190 and s<=200) then n19_20=n19_20+1;
          if (s>200 and s<=210) then n20_21=n20_21+1;
          if (s>210 and s<=220) then n21_22=n21_22+1;
          if (s>220 and s<=230) then n22_23=n22_23+1;
          if (s>230 and s<=240) then n23_24=n23_24+1;
          if (s>240 and s<=250) then n24_25=n24_25+1;
          if (s>250 and s<=260) then n25_26=n25_26+1;
          if (s>260 and s<=270) then n26_27=n26_27+1;
          if (s>270 and s<=280) then n27_28=n27_28+1;
          if (s>280 and s<=290) then n28_29=n28_29+1;
          if (s>290 and s<=300) then n29_30=n29_30+1;
          if (s>300 and s<=310) then n30_31=n30_31+1;
          if (s>310 and s<=320) then n31_32=n31_32+1;
          if (s>320 and s<=330) then n32_33=n32_33+1;
          if (s>330 and s<=340) then n33_34=n33_34+1;
          if (s>340 and s<=350) then n34_35=n34_35+1;
          if (s>350 and s<=360) then n35_36=n35_36+1;
          if (s>360 and s<=370) then n36_37=n36_37+1;
          if (s>370 and s<=380) then n37_38=n37_38+1;
          if (s>380 and s<=390) then n38_39=n38_39+1;
          if (s>390 and s<=400) then n39_40=n39_40+1;

     end

  suspend;
end^


ALTER PROCEDURE KOL_SUMM_BALL3 (
    N_FAC SMALLINT,
    N_SP SMALLINT,
    VID_EDU SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N1_2 SMALLINT,
    N2_3 SMALLINT,
    N3_4 SMALLINT,
    N4_5 SMALLINT,
    N5_6 SMALLINT,
    N6_7 SMALLINT,
    N7_8 SMALLINT,
    N8_9 SMALLINT,
    N9_10 SMALLINT,
    N10_11 SMALLINT,
    N11_12 SMALLINT,
    N12_13 SMALLINT,
    N13_14 SMALLINT,
    N14_15 SMALLINT,
    N15_16 SMALLINT,
    N16_17 SMALLINT,
    N17_18 SMALLINT,
    N18_19 SMALLINT,
    N19_20 SMALLINT,
    N20_21 SMALLINT,
    N21_22 SMALLINT,
    N22_23 SMALLINT,
    N23_24 SMALLINT,
    N24_25 SMALLINT,
    N25_26 SMALLINT,
    N26_27 SMALLINT,
    N27_28 SMALLINT,
    N28_29 SMALLINT,
    N29_30 SMALLINT,
    N30_31 SMALLINT,
    N31_32 SMALLINT,
    N32_33 SMALLINT,
    N33_34 SMALLINT,
    N34_35 SMALLINT,
    N35_36 SMALLINT,
    N36_37 SMALLINT,
    N37_38 SMALLINT,
    N38_39 SMALLINT,
    N39_40 SMALLINT,
    N40_41 SMALLINT,
    N41_42 SMALLINT,
    N42_43 SMALLINT,
    N43_44 SMALLINT,
    N44_45 SMALLINT,
    N45_46 SMALLINT,
    N46_47 SMALLINT,
    N47_48 SMALLINT,
    N48_49 SMALLINT,
    N49_50 SMALLINT,
    N50_51 SMALLINT,
    N51_52 SMALLINT,
    N52_53 SMALLINT,
    N53_54 SMALLINT,
    N54_55 SMALLINT,
    N55_56 SMALLINT,
    N56_57 SMALLINT,
    N57_58 SMALLINT,
    N58_59 SMALLINT,
    N59_60 SMALLINT,
    N60_61 SMALLINT,
    N61_62 SMALLINT,
    N62_63 SMALLINT,
    N63_64 SMALLINT,
    N64_65 SMALLINT,
    N65_66 SMALLINT,
    N66_67 SMALLINT,
    N67_68 SMALLINT,
    N68_69 SMALLINT,
    N69_70 SMALLINT,
    N70_71 SMALLINT,
    N71_72 SMALLINT,
    N72_73 SMALLINT,
    N73_74 SMALLINT,
    N74_75 SMALLINT,
    N75_76 SMALLINT)
AS
declare variable S integer;
begin
             n1_2=0;    n2_3=0;    n3_4=0;    n4_5=0;    n5_6=0;    n6_7=0;    n7_8=0;    n8_9=0;     n9_10=0;
  n10_11=0;  n11_12=0;  n12_13=0;  n13_14=0;  n14_15=0;  n15_16=0;  n16_17=0;  n17_18=0;  n18_19=0;   n19_20=0;
  n20_21=0;  n21_22=0;  n22_23=0;  n23_24=0;  n24_25=0;  n25_26=0;  n26_27=0;  n27_28=0;  n28_29=0;   n29_30=0;
  n30_31=0;  n31_32=0;  n32_33=0;  n33_34=0;  n34_35=0;  n35_36=0;  n36_37=0;  n37_38=0;  n38_39=0;   n39_40=0;
  n40_41=0;  n41_42=0;  n42_43=0;  n43_44=0;  n44_45=0;  n45_46=0;  n46_47=0;  n47_48=0;  n48_49=0;   n49_50=0;
  n50_51=0;  n51_52=0;  n52_53=0;  n53_54=0;  n54_55=0;  n55_56=0;  n56_57=0;  n57_58=0;  n58_59=0;   n59_60=0;
  n60_61=0;  n61_62=0;  n62_63=0;  n63_64=0;  n64_65=0;  n65_66=0;  n66_67=0;  n67_68=0;  n68_69=0;   n69_70=0;
  n70_71=0;  n71_72=0;  n72_73=0;  n73_74=0;  n74_75=0;  n75_76=0;

  FOR
    select case 
        when ((abitura.sum_ball is NULL) or (abitura.sum_ball in (0)))
            then abitura.middle_ball
        else abitura.sum_ball
    end sum_ball from abitura
  where
abitura.n_fac = :n_fac and
abitura.n_specializ = :n_sp and
abitura.vid_edu = :vid_edu and
abitura.price = :price and
abitura.status in (0) and
abitura.konkurs in (0) and
abitura.term_edu in (0) and
((abitura.category_if in (0)) or ((abitura.category_if in (1)) and (abitura.price in (0))))
  into :s
  do
     begin
          if (s<=30) then n1_2=n1_2+1;
          if (s>30 and s<=35) then n2_3=n2_3+1;
          if (s>35 and s<=40) then n3_4=n3_4+1;
          if (s>40 and s<=45) then n4_5=n4_5+1;
          if (s>45 and s<=50) then n5_6=n5_6+1;
          if (s>50 and s<=55) then n6_7=n6_7+1;
          if (s>55 and s<=60) then n7_8=n7_8+1;
          if (s>60 and s<=65) then n8_9=n8_9+1;
          if (s>65 and s<=70) then n9_10=n9_10+1;
          if (s>70 and s<=75) then n10_11=n10_11+1;
          if (s>75 and s<=80) then n11_12=n11_12+1;
          if (s>80 and s<=85) then n12_13=n12_13+1;
          if (s>85 and s<=90) then n13_14=n13_14+1;
          if (s>90 and s<=95) then n14_15=n14_15+1;
          if (s>95 and s<=100) then n15_16=n15_16+1;
          if (s>100 and s<=105) then n16_17=n16_17+1;
          if (s>105 and s<=110) then n17_18=n17_18+1;
          if (s>110 and s<=115) then n18_19=n18_19+1;
          if (s>115 and s<=120) then n19_20=n19_20+1;
          if (s>120 and s<=125) then n20_21=n20_21+1;
          if (s>125 and s<=130) then n21_22=n21_22+1;
          if (s>130 and s<=135) then n22_23=n22_23+1;
          if (s>135 and s<=140) then n23_24=n23_24+1;
          if (s>140 and s<=145) then n24_25=n24_25+1;
          if (s>145 and s<=150) then n25_26=n25_26+1;
          if (s>150 and s<=155) then n26_27=n26_27+1;
          if (s>155 and s<=160) then n27_28=n27_28+1;
          if (s>160 and s<=165) then n28_29=n28_29+1;
          if (s>165 and s<=170) then n29_30=n29_30+1;
          if (s>170 and s<=175) then n30_31=n30_31+1;
          if (s>175 and s<=180) then n31_32=n31_32+1;
          if (s>180 and s<=185) then n32_33=n32_33+1;
          if (s>185 and s<=190) then n33_34=n33_34+1;
          if (s>190 and s<=195) then n34_35=n34_35+1;
          if (s>195 and s<=200) then n35_36=n35_36+1;
          if (s>200 and s<=205) then n36_37=n36_37+1;
          if (s>205 and s<=210) then n37_38=n37_38+1;
          if (s>210 and s<=215) then n38_39=n38_39+1;
          if (s>215 and s<=220) then n39_40=n39_40+1;
          if (s>220 and s<=225) then n40_41=n40_41+1;
          if (s>225 and s<=230) then n41_42=n41_42+1;
          if (s>230 and s<=235) then n42_43=n42_43+1;
          if (s>235 and s<=240) then n43_44=n43_44+1;
          if (s>240 and s<=245) then n44_45=n44_45+1;
          if (s>245 and s<=250) then n45_46=n45_46+1;
          if (s>250 and s<=255) then n46_47=n46_47+1;
          if (s>255 and s<=260) then n47_48=n47_48+1;
          if (s>260 and s<=265) then n48_49=n48_49+1;
          if (s>265 and s<=270) then n49_50=n49_50+1;
          if (s>270 and s<=275) then n50_51=n50_51+1;
          if (s>275 and s<=280) then n51_52=n51_52+1;
          if (s>280 and s<=285) then n52_53=n52_53+1;
          if (s>285 and s<=290) then n53_54=n53_54+1;
          if (s>290 and s<=295) then n54_55=n54_55+1;
          if (s>295 and s<=300) then n55_56=n55_56+1;
          if (s>300 and s<=305) then n56_57=n56_57+1;
          if (s>305 and s<=310) then n57_58=n57_58+1;
          if (s>310 and s<=315) then n58_59=n58_59+1;
          if (s>315 and s<=320) then n59_60=n59_60+1;
          if (s>320 and s<=325) then n60_61=n60_61+1;
          if (s>325 and s<=330) then n61_62=n61_62+1;
          if (s>330 and s<=335) then n62_63=n62_63+1;
          if (s>335 and s<=340) then n63_64=n63_64+1;
          if (s>340 and s<=345) then n64_65=n64_65+1;
          if (s>345 and s<=350) then n65_66=n65_66+1;
          if (s>350 and s<=355) then n66_67=n66_67+1;
          if (s>355 and s<=360) then n67_68=n67_68+1;
          if (s>360 and s<=365) then n68_69=n68_69+1;
          if (s>365 and s<=370) then n69_70=n69_70+1;
          if (s>370 and s<=375) then n70_71=n70_71+1;
          if (s>375 and s<=380) then n71_72=n71_72+1;
          if (s>380 and s<=385) then n72_73=n72_73+1;
          if (s>385 and s<=390) then n73_74=n73_74+1;
          if (s>390 and s<=395) then n74_75=n74_75+1;
          if (s>395) then n75_76=n75_76+1;
     end

  suspend;
end^


ALTER PROCEDURE KOL_SUMM_BALL4 (
    N_FAC SMALLINT,
    VID_EDU SMALLINT,
    PRICE SMALLINT,
    N_SP SMALLINT)
RETURNS (
    N1_2 SMALLINT,
    N2_3 SMALLINT,
    N3_4 SMALLINT,
    N4_5 SMALLINT,
    N5_6 SMALLINT,
    N6_7 SMALLINT,
    N7_8 SMALLINT,
    N8_9 SMALLINT,
    N9_10 SMALLINT,
    N10_11 SMALLINT,
    N11_12 SMALLINT,
    N12_13 SMALLINT,
    N13_14 SMALLINT,
    N14_15 SMALLINT,
    N15_16 SMALLINT,
    N16_17 SMALLINT,
    N17_18 SMALLINT,
    N18_19 SMALLINT,
    N19_20 SMALLINT,
    N20_21 SMALLINT,
    N21_22 SMALLINT,
    N22_23 SMALLINT,
    N23_24 SMALLINT,
    N24_25 SMALLINT,
    N25_26 SMALLINT,
    N26_27 SMALLINT,
    N27_28 SMALLINT,
    N28_29 SMALLINT,
    N29_30 SMALLINT,
    N30_31 SMALLINT,
    N31_32 SMALLINT,
    N32_33 SMALLINT,
    N33_34 SMALLINT,
    N34_35 SMALLINT,
    N35_36 SMALLINT,
    N36_37 SMALLINT,
    N37_38 SMALLINT,
    N38_39 SMALLINT,
    N39_40 SMALLINT,
    N40_41 SMALLINT,
    N41_42 SMALLINT,
    N42_43 SMALLINT,
    N43_44 SMALLINT,
    N44_45 SMALLINT,
    N45_46 SMALLINT,
    N46_47 SMALLINT,
    N47_48 SMALLINT,
    N48_49 SMALLINT,
    N49_50 SMALLINT,
    N50_51 SMALLINT,
    N51_52 SMALLINT,
    N52_53 SMALLINT,
    N53_54 SMALLINT,
    N54_55 SMALLINT,
    N55_56 SMALLINT,
    N56_57 SMALLINT,
    N57_58 SMALLINT,
    N58_59 SMALLINT,
    N59_60 SMALLINT,
    N60_61 SMALLINT,
    N61_62 SMALLINT,
    N62_63 SMALLINT,
    N63_64 SMALLINT,
    N64_65 SMALLINT,
    N65_66 SMALLINT,
    N66_67 SMALLINT,
    N67_68 SMALLINT,
    N68_69 SMALLINT,
    N69_70 SMALLINT,
    N70_71 SMALLINT,
    N71_72 SMALLINT,
    N72_73 SMALLINT,
    N73_74 SMALLINT,
    N74_75 SMALLINT,
    N75_76 SMALLINT)
AS
declare variable S integer;
begin
             n1_2=0;    n2_3=0;    n3_4=0;    n4_5=0;    n5_6=0;    n6_7=0;    n7_8=0;    n8_9=0;     n9_10=0;
  n10_11=0;  n11_12=0;  n12_13=0;  n13_14=0;  n14_15=0;  n15_16=0;  n16_17=0;  n17_18=0;  n18_19=0;   n19_20=0;
  n20_21=0;  n21_22=0;  n22_23=0;  n23_24=0;  n24_25=0;  n25_26=0;  n26_27=0;  n27_28=0;  n28_29=0;   n29_30=0;
  n30_31=0;  n31_32=0;  n32_33=0;  n33_34=0;  n34_35=0;  n35_36=0;  n36_37=0;  n37_38=0;  n38_39=0;   n39_40=0;
  n40_41=0;  n41_42=0;  n42_43=0;  n43_44=0;  n44_45=0;  n46_47=0;  n47_48=0;  n48_49=0;  n49_50=0;   n50_51=0;
  n51_52=0;  n52_53=0;  n53_54=0;  n54_55=0;  n55_56=0;  n56_57=0;  n57_58=0;  n58_59=0;  n59_60=0;   n60_61=0;
  n61_62=0;  n62_63=0;  n63_64=0;  n64_65=0;  n65_66=0;  n66_67=0;  n67_68=0;  n68_69=0;  n69_70=0;   n70_71=0;
  n71_72=0;  n72_73=0;  n73_74=0;  n74_75=0;  n75_76=0;
  FOR
    select case 
        when ((abitura.sum_ball is NULL) or (abitura.sum_ball in (0)))
            then abitura.middle_ball
        else abitura.sum_ball
    end sum_ball from abitura
  where
abitura.n_fac = :n_fac and
abitura.vid_edu = :vid_edu and
abitura.status in (0) and
abitura.term_edu in (1,2) and
abitura.price = :price and
abitura.n_specializ = :n_sp and
abitura.category_if in (0) and
abitura.konkurs = 0
  into :s
  do
     begin
          if (s<=30) then n1_2=n1_2+1;
          if (s>30 and s<=35) then n2_3=n2_3+1;
          if (s>35 and s<=40) then n3_4=n3_4+1;
          if (s>40 and s<=45) then n4_5=n4_5+1;
          if (s>45 and s<=50) then n5_6=n5_6+1;
          if (s>50 and s<=55) then n6_7=n6_7+1;
          if (s>55 and s<=60) then n7_8=n7_8+1;
          if (s>60 and s<=65) then n8_9=n8_9+1;
          if (s>65 and s<=70) then n9_10=n9_10+1;
          if (s>70 and s<=75) then n10_11=n10_11+1;
          if (s>75 and s<=80) then n11_12=n11_12+1;
          if (s>80 and s<=85) then n12_13=n12_13+1;
          if (s>85 and s<=90) then n13_14=n13_14+1;
          if (s>90 and s<=95) then n14_15=n14_15+1;
          if (s>95 and s<=100) then n15_16=n15_16+1;
          if (s>100 and s<=105) then n16_17=n16_17+1;
          if (s>105 and s<=110) then n17_18=n17_18+1;
          if (s>110 and s<=115) then n18_19=n18_19+1;
          if (s>115 and s<=120) then n19_20=n19_20+1;
          if (s>120 and s<=125) then n20_21=n20_21+1;
          if (s>125 and s<=130) then n21_22=n21_22+1;
          if (s>130 and s<=135) then n22_23=n22_23+1;
          if (s>135 and s<=140) then n23_24=n23_24+1;
          if (s>140 and s<=145) then n24_25=n24_25+1;
          if (s>145 and s<=150) then n25_26=n25_26+1;
          if (s>150 and s<=155) then n26_27=n26_27+1;
          if (s>155 and s<=160) then n27_28=n27_28+1;
          if (s>160 and s<=165) then n28_29=n28_29+1;
          if (s>165 and s<=170) then n29_30=n29_30+1;
          if (s>170 and s<=175) then n30_31=n30_31+1;
          if (s>175 and s<=180) then n31_32=n31_32+1;
          if (s>180 and s<=185) then n32_33=n32_33+1;
          if (s>185 and s<=190) then n33_34=n33_34+1;
          if (s>190 and s<=195) then n34_35=n34_35+1;
          if (s>195 and s<=200) then n35_36=n35_36+1;
          if (s>200 and s<=205) then n36_37=n36_37+1;
          if (s>205 and s<=210) then n37_38=n37_38+1;
          if (s>210 and s<=215) then n38_39=n38_39+1;
          if (s>215 and s<=220) then n39_40=n39_40+1;
          if (s>220 and s<=225) then n40_41=n40_41+1;
          if (s>225 and s<=230) then n41_42=n41_42+1;
          if (s>230 and s<=235) then n42_43=n42_43+1;
          if (s>235 and s<=240) then n43_44=n43_44+1;
          if (s>240 and s<=245) then n44_45=n44_45+1;
          if (s>245 and s<=250) then n45_46=n45_46+1;
          if (s>250 and s<=255) then n46_47=n46_47+1;
          if (s>255 and s<=260) then n47_48=n47_48+1;
          if (s>260 and s<=265) then n48_49=n48_49+1;
          if (s>265 and s<=270) then n49_50=n49_50+1;
          if (s>270 and s<=275) then n50_51=n50_51+1;
          if (s>275 and s<=280) then n51_52=n51_52+1;
          if (s>280 and s<=285) then n52_53=n52_53+1;
          if (s>285 and s<=290) then n53_54=n53_54+1;
          if (s>290 and s<=295) then n54_55=n54_55+1;
          if (s>295 and s<=300) then n55_56=n55_56+1;
          if (s>300 and s<=305) then n56_57=n56_57+1;
          if (s>305 and s<=310) then n57_58=n57_58+1;
          if (s>310 and s<=315) then n58_59=n58_59+1;
          if (s>315 and s<=320) then n59_60=n59_60+1;
          if (s>320 and s<=325) then n60_61=n60_61+1;
          if (s>325 and s<=330) then n61_62=n61_62+1;
          if (s>330 and s<=335) then n62_63=n62_63+1;
          if (s>335 and s<=340) then n63_64=n63_64+1;
          if (s>340 and s<=345) then n64_65=n64_65+1;
          if (s>345 and s<=350) then n65_66=n65_66+1;
          if (s>350 and s<=355) then n66_67=n66_67+1;
          if (s>355 and s<=360) then n67_68=n67_68+1;
          if (s>360 and s<=365) then n68_69=n68_69+1;
          if (s>365 and s<=370) then n69_70=n69_70+1;
          if (s>370 and s<=375) then n70_71=n70_71+1;
          if (s>375 and s<=380) then n71_72=n71_72+1;
          if (s>380 and s<=385) then n72_73=n72_73+1;
          if (s>385 and s<=390) then n73_74=n73_74+1;
          if (s>390 and s<=395) then n74_75=n74_75+1;
          if (s>395) then n75_76=n75_76+1;
     end

  suspend;
end^


ALTER PROCEDURE KOLL_SUMM_BALL2K (
    IN_FAC INTEGER,
    IN_VID_EDU INTEGER,
    KONK SMALLINT,
    PRICE SMALLINT)
RETURNS (
    N2_3 INTEGER,
    N3_4 INTEGER,
    N4_5 INTEGER,
    N5_6 INTEGER,
    N6_7 INTEGER,
    N7_8 INTEGER,
    N8_9 INTEGER,
    N9_10 INTEGER,
    N10_11 INTEGER,
    N11_12 INTEGER,
    N12_13 INTEGER,
    N13_14 INTEGER,
    N14_15 INTEGER,
    N15_16 INTEGER,
    N16_17 INTEGER,
    N17_18 INTEGER,
    N18_19 INTEGER,
    N19_20 INTEGER,
    N20_21 INTEGER,
    N21_22 INTEGER,
    N22_23 INTEGER,
    N23_24 INTEGER,
    N24_25 INTEGER,
    N25_26 INTEGER,
    N26_27 INTEGER,
    N27_28 INTEGER,
    N28_29 INTEGER,
    N29_30 INTEGER,
    N30_31 INTEGER,
    N31_32 INTEGER,
    N32_33 INTEGER,
    N33_34 INTEGER,
    N34_35 INTEGER,
    N35_36 INTEGER,
    N36_37 INTEGER,
    N37_38 INTEGER,
    N38_39 INTEGER,
    N39_40 INTEGER)
AS
declare variable S double precision;
begin
                        n2_3=0;    n3_4=0;    n4_5=0;    n5_6=0;    n6_7=0;    n7_8=0;    n8_9=0;     n9_10=0;
  n10_11=0;  n11_12=0;  n12_13=0;  n13_14=0;  n14_15=0;  n15_16=0;  n16_17=0;  n17_18=0;  n18_19=0;   n19_20=0;
  n20_21=0;  n21_22=0;  n22_23=0;  n23_24=0;  n24_25=0;  n25_26=0;  n26_27=0;  n27_28=0;  n28_29=0;   n29_30=0;
  n30_31=0;  n31_32=0;  n32_33=0;  n33_34=0;  n34_35=0;  n35_36=0;  n36_37=0;  n37_38=0;  n38_39=0;   n39_40=0;
  FOR
  select case 
 when ((abitura.sum_ball is NULL) or (abitura.sum_ball = 0))
then abitura.middle_ball
else abitura.sum_ball
end sum_ball from abitura
  where abitura.n_fac=:in_fac and abitura.vid_edu=:in_vid_edu and abitura.price=:price
  and abitura.status in (0) and abitura.konkurs=:konk and abitura.v_k in ("") and abitura.without in ("")
  into :s
  do
     begin

          if (s<=30)            then n2_3=n2_3+1;
          if (s>30 and s<=40)   then n3_4=n3_4+1;
          if (s>40 and s<=50)   then n4_5=n4_5+1;
          if (s>50 and s<=60)   then n5_6=n5_6+1;
          if (s>60 and s<=70)   then n6_7=n6_7+1;
          if (s>70 and s<=80)   then n7_8=n7_8+1;
          if (s>80 and s<=90)   then n8_9=n8_9+1;
          if (s>90 and s<=100)  then n9_10=n9_10+1;
          if (s>100 and s<=110) then n10_11=n10_11+1;
          if (s>110 and s<=120) then n11_12=n11_12+1;
          if (s>120 and s<=130) then n12_13=n12_13+1;
          if (s>130 and s<=140) then n13_14=n13_14+1;
          if (s>140 and s<=150) then n14_15=n14_15+1;
          if (s>150 and s<=160) then n15_16=n15_16+1;
          if (s>160 and s<=170) then n16_17=n16_17+1;
          if (s>170 and s<=180) then n17_18=n17_18+1;
          if (s>180 and s<=190) then n18_19=n18_19+1;
          if (s>190 and s<=200) then n19_20=n19_20+1;
          if (s>200 and s<=210) then n20_21=n20_21+1;
          if (s>210 and s<=220) then n21_22=n21_22+1;
          if (s>220 and s<=230) then n22_23=n22_23+1;
          if (s>230 and s<=240) then n23_24=n23_24+1;
          if (s>240 and s<=250) then n24_25=n24_25+1;
          if (s>250 and s<=260) then n25_26=n25_26+1;
          if (s>260 and s<=270) then n26_27=n26_27+1;
          if (s>270 and s<=280) then n27_28=n27_28+1;
          if (s>280 and s<=290) then n28_29=n28_29+1;
          if (s>290 and s<=300) then n29_30=n29_30+1;
          if (s>300 and s<=310) then n30_31=n30_31+1;
          if (s>310 and s<=320) then n31_32=n31_32+1;
          if (s>320 and s<=330) then n32_33=n32_33+1;
          if (s>330 and s<=340) then n33_34=n33_34+1;
          if (s>340 and s<=350) then n34_35=n34_35+1;
          if (s>350 and s<=360) then n35_36=n35_36+1;
          if (s>360 and s<=370) then n36_37=n36_37+1;
          if (s>370 and s<=380) then n37_38=n37_38+1;
          if (s>380 and s<=390) then n38_39=n38_39+1;
          if (s>390 and s<=400) then n39_40=n39_40+1;

     end

  suspend;
end^


ALTER PROCEDURE KONKURS (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_F VARCHAR(30),
    OUT_N VARCHAR(30),
    OUT_O VARCHAR(30),
    OUT_N_DELO SMALLINT,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_E_M VARCHAR(50),
    OUT_NAME_E_S VARCHAR(50),
    OUT_WHEN_E_M SMALLINT,
    OUT_WHEN_E_S SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SP DOUBLE PRECISION,
    OUT_SPORT VARCHAR(50),
    OUT_MID_B DOUBLE PRECISION,
    OUT_ADDRESS VARCHAR(100),
    OUT_COPY_AT SMALLINT,
    OUT_V_K VARCHAR(5),
    OUT_PRIV VARCHAR(50),
    OUT_WITHOUT VARCHAR(5),
    OUT_REGION INTEGER,
    OUT_CENTRE INTEGER,
    OUT_FIO VARCHAR(90),
    OUT_N_CK SMALLINT)
AS
BEGIN
FOR SELECT A.NOMER_AB, A.SUM_BALL, A.FAM, A.NAME, A.OTCH, A.NOM_DELA, A.DATE_R, A.POL, A.NAME_EDU_MIDDLE,
A.NAME_EDU_SPEC, A.WHEN_EDU_MIDDLE, A.WHEN_EDU_SPEC,
A.STAG, A.STAG_SPEC, C.SPORT_CATEGORY, A.MIDDLE_BALL, A.ADDRESS_BEFORE, A.COPY_AT, A.v_k, A.priv, A.without,
a.n_region, a.n_centre, IIF(A.OTCH IS NULL, A.FAM || ' ' || A.NAME, A.FAM || ' ' || A.NAME || ' ' || A.OTCH) FIO, A.N_CK
FROM ABITURA A LEFT JOIN CATEGORY C ON (A.N_SPORT_CATEGORY=C.N_SPORT_CATEGORY)
WHERE
    (A.N_SPECIALIZ=:IN_SP)
AND (A.VID_EDU=:IN_VID_EDU)
AND (A.KONKURS=:in_konk)
and (a.price=:IN_PRICE)
AND (A.STATUS=0)
ORDER BY  a.without, a.v_k, A.SUM_BALL DESC, A.priv, A.MIDDLE_BALL DESC
INTO :OUT_NOMER_AB,
  :OUT_SUM_BALL,
  :OUT_F,
  :OUT_N,
  :OUT_O,
  :OUT_N_DELO,
  :OUT_DATE_R,
  :OUT_POL,
  :OUT_NAME_E_M,
  :OUT_NAME_E_S,
  :OUT_WHEN_E_M,
  :OUT_WHEN_E_S,
  :OUT_STAG,
  :OUT_STAG_SP,
  :OUT_SPORT,
  :OUT_MID_B,
  :OUT_ADDRESS,
  :OUT_COPY_AT,
  :out_v_k,
  :out_priv,
  :out_without,
  :out_region,
  :out_centre,
  :out_fio,
  :out_n_ck
DO
SUSPEND;
END^


ALTER PROCEDURE KONKURS12 (
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_N_SPECIALIZ SMALLINT,
    OUT_FIO VARCHAR(90))
AS
begin
    for select abitura.nomer_ab, abitura.nom_dela, abitura.date_r, abitura.pol, abitura.name_edu_middle, abitura.when_edu_middle,
        abitura.name_edu_spec, abitura.when_edu_spec, abitura.stag, abitura.stag_spec, category.sport_category, abitura.middle_ball, abitura.sum_ball,
        abitura.address_before, abitura.konkurs, abitura.n_ck, abitura.term_edu, abitura.category_ab, abitura.n_specializ,
        IIF(abitura.OTCH IS NULL, abitura.FAM || ' ' || abitura.NAME, abitura.FAM || ' ' || abitura.NAME || ' ' || abitura.OTCH) FIO
        from abitura left join category on (abitura.n_sport_category = category.n_sport_category)
        where ((abitura.n_fac = 1) or (abitura.n_fac = 2))
            and abitura.vid_edu = :in_vid_edu
            and abitura.konkurs = :in_konk
            and abitura.price = :in_price
            and abitura.status = 0
            and ((abitura.term_edu = 1) or (abitura.term_edu = 2))
            and abitura.category_if = 0
order by abitura.sum_ball desc, abitura.middle_ball desc
    into
        :out_nomer_ab,
        :out_n_dela,
        :out_date_r,
        :out_pol,
        :out_name_edu_middle,
        :out_when_edu_middle,
        :out_name_edu_spec,
        :out_when_edu_spec,
        :out_stag,
        :out_stag_spec,
        :out_sport_category,
        :out_middle_ball,
        :out_sum_ball,
        :out_address_before,
        :out_konkurs,
        :out_n_ck,
        :out_term_edu,
        :out_category_ab,
        :out_n_specializ,
        :out_FIO
    do
  suspend;
end^


ALTER PROCEDURE KONKURS2 (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_F VARCHAR(30),
    OUT_N VARCHAR(30),
    OUT_O VARCHAR(30),
    OUT_N_DELO SMALLINT,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_E_M VARCHAR(50),
    OUT_NAME_E_S VARCHAR(50),
    OUT_WHEN_E_M SMALLINT,
    OUT_WHEN_E_S SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SP DOUBLE PRECISION,
    OUT_SPORT VARCHAR(50),
    OUT_MID_B DOUBLE PRECISION,
    OUT_ADDRESS VARCHAR(100),
    OUT_COPY_AT SMALLINT,
    OUT_V_K VARCHAR(5),
    OUT_PRIV VARCHAR(50),
    OUT_WITHOUT VARCHAR(5),
    OUT_REGION INTEGER,
    OUT_CENTRE INTEGER,
    OUT_FIO VARCHAR(90),
    OUT_N_CK SMALLINT)
AS
BEGIN
FOR SELECT A.NOMER_AB, A.SUM_BALL, A.FAM, A.NAME, A.OTCH, A.NOM_DELA, A.DATE_R, A.POL, A.NAME_EDU_MIDDLE,
A.NAME_EDU_SPEC, A.WHEN_EDU_MIDDLE, A.WHEN_EDU_SPEC,
A.STAG, A.STAG_SPEC, C.SPORT_CATEGORY, A.MIDDLE_BALL, A.ADDRESS_BEFORE, A.COPY_AT, A.v_k, A.priv, A.without,
a.n_region, a.n_centre, IIF(A.OTCH IS NULL, A.FAM || ' ' || A.NAME, A.FAM || ' ' || A.NAME || ' ' || A.OTCH) FIO, A.N_CK
FROM ABITURA A LEFT JOIN CATEGORY C ON (A.N_SPORT_CATEGORY=C.N_SPORT_CATEGORY)
WHERE
    (A.N_SPECIALIZ=:IN_SP)
AND (A.VID_EDU=:IN_VID_EDU)
AND (A.KONKURS=:in_konk)
and (a.price=:IN_PRICE)
AND (A.STATUS=0)

ORDER BY   A.SUM_BALL DESC,a.without, a.v_k, A.priv, A.MIDDLE_BALL DESC
INTO :OUT_NOMER_AB,
  :OUT_SUM_BALL,
  :OUT_F,
  :OUT_N,
  :OUT_O,
  :OUT_N_DELO,
  :OUT_DATE_R,
  :OUT_POL,
  :OUT_NAME_E_M,
  :OUT_NAME_E_S,
  :OUT_WHEN_E_M,
  :OUT_WHEN_E_S,
  :OUT_STAG,
  :OUT_STAG_SP,
  :OUT_SPORT,
  :OUT_MID_B,
  :OUT_ADDRESS,
  :OUT_COPY_AT,
  :out_v_k,
  :out_priv,
  :out_without,
  :out_region,
  :out_centre,
  :out_fio,
  :out_n_ck
DO
SUSPEND;
END^


ALTER PROCEDURE KONKURS2V (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_FIO VARCHAR(90))
AS
begin
    for select abitura.nomer_ab, abitura.nom_dela, abitura.date_r, abitura.pol, abitura.name_edu_middle, abitura.when_edu_middle,
        abitura.name_edu_spec, abitura.when_edu_spec, abitura.stag, abitura.stag_spec, category.sport_category, abitura.middle_ball, abitura.sum_ball,
        abitura.address_before, abitura.konkurs, abitura.n_ck, abitura.term_edu, abitura.category_ab,
        IIF(abitura.OTCH IS NULL, abitura.FAM || ' ' || abitura.NAME, abitura.FAM || ' ' || abitura.NAME || ' ' || abitura.OTCH) FIO
        from abitura left join category on (abitura.n_sport_category = category.n_sport_category)
        where abitura.n_specializ = :in_sp
            and abitura.vid_edu = :in_vid_edu
            and abitura.konkurs = :in_konk
            and abitura.price = :in_price
            and abitura.status = 0
            and ((abitura.term_edu = 4) or (abitura.term_edu = 5))
            and abitura.category_if = 0
        order by abitura.sum_ball desc, abitura.middle_ball desc
    into
        :out_nomer_ab,
        :out_n_dela,
        :out_date_r,
        :out_pol,
        :out_name_edu_middle,
        :out_when_edu_middle,
        :out_name_edu_spec,
        :out_when_edu_spec,
        :out_stag,
        :out_stag_spec,
        :out_sport_category,
        :out_middle_ball,
        :out_sum_ball,
        :out_address_before,
        :out_konkurs,
        :out_n_ck,
        :out_term_edu,
        :out_category_ab,
        :out_FIO
    do
  suspend;
end^


ALTER PROCEDURE KONKURS3 (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_FIO VARCHAR(90))
AS
begin
    for select abitura.nomer_ab, abitura.nom_dela, abitura.date_r, abitura.pol, abitura.name_edu_middle, abitura.when_edu_middle,
        abitura.name_edu_spec, abitura.when_edu_spec, abitura.stag, abitura.stag_spec, category.sport_category, abitura.middle_ball, abitura.sum_ball,
        abitura.address_before, abitura.konkurs, abitura.n_ck, abitura.term_edu, abitura.category_ab,
        IIF(abitura.OTCH IS NULL, abitura.FAM || ' ' || abitura.NAME, abitura.FAM || ' ' || abitura.NAME || ' ' || abitura.OTCH) FIO
        from abitura left join category on (abitura.n_sport_category = category.n_sport_category)
        where abitura.n_specializ = :in_sp
            and abitura.vid_edu = :in_vid_edu
            and abitura.konkurs = :in_konk
            and abitura.price = :in_price
            and abitura.status = 0
            and ((abitura.term_edu = 0) or (abitura.term_edu = 3))
            and abitura.category_if = 0
        order by abitura.sum_ball desc, abitura.middle_ball desc
    into
        :out_nomer_ab,
        :out_n_dela,
        :out_date_r,
        :out_pol,
        :out_name_edu_middle,
        :out_when_edu_middle,
        :out_name_edu_spec,
        :out_when_edu_spec,
        :out_stag,
        :out_stag_spec,
        :out_sport_category,
        :out_middle_ball,
        :out_sum_ball,
        :out_address_before,
        :out_konkurs,
        :out_n_ck,
        :out_term_edu,
        :out_category_ab,
        :out_FIO
    do
  suspend;
end^


ALTER PROCEDURE KONKURS333 (
    IN_SP SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_FIO VARCHAR(90))
AS
begin
    for select abitura.nomer_ab, abitura.nom_dela, abitura.date_r, abitura.pol, abitura.name_edu_middle, abitura.when_edu_middle,
        abitura.name_edu_spec, abitura.when_edu_spec, abitura.stag, abitura.stag_spec, category.sport_category, abitura.middle_ball, abitura.sum_ball,
        abitura.address_before, abitura.konkurs, abitura.n_ck, abitura.term_edu, abitura.category_ab,
        IIF(abitura.OTCH IS NULL, abitura.FAM || ' ' || abitura.NAME, abitura.FAM || ' ' || abitura.NAME || ' ' || abitura.OTCH) FIO
    from abitura left join category on (abitura.n_sport_category = category.n_sport_category)
    where abitura.n_specializ = :in_sp
            and abitura.vid_edu = :in_vid_edu
            and abitura.konkurs = :in_konk
            and abitura.price = :in_price
            and abitura.status = 5
            and ((abitura.term_edu = 0) or (abitura.term_edu = 3))
            and abitura.category_if = 0
        order by abitura.sum_ball desc, abitura.middle_ball desc
    into
        :out_nomer_ab,
        :out_n_dela,
        :out_date_r,
        :out_pol,
        :out_name_edu_middle,
        :out_when_edu_middle,
        :out_name_edu_spec,
        :out_when_edu_spec,
        :out_stag,
        :out_stag_spec,
        :out_sport_category,
        :out_middle_ball,
        :out_sum_ball,
        :out_address_before,
        :out_konkurs,
        :out_n_ck,
        :out_term_edu,
        :out_category_ab,
        :out_FIO
    do
  suspend;
end^


ALTER PROCEDURE KONKURS34 (
    N_FAC SMALLINT,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_NOMER_AB INTEGER,
    OUT_N_DELA INTEGER,
    OUT_DATE_R DATE,
    OUT_POL CHAR(1),
    OUT_NAME_EDU_MIDDLE VARCHAR(50),
    OUT_WHEN_EDU_MIDDLE SMALLINT,
    OUT_NAME_EDU_SPEC VARCHAR(50),
    OUT_WHEN_EDU_SPEC SMALLINT,
    OUT_STAG DOUBLE PRECISION,
    OUT_STAG_SPEC DOUBLE PRECISION,
    OUT_SPORT_CATEGORY VARCHAR(50),
    OUT_MIDDLE_BALL DOUBLE PRECISION,
    OUT_SUM_BALL DOUBLE PRECISION,
    OUT_ADDRESS_BEFORE VARCHAR(100),
    OUT_KONKURS SMALLINT,
    OUT_N_CK SMALLINT,
    OUT_TERM_EDU SMALLINT,
    OUT_CATEGORY_AB SMALLINT,
    OUT_N_SPECIALIZ SMALLINT,
    OUT_FIO VARCHAR(90))
AS
begin
    for select abitura.nomer_ab, abitura.nom_dela, abitura.date_r, abitura.pol, abitura.name_edu_middle, abitura.when_edu_middle,
        abitura.name_edu_spec, abitura.when_edu_spec, abitura.stag, abitura.stag_spec, category.sport_category, abitura.middle_ball, abitura.sum_ball,
        abitura.address_before, abitura.konkurs, abitura.n_ck, abitura.term_edu, abitura.category_ab, abitura.n_specializ,
        IIF(abitura.OTCH IS NULL, abitura.FAM || ' ' || abitura.NAME, abitura.FAM || ' ' || abitura.NAME || ' ' || abitura.OTCH) FIO
        from abitura left join category on (abitura.n_sport_category = category.n_sport_category)
        where abitura.n_fac = :n_fac
            and abitura.vid_edu = :in_vid_edu
            and abitura.konkurs = :in_konk
            and abitura.price = :in_price
            and abitura.status = 0
            and ((abitura.term_edu = 1) or (abitura.term_edu = 2))
            and abitura.category_if = 0
        order by abitura.sum_ball desc, abitura.middle_ball desc
    into
        :out_nomer_ab,
        :out_n_dela,
        :out_date_r,
        :out_pol,
        :out_name_edu_middle,
        :out_when_edu_middle,
        :out_name_edu_spec,
        :out_when_edu_spec,
        :out_stag,
        :out_stag_spec,
        :out_sport_category,
        :out_middle_ball,
        :out_sum_ball,
        :out_address_before,
        :out_konkurs,
        :out_n_ck,
        :out_term_edu,
        :out_category_ab,
        :out_n_specializ,
        :out_FIO
    do
  suspend;
end^


ALTER PROCEDURE MAX_NUM_DELA (
    N_FAC SMALLINT,
    VID_EDU SMALLINT,
    TERM_EDU SMALLINT,
    PRICE SMALLINT)
RETURNS (
    MX_NUM_DELA INTEGER)
AS
begin
    if ((:term_edu = 1) or (:term_edu = 2) or (:term_edu = 4) or (:term_edu = 5))  then begin
        select max(abitur_logbook.nom_dela) from abitur_logbook
        where abitur_logbook.n_fac = :n_fac and
            abitur_logbook.vid_edu = :vid_edu and
            ((abitur_logbook.term_edu = 1) or (abitur_logbook.term_edu = 2)
             or (abitur_logbook.term_edu = 4) or (abitur_logbook.term_edu = 5))  and
            abitur_logbook.price = :price
        into :mx_num_dela;
    end else begin
        select max(abitur_logbook.nom_dela) from abitur_logbook
        where abitur_logbook.n_fac = :n_fac and
            abitur_logbook.vid_edu = :vid_edu and
            ((abitur_logbook.term_edu = 0) or (abitur_logbook.term_edu = 3)) and
            abitur_logbook.price = :price
        into :mx_num_dela;
     end

  suspend;
end^


ALTER PROCEDURE PREDMET_BALL (
    IN_N_AB_BALL INTEGER)
RETURNS (
    OUT_N_PREDMET SMALLINT,
    OUT_TEXT_PREDMET VARCHAR(100),
    OUT_BALL DOUBLE PRECISION)
AS
BEGIN
FOR SELECT P.TEXT_PREDMET, E.BALL, P.n_predmet
FROM EXAMEN E INNER JOIN PREDMET P ON E.N_PREDMET=P.N_PREDMET
WHERE E.NOMER_AB=:IN_N_AB_BALL
ORDER BY P.TEXT_PREDMET
INTO :OUT_TEXT_PREDMET, :OUT_BALL, :OUT_N_PREDMET
DO
SUSPEND;
END^


ALTER PROCEDURE PRIVILEG_LOG_DEL (
    ID_LOG INTEGER)
AS
begin
    delete from privileg_log
    where privileg_log.id_log = :id_log;
end^


ALTER PROCEDURE PRIVILEG_LOG_INS (
    ID_LOG INTEGER,
    N_PRIV SMALLINT,
    SEL_PRIV SMALLINT,
    DAT_PRIV SMALLINT)
AS
begin
  insert into privileg_log (
    id_log,
    n_priv,
    sel_priv,
    dat_priv)
  values (
    :id_log,
    :n_priv,
    :sel_priv,
    :dat_priv);
end^


ALTER PROCEDURE PROC_SEL_EXERC_INS (
    FIN_ID_SEL_EXERC INTEGER,
    FIN_NOMER_AB INTEGER,
    FIN_NUM_EXERC_GRP SMALLINT,
    FIN_ID_EXERC SMALLINT)
AS
begin
  if (:fin_id_sel_exerc < 0) then
  begin
    insert into sel_exercize(nomer_ab, num_exerc_grp, id_exerc)
    values(:fin_nomer_ab, :fin_num_exerc_grp, :fin_id_exerc);
  end
  else
  begin
    update
      sel_exercize
    set
      nomer_ab = :fin_nomer_ab,
      num_exerc_grp = :fin_num_exerc_grp,
      id_exerc = :fin_id_exerc
    where
      id_sel_exerc = :fin_id_sel_exerc;
  end 
end^


ALTER PROCEDURE PROTOKOL (
    IN_N_FAC SMALLINT,
    IN_DATA DATE,
    IN_VID_EDU SMALLINT,
    IN_KONK SMALLINT,
    IN_PRICE SMALLINT)
RETURNS (
    OUT_FAM VARCHAR(30),
    OUT_NAME VARCHAR(30),
    OUT_OTCH VARCHAR(30),
    OUT_N_DEL SMALLINT,
    OUT_VK VARCHAR(5),
    OUT_WITHOUT VARCHAR(5))
AS
BEGIN
FOR SELECT DISTINCT A.FAM, A.NAME, A.OTCH, A.NOM_DELA, a.v_k, a.without
FROM ABITURA A
WHERE
    (A.N_FAC=:IN_N_FAC)
AND (A.STATUS=0)
AND (A.KONKURS=:IN_KONK)
AND (A.VID_EDU=:IN_VID_EDU)
AND (A.DATE_PRIEM=:IN_DATA)
AND (a.price=:IN_PRICE)
ORDER BY A.NOM_DELA
INTO :OUT_FAM, :OUT_NAME, :OUT_OTCH, :OUT_N_DEL, :OUT_VK, :OUT_WITHOUT
DO
SUSPEND;
END^



SET TERM ; ^



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

COMMENT ON COLUMN ABITURA.NOMER_AB IS 
'Инкремент';

COMMENT ON COLUMN ABITURA.FAM IS 
'Фамилия';

COMMENT ON COLUMN ABITURA.NAME IS 
'Имя';

COMMENT ON COLUMN ABITURA.OTCH IS 
'Отчество';

COMMENT ON COLUMN ABITURA.POL IS 
'Пол';

COMMENT ON COLUMN ABITURA.PLACE_R IS 
'Место рождения';

COMMENT ON COLUMN ABITURA.NAZ IS 
'Национальность';

COMMENT ON COLUMN ABITURA.ADDRESS_BEFORE IS 
'Адрес регистрации';

COMMENT ON COLUMN ABITURA.ADDRESS_LIFE IS 
'Адрес проживания';

COMMENT ON COLUMN ABITURA.MIDDLE_BALL IS 
'Средний балл аттестата';

COMMENT ON COLUMN ABITURA.NAME_EDU_MIDDLE IS 
'Название учреждения среднего образования (где получил среднее образование)';

COMMENT ON COLUMN ABITURA.NAME_EDU_SPEC IS 
'Название учреждения средне-специального образования (сверх среднего)';

COMMENT ON COLUMN ABITURA.WHERE_EDU_MIDDLE IS 
'Где окончил среднее образование';

COMMENT ON COLUMN ABITURA.WHERE_EDU_SPEC IS 
'Где окончил средне специальное';

COMMENT ON COLUMN ABITURA.WHEN_EDU_MIDDLE IS 
'Когда окончил среднее образование (год)';

COMMENT ON COLUMN ABITURA.WHEN_EDU_SPEC IS 
'Когда окончил средне-специальное обр. (год)';

COMMENT ON COLUMN ABITURA.NOM_DELA IS 
'Номер дела';

COMMENT ON COLUMN ABITURA.VID_EDU IS 
'Вид обучения:
0-дневное
1-заочное';

COMMENT ON COLUMN ABITURA.NOM_GROUP IS 
'Номер группы';

COMMENT ON COLUMN ABITURA.MAMA IS 
'ФИО мама';

COMMENT ON COLUMN ABITURA.PAPA IS 
'ФИО папа';

COMMENT ON COLUMN ABITURA.WORK_MAMA IS 
'Место работы мамы';

COMMENT ON COLUMN ABITURA.WORK_PAPA IS 
'Место работы папы';

COMMENT ON COLUMN ABITURA.GRAGDAN IS 
'Гражданство';

COMMENT ON COLUMN ABITURA.N_REGION IS 
'Связь с табл. Decanat.Region';

COMMENT ON COLUMN ABITURA.N_SPECIALIZ IS 
'Связь с таблицей SPECIALIZ - специализация (из Деканата)';

COMMENT ON COLUMN ABITURA.STATUS IS 
'Статус:
0-действующий
1-забрал документы
2-получил отрицат. оценку
3-неявка на экзамен
4-забрал документы во время экзаменов
5-зачисленный
6-онлайн зарегистрирован';

COMMENT ON COLUMN ABITURA.N_PRIVILEGE_EXAM IS 
'Связь с табл. Privilege_one_exam
1-нет привелегий';

COMMENT ON COLUMN ABITURA.SUM_BALL IS 
'Сумма полученных баллов на экз.';

COMMENT ON COLUMN ABITURA.N_FAC IS 
'Связь с таблицей Faculty (из Деканата)-факультеты
1-СИиЕ
2-МВС
3-ОФКиТ
4-ИТ';

COMMENT ON COLUMN ABITURA.N_VID_SPORT IS 
'Связь с табл. Vid_Sport (из Деканата)';

COMMENT ON COLUMN ABITURA.N_SPORT_CATEGORY IS 
'Связь с табл. Category';

COMMENT ON COLUMN ABITURA.D_PRIKAZ_INCLUDE IS 
'Дата приказа о зачислении';

COMMENT ON COLUMN ABITURA.N_PRIKAZ_INCLUDE IS 
'Номер приказа о зачислении';

COMMENT ON COLUMN ABITURA.PHONE IS 
'Телефон';

COMMENT ON COLUMN ABITURA.PHOTO IS 
'Фотография';

COMMENT ON COLUMN ABITURA.STAG IS 
'Стаж работы';

COMMENT ON COLUMN ABITURA.DATE_PRIEM IS 
'Дата подачи документов';

COMMENT ON COLUMN ABITURA.DATE_VOZVRAT IS 
'Дата возврата документов';

COMMENT ON COLUMN ABITURA.DATE_R IS 
'Дата рождения';

COMMENT ON COLUMN ABITURA.KONKURS IS 
'Конкурс для поступления:
0-общий
1-целевой
2-на 2-3 курс (убран в 2017)
3-вне конкурса3
4-без экзаменов
5-иностранцы (убран в 2017)

Стало:
0 - общий
1 - без вступительных испытаний
2 - вне конкурса
3 - целевой';

COMMENT ON COLUMN ABITURA.N_CK IS 
'Было: Связь с таблицей CK - целевой контракт
Стало: № района откуда ЦК (REGIONAL_CENTRE.N_Centre)';

COMMENT ON COLUMN ABITURA.N_FOUND IS 
'Связь с таблицей Foundatoin - основание зачисления';

COMMENT ON COLUMN ABITURA.EDUCATION IS 
'Образование:
0-Среднее
1-Среднее специальное
2-Незаконченное высшее
3-Высшее
4-Профессионально-техническое';

COMMENT ON COLUMN ABITURA.NOM_ATTEST IS 
'Номер аттестата';

COMMENT ON COLUMN ABITURA.NOM_DIPLOM IS 
'Номер диплома';

COMMENT ON COLUMN ABITURA.STAG_SPEC IS 
'Стаж работы по специальности';

COMMENT ON COLUMN ABITURA.COPY_AT IS 
'Оригинал или копия аттестата
0-оригинал
1-копия';

COMMENT ON COLUMN ABITURA.STAT_AB IS 
'Школы
3-лицей,гимназия
4-село
5-город
6-школа
7-ССУЗ, колледж
8-ВУЗ
9-ПТУ';

COMMENT ON COLUMN ABITURA.WORK_BEFORE IS 
'Работа до поступления';

COMMENT ON COLUMN ABITURA.N_SPEC IS 
'Связь с таблицей SPECIALITY -специальность (из Деканата)';

COMMENT ON COLUMN ABITURA.RUS_BEL IS 
'Русский-белорусский язык
0-русский
1-белорусский';

COMMENT ON COLUMN ABITURA.V_K IS 
'Вне конкурса:
1-Сирота
2-Дети погибших военнослужащих
3-Инвалид 1 или 2 гр.
4-(ЧАЭС ст.18) или (Кубки РБ)
5-(Лица других государств) или (2-ое в/о на 1 курс за оплату)
6- Второе высшее образование на условиях оплаты на 2 и старше курс???';

COMMENT ON COLUMN ABITURA.PRIV IS 
'1 - Выпускники УОР, пед. колледжей
2 - Выпускники профильных учебн. заведений
3 - Стаж практической работы не менее 6 месяцев по специальности
4 - Выпускники ФДП БГУФК
5 - Победители ( I степени ) 3-го этапа респ. олимпиады
6 - Победителя (I ,II, III степени) респ. олимпиады (бел. и русск. яз)
7 - МС РБ, МКМС РБ
8 - Золотая и серебряная медаль
9 - Диплом с отличием проф-тех. образ-я
10 - Диплом с отличием ССУЗ
11 - Свидетельство с отличием о баз. образ-я
12 - Подготов. отд. дневная форма (другое УВО)';

COMMENT ON COLUMN ABITURA.WITHOUT IS 
'Причина по которой без экзаменов
соответствует вкладке ''Без экзаменов'':
1 - Победители (дипломы I, II, III степени) международных олимпиад и республиканской олимпиады по учебным предметам (ТиГ география)
2 - Победители, призеры и участники Олимпийских, Паралимпийских и Дефлимпийских игр, победители и призеры Юношеских Олимпийских игр
3 - Победители и призеры чемпионатов, финалов розыгрышей кубков, первенств мира и Европы, Олимпийских фестивалей молодежи Европы
4 - Победители официальных чемпионатов Республики Беларусь, включенным в программу летних и зимних Олимпийских игр
5 - Победители и призеры чемпионатов, первенств мира и Европы среди инвалидов
6 - Второе в/о на платной основе на 2 и старшие курсы';

COMMENT ON COLUMN ABITURA.N_LANGVICH IS 
'Связь с таблицей LANGVICH
в деканате (иностранный язык)';

COMMENT ON COLUMN ABITURA.LANGV_BALL IS 
'Оценка по иностранному языку';

COMMENT ON COLUMN ABITURA.N_CENTRE IS 
'Связь с таблицей REGIONAL_CENTRE - районного центра (из Деканата)';

COMMENT ON COLUMN ABITURA.PRICE IS 
'Форма обучения:
0-бюджет
1-за оплату';

COMMENT ON COLUMN ABITURA.PASPORT IS 
'Серия и номер паспорта';

COMMENT ON COLUMN ABITURA.PERSONAL_NOMER IS 
'Личный уникальный номер паспорта';

COMMENT ON COLUMN ABITURA.DATE_V IS 
'Дата выдачи документа, удостоверяющего личность';

COMMENT ON COLUMN ABITURA.ORGAN_V IS 
'Кем выдан документ, удостоверяющий личность';

COMMENT ON COLUMN ABITURA.ID_AB_QUEUE IS 
'ID абитуриента из таблици электронной очереди ABITUR_QUEUE';

COMMENT ON COLUMN ABITURA.DIGIT_SIGN IS 
'Подпись';

COMMENT ON COLUMN ABITURA.CATEGORY_AB IS 
'Категория абитуриента:
0 - Беларусь
1 - Иностранцы
2 - СНГ
3 - ДНР/ЛНР';

COMMENT ON COLUMN ABITURA.TERM_EDU IS 
'0 - полный
1 - сокращённый 2 курс
2 - сокращённый 3 курс
3 - 1 курс (ВО)
4 - 2 курс (ВО)
5 - 3 курс (ВО)';

COMMENT ON COLUMN ABITURA.CATEGORY_IF IS 
'Условия поступления для СНГ и ДНР/ЛНР:
0 - РБ
1 - ИГ';

COMMENT ON COLUMN ABITURA.ADDRESS_PAPA IS 
'Адрес проживания отца';

COMMENT ON COLUMN ABITURA.ADDRESS_MAMA IS 
'Адрес проживания матери';

COMMENT ON COLUMN ABITURA.CITIZENSHIP IS 
'Граждпнство - ID страны из таблицы COUNTRIES (деканат)';

COMMENT ON COLUMN ABITURA.TOWN_VILLAGE IS 
'0 - город или посёлок городского типа
1 - сельский населённый пункт';

COMMENT ON COLUMN ABITURA.TYPE_SCHOOL IS 
'0 - УСО
1 - УССО
2 - ПТУ
3 - лицея, гимназии
4 - УВО';

COMMENT ON COLUMN ABITURA.ID_TYPE IS 
'Тип документа, удостоверяющего личность';

COMMENT ON COLUMN ABITURA.DATE_OK IS 
'Дата окончания срока действия документа, удоставеряющего личность';

COMMENT ON COLUMN ABITURA.DISABLED IS 
'Группа инвалидности
1- 1 группа слух
2- 1 группа зрение
3- 1 группа ОДА
4- 2 группа слух
5- 2 группа зрение
6- 2 группа ОДА
7- 3 группа слух
8- 3 группа зрение
9- 3 группа ОДА';

COMMENT ON COLUMN ABITURA.STREET IS 
'ID улицы из таблицы STREET базы Dekanat';

COMMENT ON COLUMN ABITURA.HOUSE IS 
'Дом';

COMMENT ON COLUMN ABITURA.FLAT IS 
'Квартира';

COMMENT ON COLUMN ABITURA.POSTCODE IS 
'Индекс';

COMMENT ON COLUMN ABITUR_LOGBOOK.ID_LOG IS 
'ID';

COMMENT ON COLUMN ABITUR_LOGBOOK.NOM_DELA IS 
'Номер дела';

COMMENT ON COLUMN ABITUR_LOGBOOK.NOMER_AB IS 
'Номер абитуриента';

COMMENT ON COLUMN ABITUR_LOGBOOK.DATE_IN IS 
'Дата приёма документов';

COMMENT ON COLUMN ABITUR_LOGBOOK.VID_EDU IS 
'Форма обучения';

COMMENT ON COLUMN ABITUR_LOGBOOK.PRICE IS 
'Форма оплаты';

COMMENT ON COLUMN ABITUR_LOGBOOK.TERM_EDU IS 
'Полный (1 курс)/сокращённый (2 и старше)';

COMMENT ON COLUMN ABITUR_LOGBOOK.ADDRESS_BEFORE IS 
'Адрес';

COMMENT ON COLUMN ABITUR_LOGBOOK.N_CK IS 
'№ района откуда ЦК (REGIONAL_CENTRE.N_Centre), -1 - нет';

COMMENT ON COLUMN ABITUR_LOGBOOK.DATE_OUT IS 
'Дата возврата документов';

COMMENT ON COLUMN ABITUR_LOGBOOK.N_SPECIALIZ IS 
'Направление специализации';

COMMENT ON COLUMN ABITUR_LOGBOOK.N_FAC IS 
'Факультет';

COMMENT ON COLUMN ABITUR_LOGBOOK.KONKURS IS 
'0 - общий
1 - без вступительных испытаний
2 - вне конкурса
3 - целевой';

COMMENT ON COLUMN ABITUR_LOGBOOK.CATEGORY IS 
'Связь с таблицей CATEGORY';

COMMENT ON COLUMN ABITUR_PRIVILEG.NOMER_AB IS 
'Номер абитуриента';

COMMENT ON COLUMN ABITUR_PRIVILEG.N_PRIV IS 
'0 - БВИ
1 - ВК
2 - другие';

COMMENT ON COLUMN ABITUR_PRIVILEG.SEL_PRIV IS 
'№ переключателя привелегии
связь с таблицей Privelege';

COMMENT ON COLUMN ABITUR_PRIVILEG.DAT_PRIV IS 
'Значение переключателя привелегии';

COMMENT ON COLUMN ABITUR_QUEUE.STATUS_QUEUE IS 
'Статус в очереди
100 - сфотографирован, введены имя, фамилия и отчество
101 - с фото и подписью в очередь к столу справок
102 - в очередь на факультеты после стола справок
103 - вызван
104 - декан разрешил сохраненить в ABITURA (должен увидеть оператор)
105 - сохранён в ABITURA
201 - забирать документы - в очередь после стола справок
202 - декан разрешил забрать документы (должен увидеть оператор)
203 - забрал документы - стол справок видит
299 - прошёл регистрацию online
300 - прошёл регистрацию online, сфотографирован, введены имя, фамилия и отчество
301 - прошёл регистрацию online, с фото и подписью в очередь к столу справок
302 - прошёл регистрацию online, в очередь на факультеты после стола справок
304 - прошёл регистрацию online, декан разрешил сохраненить в ABITURA (должен увидеть оператор)';

COMMENT ON COLUMN ABITUR_QUEUE.PHOTO IS 
'Фото';

COMMENT ON COLUMN ABITUR_QUEUE.DIGIT_SIGN IS 
'Подпись';

COMMENT ON COLUMN ABITUR_QUEUE.N_FAC IS 
'Номер факультета';

COMMENT ON COLUMN ABITUR_QUEUE.NOMER_QUEUE IS 
'Номер в очереди';

COMMENT ON COLUMN ABITUR_QUEUE.TIME_QUEUE IS 
'Время постановки в очередь';

COMMENT ON COLUMN ABITUR_QUEUE.N_SPECIALIZ IS 
'Направление специализации';

COMMENT ON COLUMN ABITUR_QUEUE.N_SPEC IS 
'Специальность';

COMMENT ON COLUMN ABITUR_QUEUE.VID_EDU IS 
'Форма обучения:
0 - дневная
1 - заочная';

COMMENT ON COLUMN ABITUR_QUEUE.CATEGORY_AB IS 
'Категория абитуриента:
0 - Беларусь
1 - Иностранцы
2 - СНГ
3 - ДНР/ЛНР';

COMMENT ON COLUMN ABITUR_QUEUE.CATEGORY_IF IS 
'Условия поступления для СНГ и ДНР/ЛНР:
0 - РБ
1 - ИГ';

COMMENT ON COLUMN ABITUR_QUEUE.CATEGORY_EDU IS 
'Образование:
0 - среднее
1 - среднее специальное
2 - незаконченное высшее
3 - высшее
4 - профессионально-техническое';

COMMENT ON COLUMN ABITUR_QUEUE.TERM_EDU IS 
'0 - полный
1 - сокращённый  2 курс (ССО)
2 - сокращённый  3 курс (ССО)
3 - 1 курс (ВО)
4 - 2 курс (ВО)
5 - 3 курс (ВО)';

COMMENT ON COLUMN ABITUR_QUEUE.PRICE IS 
'Форма оплаты:
0 - бюджет
1 - за оплату';

COMMENT ON COLUMN ABITUR_QUEUE.KONKURS IS 
'0 - общий
1 - без вступительных испытаний
2 - вне конкурса
3 - целевой';

COMMENT ON COLUMN ABITUR_QUEUE.DATE_TIME_ID IS 
'Дата и время выбранные онлайн';

COMMENT ON COLUMN AB_P.N_AB_P IS 
'Инкремент таблицы по переподаче документов';

COMMENT ON COLUMN AB_P.NOMER_AB IS 
'Номер абитуриента';

COMMENT ON COLUMN AB_P.PRICE_DO IS 
'Форма оплаты до переподачи';

COMMENT ON COLUMN AB_P.PRICE_PO IS 
'Форма оплаты после переподачи';

COMMENT ON COLUMN AB_P.VID_EDU_DO IS 
'Вид обучения до переподачи';

COMMENT ON COLUMN AB_P.VID_EDU_PO IS 
'Вид обучения после переподачи';

COMMENT ON COLUMN AB_P.NOM_DELA_DO IS 
'Номер дела до переподачи';

COMMENT ON COLUMN AB_P.NOM_DELA_PO IS 
'Номер дела после переподачи';

COMMENT ON COLUMN AB_P.NOM_GROUP_DO IS 
'Номер группы до';

COMMENT ON COLUMN AB_P.NOM_GROUP_PO IS 
'Номер группы после...';

COMMENT ON COLUMN AB_P.N_SPECIALIZ_DO IS 
'Направление специальности (специализация) до...';

COMMENT ON COLUMN AB_P.N_SPECIALIZ_PO IS 
'Направление специальности (специализация) после...';

COMMENT ON COLUMN AB_P.N_SPEC_DO IS 
'Специальность до...';

COMMENT ON COLUMN AB_P.N_SPEC_PO IS 
'Специальность после...';

COMMENT ON COLUMN AB_P.N_CK IS 
'Был ли целевой контракт';

COMMENT ON COLUMN AB_P.KONKURS_DO IS 
'Конкурс до...';

COMMENT ON COLUMN AB_P.KONKURS_PO IS 
'Конкурс после....';

COMMENT ON COLUMN AB_P.DATE_P IS 
'Дата переподачи документов';

COMMENT ON COLUMN BLOCK_EDIT.ADD_ABITUR IS 
'Кнопка добавить нового абитуриента (AddBtBtn)
0 - доступна
1- не доступна';

COMMENT ON COLUMN BLOCK_EDIT.TOOK_DOC1 IS 
'Забрал документы до окончания приёма документов (TookDocBtBtn1)
0 - доступна
1- не доступна';

COMMENT ON COLUMN BLOCK_EDIT.TOOK_DOC2 IS 
'Забрал документы во время экзаменов (TookDocBtBtn2)
0 - доступна
1- не доступна';

COMMENT ON COLUMN BLOCK_EDIT.RE_INSIDE_FAC IS 
'Переподача документов внутри факультета (ReInsideFacBtBtn)
0 - доступна
1- не доступна';

COMMENT ON COLUMN BLOCK_EDIT.RESTOR_LIST IS 
'Восстановить в списке (RestorlistBtBtn)
0 - доступна
1- не доступна';

COMMENT ON COLUMN BLOCK_EDIT.BLOCK IS 
'запрет внесения изменений
0 - разрешено
1 - запрещено';

COMMENT ON COLUMN BLOCK_EDIT.PEREPODACHA IS 
'запрет на переподачу документов
0 - разрешено
1 - запрещено';

COMMENT ON COLUMN BLOCK_EDIT.NOTE IS 
'изменение основных данных';

COMMENT ON COLUMN CALL_ABITURIENT.N_CALL_ABITURIENT IS 
'Номер очереди вызываемого абитуриента';

COMMENT ON COLUMN CALL_ABITURIENT.P_CALL IS 
'Признак вызова:
0 - работа
1 - вызов';

COMMENT ON COLUMN CALL_ABITURIENT.P_SOUND_01 IS 
'Признак голосового вызова 1 табло:
0 - нет
1 - голос';

COMMENT ON COLUMN CALL_ABITURIENT.P_SOUND_02 IS 
'Признак голосового вызова 2 табло:
0 - нет
1 - голос';

COMMENT ON COLUMN CALL_ABITURIENT.P_SOUND_03 IS 
'Признак голосового вызова 3 табло:
0 - нет
1 - голос';

COMMENT ON COLUMN CK.N_CENTRE IS 
'Инкремент района';

COMMENT ON COLUMN CK.CUSTOMER IS 
'0 - ОФК
1 - МО';

COMMENT ON COLUMN CK.TERM_EDUC IS 
'0 - полный срок
1 - сокращённый';

COMMENT ON COLUMN CK_PLAN.N_SPECIALIZ IS 
'Связь с таблицей SPECIALIZ Деканат';

COMMENT ON COLUMN CONTROL_EXERC.N_FAC IS 
'Связь с таблицей Faculty (из Деканата)-факультеты
1-СИиЕ
2-МВС
3-ОФКиТ
4-ИТ';

COMMENT ON COLUMN CONTROL_EXERC.N_SPECIALIZ IS 
'Связь с таблицей SPECIALIZ - специализация (из Деканата)';

COMMENT ON COLUMN CONTROL_EXERC.POL IS 
'Пол - связь с таблицей Abitura, поле POL';

COMMENT ON COLUMN CONTROL_EXERC.NUM_EXERC_GRP IS 
'Номер группы КУ из соответствующей таблицы КУ';

COMMENT ON COLUMN CONTROL_EXERC.ID_EXERC IS 
'Номер КУ из таблицы EXERCISE';

COMMENT ON COLUMN EDUCATION.N_EDU_DOC IS 
'Из таблицы EDU_DOCUMENT
1-Аттестат об общем среднем образовании
2-Диплом о профессионально-техническом образовании
3-Диплом о среднем специальном образовании';

COMMENT ON COLUMN EXAMEN.NOM_BALL IS 
'выбранная радиокнопка балла - на 1 больше балла???
12 - не явился';

COMMENT ON COLUMN EXAMEN.BALL IS 
'балл';

COMMENT ON COLUMN EXAMEN.STATUS_BALL IS 
'статус полученной оценки:
0 - для оценки за экзамен
1 - для централизованного тестирования';

COMMENT ON COLUMN EXERCISE.ID_EXERC IS 
'ID контрольного упражнения';

COMMENT ON COLUMN EXERCISE.NAME_EXERC IS 
'Наименование контрольного упражнения';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.ABITUR_ID IS 
'Инкремент';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.FAM IS 
'Фамилия';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.NAME IS 
'Имя';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.OTCH IS 
'Отчество';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.PHONE IS 
'Телефон';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.DATE_BIRD IS 
'Дата рождения';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.POL IS 
'Пол';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.ADDRESS_REG IS 
'Адрес регистрации';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.ADDRESS_LIFE IS 
'Адрес проживания';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.MIDDLE_BALL IS 
'Средний балл аттестата';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.NAME_EDU_MIDDLE IS 
'Название учреждения среднего образования (где получил среднее образование)';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.NAME_EDU_SPEC IS 
'Название учреждения средне-специального образования (сверх среднего)';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.WHERE_EDUC_MIDDLE IS 
'Где окончил среднее образование';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.WHERE_EDU_SPEC IS 
'Где окончил средне специальное';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.WHEN_EDU_MIDDLE IS 
'Когда окончил среднее образование (год)';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.WHEN_EDU_SPEC IS 
'Когда окончил средне-специальное обр. (год)';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.VID_EDU IS 
'Вид обучения:
0-дневное
1-заочное';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.FIO_MOM IS 
'ФИО мама';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.FIO_DAD IS 
'ФИО папа';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.ADDRESS_MOM IS 
'Адрес проживания матери';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.ADDRESS_DAD IS 
'Адрес проживания отца';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.GRAGDAN IS 
'Связь с таблицей Decanat.Countries_OCRB';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_REGION IS 
'Связь с табл. Decanat.Region';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_DISTRICT IS 
'Связь с таблицей Decanat.District';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_TYPE_LOCALITY IS 
'Связь с таблицей Decanat.Type_Locality';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_LOCALITY IS 
'Связь с таблицей Decanat.Locality';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_TYPE_STREET IS 
'Связь с таблицей Decanat.Type_Street';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_STREET IS 
'Связь с таблицей Decanat.Street';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.HOUSE IS 
'Дом';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.FLAT IS 
'Квартира';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.POSTCODE IS 
'Индекс';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_FAC IS 
'Связь с таблицей Decanat.Faculty';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_SPECIALIZ IS 
'Связь с таблицей Decanat.SPECIALIZ';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_VID_SPORT IS 
'Связь с таблицей Decanat.Vid_Sport';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_SPORT_CATEGORY IS 
'Связь с таблицей Decanat.Category';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.WORK_BEFORE IS 
'Работа до поступления';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.STAGE IS 
'Стаж работы';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_LANGUAGE IS 
'Связь с таблицей Decanat.LANGVICH';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.N_DOCUM_TYPE IS 
'Тип документа, удостоверяющего личность';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.PASPORT IS 
'Серия и номер паспорта';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.PERSONAL_NUMBER IS 
'Личный уникальный номер паспорта';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.DATE_V IS 
'Дата выдачи документа, удостоверяющего личность';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.DATE_OK IS 
'Дата окончания срока действия документа, удоставеряющего личность';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.ORGAN_V IS 
'Кем выдан документ, удостоверяющий личность';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.CATEGORY_AB IS 
'Категория абитуриента:
0 - Беларусь
1 - Иностранцы
2 - СНГ
3 - ДНР/ЛНР';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.TOWN_VILLAGE IS 
'0 - город или посёлок городского типа
1 - сельский населённый пункт';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.TYPE_SCHOOL IS 
'0 - УСО
1 - УССО
2 - ПТУ
3 - лицея, гимназии
4 - УВО';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.VERIFICATION IS 
'2 - прошел первичную проверку
3 - в процессе обработки
4 - сохранен в abitura и abitur_queue
5 - не допущен
9 - неполная информация';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.NUMBER_ATEEST_MIDDLE IS 
'Номер атестата';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.NUMBER_DIPLOM_SPEC IS 
'Номер диплома';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.EMAIL IS 
'EMail абитуриента';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.EDUCATION IS 
'Образование:
0-Среднее
1-Среднее специальное
2-Незаконченное высшее
3-Высшее
4-Профессионально-техническое';

COMMENT ON COLUMN INTERMEDIATE_ABITUR.REJECTION_REASON IS 
'Обоснование причини недопуска абитуриента';

COMMENT ON COLUMN KOL_PLACE.TEXT IS 
'БЫЛО:
0 - город
1 - село
2 - целевые (и не использовалось)
3 - за оплату

СТАЛО:
0 - полная форма обучения
1 - сокращённая форма обучения';

COMMENT ON COLUMN KOL_PLACE.PRICE IS 
'Оплата:
0 - бюджет
1 - на платной основе';

COMMENT ON COLUMN KOL_PLACE.RECRUIT IS 
'0 - приём не проводится
1 - приём проводится';

COMMENT ON COLUMN ORDER_SPECIALIZ.N_OR_SPEC IS 
'Инкремент';

COMMENT ON COLUMN ORDER_SPECIALIZ.N_SPECIALIZ IS 
'Номер специализации';

COMMENT ON COLUMN ORDER_SPECIALIZ.ORDER_SP IS 
'Порядковый номер для показа';

COMMENT ON COLUMN PRIVELEG_ARRAY.ID_PRIV IS 
'ID привелегии (таблица PRIVELEGE)';

COMMENT ON COLUMN PRIVELEG_ARRAY.N_ITEM IS 
'номер пункта детали привелегии';

COMMENT ON COLUMN PRIVELEG_ARRAY.ID_DET IS 
'ID детали привелегии (таблица PRIVELEG_DELAILS)';

COMMENT ON COLUMN PRIVILEGE.SHORT_NAME IS 
'Короткое имя';

COMMENT ON COLUMN PRIVILEG_LOG.ID_LOG IS 
'ID из ABITUR_LOGBOOK';

COMMENT ON COLUMN PRIVILEG_LOG.N_PRIV IS 
'0 - БВИ, 1 - ВК, 3 - другие';

COMMENT ON COLUMN PRIVILEG_LOG.SEL_PRIV IS 
'№ переключателя привилегии';

COMMENT ON COLUMN PRIVILEG_LOG.DAT_PRIV IS 
'Значение переключателя привилегии';

COMMENT ON COLUMN SELECTION_COMMITTEE.POST IS 
'Должность';

COMMENT ON COLUMN SELECTION_COMMITTEE.SIGNATURE IS 
'Подпись';

COMMENT ON COLUMN SEL_EXERCIZE.ID_SEL_EXERC IS 
'ID';

COMMENT ON COLUMN SEL_EXERCIZE.NOMER_AB IS 
'Номер абонента из табл. ABITURA';

COMMENT ON COLUMN SEL_EXERCIZE.NUM_EXERC_GRP IS 
'Номер блока КУ';

COMMENT ON COLUMN SEL_EXERCIZE.ID_EXERC IS 
'ID КУ из табл. EXERCISE';

COMMENT ON COLUMN SERTIFICAT.PRICE IS 
'0-обязательное
1-платное';

COMMENT ON COLUMN SERTIFICAT.YEAR_S IS 
'Год сдачи ЦТ';

COMMENT ON COLUMN SHKALA.INC_SHKALA IS 
'Инкремент таблицы';

COMMENT ON COLUMN SHKALA.N_PREDMET IS 
'Связь с таблицей Predmet';

COMMENT ON COLUMN SHKALA.BALL_SERTIFIKAT IS 
'Балл сертификата';

COMMENT ON COLUMN SHKALA.BALL IS 
'Балл полученный в результате
если 2.00 - то это отрицательный балл';

COMMENT ON COLUMN SHKALA.RUS_BEL IS 
'Определение предмета
0-русский
1-белорусский
2-остальные предметы';

