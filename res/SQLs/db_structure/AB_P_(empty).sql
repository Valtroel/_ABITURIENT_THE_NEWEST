CREATE GENERATOR
    GEN_AB_P_ID;
CREATE GENERATOR
    IBE$LOG_TABLES_GEN;

CREATE TABLE
    AB_P
    (
        N_AB_P          INTEGER,
        NOMER_AB        INTEGER,
        PRICE_DO        SMALLINT,
        PRICE_PO        SMALLINT,
        VID_EDU_DO      SMALLINT,
        VID_EDU_PO      SMALLINT,
        NOM_DELA_DO     SMALLINT,
        NOM_DELA_PO     SMALLINT,
        NOM_GROUP_DO    VARCHAR(5),
        NOM_GROUP_PO    VARCHAR(5),
        N_SPECIALIZ_DO  SMALLINT,
        N_SPECIALIZ_PO  SMALLINT,
        N_SPEC_DO       SMALLINT,
        N_SPEC_PO       SMALLINT,
        N_CK            SMALLINT,
        KONKURS_DO      SMALLINT,
        KONKURS_PO      SMALLINT,
        DATE_P          DATE
    );




/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE
    AB_P
ADD
    CONSTRAINT
        PK_AB_P
    PRIMARY KEY
        (N_AB_P);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX
    AB_P_NOMER_AB
ON
    AB_P
    (
        NOMER_AB
    );


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: AB_P_BI */
CREATE OR ALTER TRIGGER AB_P_BI FOR AB_P
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.N_AB_P IS NULL) THEN
    NEW.N_AB_P = GEN_ID(GEN_AB_P_ID,1);
END
^


/* Trigger: IBE$AB_P_AI */
CREATE OR ALTER TRIGGER IBE$AB_P_AI FOR AB_P
ACTIVE AFTER INSERT POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'AB_P', 'I', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'N_AB_P', NEW.N_AB_P);
 
  IF (NOT (NEW.N_AB_P IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_AB_P', NULL, NEW.N_AB_P);
  
  IF (NOT (NEW.NOMER_AB IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOMER_AB', NULL, NEW.NOMER_AB);
  
  IF (NOT (NEW.PRICE_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PRICE_DO', NULL, NEW.PRICE_DO);
  
  IF (NOT (NEW.PRICE_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PRICE_PO', NULL, NEW.PRICE_PO);
  
  IF (NOT (NEW.VID_EDU_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'VID_EDU_DO', NULL, NEW.VID_EDU_DO);
  
  IF (NOT (NEW.VID_EDU_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'VID_EDU_PO', NULL, NEW.VID_EDU_PO);
  
  IF (NOT (NEW.NOM_DELA_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_DELA_DO', NULL, NEW.NOM_DELA_DO);
  
  IF (NOT (NEW.NOM_DELA_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_DELA_PO', NULL, NEW.NOM_DELA_PO);
  
  IF (NOT (NEW.NOM_GROUP_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_GROUP_DO', NULL, NEW.NOM_GROUP_DO);
  
  IF (NOT (NEW.NOM_GROUP_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOM_GROUP_PO', NULL, NEW.NOM_GROUP_PO);
  
  IF (NOT (NEW.N_SPECIALIZ_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPECIALIZ_DO', NULL, NEW.N_SPECIALIZ_DO);
  
  IF (NOT (NEW.N_SPECIALIZ_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPECIALIZ_PO', NULL, NEW.N_SPECIALIZ_PO);
  
  IF (NOT (NEW.N_SPEC_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPEC_DO', NULL, NEW.N_SPEC_DO);
  
  IF (NOT (NEW.N_SPEC_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPEC_PO', NULL, NEW.N_SPEC_PO);
  
  IF (NOT (NEW.N_CK IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_CK', NULL, NEW.N_CK);
  
  IF (NOT (NEW.KONKURS_DO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'KONKURS_DO', NULL, NEW.KONKURS_DO);
  
  IF (NOT (NEW.KONKURS_PO IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'KONKURS_PO', NULL, NEW.KONKURS_PO);
  
  IF (NOT (NEW.DATE_P IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'DATE_P', NULL, NEW.DATE_P);
 
  
END
^

SET TERM ; ^



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

COMMENT ON COLUMN AB_P.N_AB_P IS 
'Инкремент таблицы по переподаче документов';

COMMENT ON COLUMN AB_P.NOMER_AB IS 
'Номер абитуриента';

COMMENT ON COLUMN AB_P.PRICE_DO IS 
'Форма оплаты до переподачи';

COMMENT ON COLUMN AB_P.PRICE_PO IS 
'Форма оплаты после переподачи';

COMMENT ON COLUMN AB_P.VID_EDU_DO IS 
'Вид обучения до переподачи';

COMMENT ON COLUMN AB_P.VID_EDU_PO IS 
'Вид обучения после переподачи';

COMMENT ON COLUMN AB_P.NOM_DELA_DO IS 
'Номер дела до переподачи';

COMMENT ON COLUMN AB_P.NOM_DELA_PO IS 
'Номер дела после переподачи';

COMMENT ON COLUMN AB_P.NOM_GROUP_DO IS 
'Номер группы до';

COMMENT ON COLUMN AB_P.NOM_GROUP_PO IS 
'Номер группы после...';

COMMENT ON COLUMN AB_P.N_SPECIALIZ_DO IS 
'Направление специальности (специализация) до...';

COMMENT ON COLUMN AB_P.N_SPECIALIZ_PO IS 
'Направление специальности (специализация) после...';

COMMENT ON COLUMN AB_P.N_SPEC_DO IS 
'Специальность до...';

COMMENT ON COLUMN AB_P.N_SPEC_PO IS 
'Специальность после...';

COMMENT ON COLUMN AB_P.N_CK IS 
'Был ли целевой контракт';

COMMENT ON COLUMN AB_P.KONKURS_DO IS 
'Конкурс до...';

COMMENT ON COLUMN AB_P.KONKURS_PO IS 
'Конкурс после....';

COMMENT ON COLUMN AB_P.DATE_P IS 
'Дата переподачи документов';



/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT ALL ON AB_P TO ABITUR1;
GRANT ALL ON AB_P TO ABITUR2;
GRANT ALL ON AB_P TO ABITUR3;
GRANT ALL ON AB_P TO ABITUR4;
GRANT ALL ON AB_P TO ABITURA;
GRANT ALL ON AB_P TO ALEXANDER_GONCHAROV;
GRANT ALL ON AB_P TO ASU;
GRANT ALL ON AB_P TO ASU1;
GRANT ALL ON AB_P TO ASU2;
GRANT ALL ON AB_P TO ASU3;
GRANT ALL ON AB_P TO ASU4;
GRANT ALL ON AB_P TO DEVELOPER;
GRANT ALL ON AB_P TO DEVELOPER2;
GRANT ALL ON AB_P TO IT1;
GRANT ALL ON AB_P TO IT2;
GRANT ALL ON AB_P TO IT3;
GRANT ALL ON AB_P TO IVANOVA_A;
GRANT ALL ON AB_P TO MVS1;
GRANT ALL ON AB_P TO MVS2;
GRANT ALL ON AB_P TO MVS3;
GRANT ALL ON AB_P TO MVS4;
GRANT ALL ON AB_P TO OFKIT1;
GRANT ALL ON AB_P TO OFKIT2;
GRANT ALL ON AB_P TO OFKIT3;
GRANT ALL ON AB_P TO OFKIT4;
GRANT ALL ON AB_P TO OKSANA;
GRANT ALL ON AB_P TO PK;
GRANT ALL ON AB_P TO PK_IT;
GRANT ALL ON AB_P TO PK_IT1;
GRANT ALL ON AB_P TO PK_IT2;
GRANT ALL ON AB_P TO PK_IT3;
GRANT ALL ON AB_P TO PK_IT4;
GRANT ALL ON AB_P TO PK_IT5;
GRANT ALL ON AB_P TO PK_MSTIG1;
GRANT ALL ON AB_P TO PK_MSTIG2;
GRANT ALL ON AB_P TO PK_MSTIG3;
GRANT ALL ON AB_P TO PK_MSTIG4;
GRANT ALL ON AB_P TO PK_MSTIGP1;
GRANT ALL ON AB_P TO PK_MSTIGP2;
GRANT ALL ON AB_P TO PK_MSTIG_1;
GRANT ALL ON AB_P TO PK_MSTIG_2;
GRANT ALL ON AB_P TO PK_MSTIG_3;
GRANT ALL ON AB_P TO PK_MSTIG_4;
GRANT ALL ON AB_P TO PK_MSTIG_P1;
GRANT ALL ON AB_P TO PK_MSTIG_P2;
GRANT ALL ON AB_P TO PK_MVS;
GRANT ALL ON AB_P TO PK_MVS1;
GRANT ALL ON AB_P TO PK_MVS2;
GRANT ALL ON AB_P TO PK_MVS3;
GRANT ALL ON AB_P TO PK_MVS4;
GRANT ALL ON AB_P TO PK_MVS5;
GRANT ALL ON AB_P TO PK_MVSP1;
GRANT ALL ON AB_P TO PK_MVSP2;
GRANT ALL ON AB_P TO PK_MVS_1;
GRANT ALL ON AB_P TO PK_MVS_2;
GRANT ALL ON AB_P TO PK_MVS_3;
GRANT ALL ON AB_P TO PK_MVS_4;
GRANT ALL ON AB_P TO PK_MVS_P1;
GRANT ALL ON AB_P TO PK_MVS_P2;
GRANT ALL ON AB_P TO PK_OFKIT;
GRANT ALL ON AB_P TO PK_OFKIT1;
GRANT ALL ON AB_P TO PK_OFKIT2;
GRANT ALL ON AB_P TO PK_OFKIT3;
GRANT ALL ON AB_P TO PK_OFKIT4;
GRANT ALL ON AB_P TO PK_OFKIT5;
GRANT ALL ON AB_P TO PK_OFKITP1;
GRANT ALL ON AB_P TO PK_OFKITP2;
GRANT ALL ON AB_P TO PK_OFK_1;
GRANT ALL ON AB_P TO PK_OFK_2;
GRANT ALL ON AB_P TO PK_OFK_3;
GRANT ALL ON AB_P TO PK_OFK_4;
GRANT ALL ON AB_P TO PK_OFK_P1;
GRANT ALL ON AB_P TO PK_OFK_P2;
GRANT ALL ON AB_P TO PK_OTV1;
GRANT ALL ON AB_P TO PK_OTV2;
GRANT ALL ON AB_P TO PK_OTV3;
GRANT ALL ON AB_P TO PK_OTV4;
GRANT ALL ON AB_P TO PK_SIIE;
GRANT ALL ON AB_P TO PK_SIIE1;
GRANT ALL ON AB_P TO PK_SIIE2;
GRANT ALL ON AB_P TO PK_SIIE3;
GRANT ALL ON AB_P TO PK_SIIE4;
GRANT ALL ON AB_P TO PK_SIIE5;
GRANT ALL ON AB_P TO PK_SIIEP1;
GRANT ALL ON AB_P TO PK_SIIEP2;
GRANT ALL ON AB_P TO PK_SIIEP3;
GRANT ALL ON AB_P TO PK_SIIE_1;
GRANT ALL ON AB_P TO PK_SIIE_2;
GRANT ALL ON AB_P TO PK_SIIE_3;
GRANT ALL ON AB_P TO PK_SIIE_4;
GRANT ALL ON AB_P TO PK_SIIE_P1;
GRANT ALL ON AB_P TO PK_SIIE_P2;
GRANT ALL ON AB_P TO SIIE1;
GRANT ALL ON AB_P TO SIIE2;
GRANT ALL ON AB_P TO SIIE3;
GRANT ALL ON AB_P TO SIIE4;
GRANT ALL ON AB_P TO UO_LAB;
GRANT ALL ON AB_P TO UO_N;
GRANT ALL ON AB_P TO UO_Z;

/* Privileges of triggers */
GRANT UPDATE, REFERENCES ON AB_P TO TRIGGER IBE$AB_P_AI;
GRANT INSERT ON IBE$LOG_FIELDS TO TRIGGER IBE$AB_P_AI;
GRANT INSERT ON IBE$LOG_KEYS TO TRIGGER IBE$AB_P_AI;
GRANT INSERT ON IBE$LOG_TABLES TO TRIGGER IBE$AB_P_AI;