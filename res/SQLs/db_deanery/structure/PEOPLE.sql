/******************************************************************************/
/***               Generated by IBExpert 01.07.2022 14:48:30                ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/


/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/


CREATE GENERATOR IBE$LOG_TABLES_GEN;

CREATE TABLE PEOPLE (
    NOMER             INTEGER,
    N_ZACHET          VARCHAR(10),
    FAM               VARCHAR(30) COLLATE PXW_CYRL,
    NAME              VARCHAR(30) COLLATE PXW_CYRL,
    OTCH              VARCHAR(30) COLLATE PXW_CYRL,
    STATUS_KURS       INTEGER,
    POL               CHAR(1),
    PLACE_R           VARCHAR(60) COLLATE PXW_CYRL,
    NAZ               VARCHAR(15) COLLATE PXW_CYRL,
    PAPA              VARCHAR(50) COLLATE PXW_CYRL,
    MAMA              VARCHAR(50) COLLATE PXW_CYRL,
    MARIAGE           SMALLINT,
    N_CHILD           SMALLINT,
    EDUCATION         SMALLINT,
    ARMY              SMALLINT,
    SCHOLARSHIP       FLOAT,
    HOSTEL            SMALLINT,
    WORK_PAPA         VARCHAR(70) COLLATE PXW_CYRL,
    WORK_MAMA         VARCHAR(70) COLLATE PXW_CYRL,
    NAME_EDUC         VARCHAR(150) COLLATE PXW_CYRL,
    WHEN_EDUC         SMALLINT,
    WHERE_EDUC        VARCHAR(100) COLLATE PXW_CYRL,
    MIDDLE_B          DOUBLE PRECISION,
    N_VID_SPORT       SMALLINT,
    N_DELA            SMALLINT,
    VID_EDU           SMALLINT,
    N_FAC             SMALLINT,
    KURS              SMALLINT,
    N_SPEC            SMALLINT,
    N_SPECIALIZ       SMALLINT,
    N_PRIKAZ_KURS     SMALLINT,
    EDU_WORK          VARCHAR(25),
    D_PRIKAZ_KURS     DATE,
    N_FOUND           SMALLINT,
    N_PRIKAZ_INCLUDE  SMALLINT,
    D_PRIKAZ_INCLUDE  DATE,
    N_GROUP           CHAR(3) COLLATE PXW_CYRL,
    STATUS_PEOPLE     SMALLINT DEFAULT 1,
    INC_GROUP         SMALLINT,
    WORK_BEFORE       VARCHAR(100) COLLATE PXW_CYRL,
    N_CENTRE          INTEGER,
    ADDRESS_BEFORE    VARCHAR(100) COLLATE PXW_CYRL,
    CITIZENSHIP       INTEGER,
    GRAGDAN           VARCHAR(50) COLLATE PXW_CYRL,
    N_LOCALITY        INTEGER,
    ADDRESS           VARCHAR(100) COLLATE PXW_CYRL,
    ADDRESS_LIFE      VARCHAR(200) COLLATE PXW_CYRL,
    DATA_R            DATE,
    F_OLD             VARCHAR(30) COLLATE PXW_CYRL,
    PHONE             VARCHAR(30) COLLATE PXW_CYRL,
    VID_EDU_INCLUDE   SMALLINT,
    N_FOUND_INCLUDE   SMALLINT,
    RASPREDELENIE     SMALLINT,
    N_DOGOVOR         VARCHAR(20) COLLATE PXW_CYRL,
    CONFIRM_RASPRED   SMALLINT,
    ADDRESS_POSLE     VARCHAR(100) COLLATE PXW_CYRL,
    PHONE_POSLE       VARCHAR(100) COLLATE PXW_CYRL,
    PASPORT           VARCHAR(150) COLLATE PXW_CYRL,
    PERSONAL_NOMER    VARCHAR(14) COLLATE PXW_CYRL,
    D_INCLUDE         DATE,
    MOODLE_PASSWORD   VARCHAR(24) DEFAULT "NhgeCQ3t-6o7EiA_4z1nm4Hs",
    ADDRESS_PAPA      VARCHAR(50),
    ADDRESS_MAMA      VARCHAR(50),
    PHOTO             BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    DIGIT_SIGN        BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    N_ROOM            INTEGER,
    DATE_END          DATE,
    RESERVE           SMALLINT DEFAULT 0 NOT NULL,
    FAM_ENG           VARCHAR(30),
    NAME_ENG          VARCHAR(30),
    ID_STREET         INTEGER,
    HOUSE             VARCHAR(10),
    FLAT              SMALLINT,
    POSTCODE          INTEGER,
    NUMBER            INTEGER,
    BANK_PASS         SMALLINT,
    N_ADD_AGREE       SMALLINT
);




/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE PEOPLE ADD PRIMARY KEY (NOMER);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE PEOPLE ADD FOREIGN KEY (N_VID_SPORT) REFERENCES VID_SPORT (N_VID_SPORT);
ALTER TABLE PEOPLE ADD CONSTRAINT N_ROOM FOREIGN KEY (N_ROOM) REFERENCES REGISTRATION (N_ROOM);
ALTER TABLE PEOPLE ADD CONSTRAINT PO_FAC FOREIGN KEY (N_FAC) REFERENCES FACULTY (N_FAC);
ALTER TABLE PEOPLE ADD CONSTRAINT PO_FOUND FOREIGN KEY (N_FOUND) REFERENCES FOUNDATION (N_FOUND);
ALTER TABLE PEOPLE ADD CONSTRAINT PO_SPEC FOREIGN KEY (N_SPEC) REFERENCES SPECIALITY (N_SPEC);
ALTER TABLE PEOPLE ADD CONSTRAINT PO_SPECIALIZ FOREIGN KEY (N_SPECIALIZ) REFERENCES SPECIALIZ (N_SPECIALIZ);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX EDUC ON PEOPLE (EDUCATION);
CREATE INDEX F ON PEOPLE (FAM);
CREATE INDEX FAMILY ON PEOPLE (MARIAGE, N_CHILD);
CREATE INDEX I ON PEOPLE (NAME);
CREATE INDEX I_HOSTEL ON PEOPLE (HOSTEL);
CREATE INDEX I_MIDDLE_BALL ON PEOPLE (MIDDLE_B);
CREATE INDEX I_NAME_EDUC ON PEOPLE (NAME_EDUC);
CREATE INDEX I_POL ON PEOPLE (POL);
CREATE INDEX I_SCHOL ON PEOPLE (SCHOLARSHIP);
CREATE INDEX I_WHEN_EDUC ON PEOPLE (WHEN_EDUC);
CREATE INDEX O ON PEOPLE (OTCH);
CREATE INDEX P_EDU_INCLUDE ON PEOPLE (VID_EDU_INCLUDE);
CREATE INDEX P_FOUND_INCLUDE ON PEOPLE (N_FOUND_INCLUDE);
CREATE INDEX P_INC_GROUP ON PEOPLE (INC_GROUP);
CREATE INDEX P_KURS ON PEOPLE (KURS);
CREATE INDEX P_N_CENTRE ON PEOPLE (N_CENTRE);
CREATE INDEX P_N_GROUP ON PEOPLE (N_GROUP);
CREATE INDEX P_STATUS ON PEOPLE (STATUS_PEOPLE);
CREATE INDEX P_STATUS_KURS ON PEOPLE (STATUS_KURS);
CREATE INDEX P_VID_EDU ON PEOPLE (VID_EDU);
CREATE INDEX S_ARMY ON PEOPLE (ARMY);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: DEL_PEOPLE */
CREATE OR ALTER TRIGGER DEL_PEOPLE FOR PEOPLE
ACTIVE BEFORE DELETE POSITION 0
AS
BEGIN
 DELETE FROM SPORT WHERE SPORT.NOMER=OLD.NOMER;
 DELETE FROM PASS WHERE PASS.NOMER=OLD.NOMER;
 DELETE FROM DIPLOMA WHERE DIPLOMA.NOMER=OLD.NOMER;
 DELETE FROM ENCOURAGE WHERE ENCOURAGE.NOMER=OLD.NOMER;
 DELETE FROM GEK WHERE GEK.NOMER=OLD.NOMER;
 DELETE FROM HOLIDAY WHERE HOLIDAY.NOMER=OLD.NOMER;
 DELETE FROM PRIKAZ_KURS WHERE PRIKAZ_KURS.NOMER=OLD.NOMER;
 DELETE FROM RESTORE WHERE RESTORE.NOMER=OLD.NOMER;
END
^


/* Trigger: IBE$PEOPLE_AD */
CREATE OR ALTER TRIGGER IBE$PEOPLE_AD FOR PEOPLE
ACTIVE AFTER DELETE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'PEOPLE', 'D', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'NOMER', OLD.NOMER);
 
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NOMER',OLD.NOMER, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'FAM',OLD.FAM, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NAME',OLD.NAME, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'OTCH',OLD.OTCH, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'POL',OLD.POL, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PLACE_R',OLD.PLACE_R, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NAZ',OLD.NAZ, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PAPA',OLD.PAPA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'MAMA',OLD.MAMA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'MARIAGE',OLD.MARIAGE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_CHILD',OLD.N_CHILD, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'EDUCATION',OLD.EDUCATION, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'ARMY',OLD.ARMY, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'SCHOLARSHIP',OLD.SCHOLARSHIP, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'HOSTEL',OLD.HOSTEL, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WORK_PAPA',OLD.WORK_PAPA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WORK_MAMA',OLD.WORK_MAMA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'NAME_EDUC',OLD.NAME_EDUC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WHEN_EDUC',OLD.WHEN_EDUC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WHERE_EDUC',OLD.WHERE_EDUC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'MIDDLE_B',OLD.MIDDLE_B, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_VID_SPORT',OLD.N_VID_SPORT, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_DELA',OLD.N_DELA, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'VID_EDU',OLD.VID_EDU, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_FAC',OLD.N_FAC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'KURS',OLD.KURS, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_SPEC',OLD.N_SPEC, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_SPECIALIZ',OLD.N_SPECIALIZ, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_PRIKAZ_KURS',OLD.N_PRIKAZ_KURS, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'EDU_WORK',OLD.EDU_WORK, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'D_PRIKAZ_KURS',OLD.D_PRIKAZ_KURS, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_FOUND',OLD.N_FOUND, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_PRIKAZ_INCLUDE',OLD.N_PRIKAZ_INCLUDE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'D_PRIKAZ_INCLUDE',OLD.D_PRIKAZ_INCLUDE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_GROUP',OLD.N_GROUP, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'STATUS_PEOPLE',OLD.STATUS_PEOPLE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'INC_GROUP',OLD.INC_GROUP, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'WORK_BEFORE',OLD.WORK_BEFORE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'ADDRESS_BEFORE',OLD.ADDRESS_BEFORE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'ADDRESS',OLD.ADDRESS, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'DATA_R',OLD.DATA_R, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'F_OLD',OLD.F_OLD, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'PHONE',OLD.PHONE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'STATUS_KURS',OLD.STATUS_KURS, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_ZACHET',OLD.N_ZACHET, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'VID_EDU_INCLUDE',OLD.VID_EDU_INCLUDE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_FOUND_INCLUDE',OLD.N_FOUND_INCLUDE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_CENTRE',OLD.N_CENTRE, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'GRAGDAN',OLD.GRAGDAN, NULL);
  
  INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
         VALUES (:TID,'N_DOGOVOR',OLD.N_DOGOVOR, NULL);
 
  
END
^


/* Trigger: IBE$PEOPLE_AI */
CREATE OR ALTER TRIGGER IBE$PEOPLE_AI FOR PEOPLE
ACTIVE AFTER INSERT POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'PEOPLE', 'I', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'NOMER', NEW.NOMER);
 
  IF (NOT (NEW.NOMER IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NOMER', NULL, NEW.NOMER);
  
  IF (NOT (NEW.FAM IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'FAM', NULL, NEW.FAM);
  
  IF (NOT (NEW.NAME IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NAME', NULL, NEW.NAME);
  
  IF (NOT (NEW.OTCH IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'OTCH', NULL, NEW.OTCH);
  
  IF (NOT (NEW.POL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'POL', NULL, NEW.POL);
  
  IF (NOT (NEW.PLACE_R IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PLACE_R', NULL, NEW.PLACE_R);
  
  IF (NOT (NEW.NAZ IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NAZ', NULL, NEW.NAZ);
  
  IF (NOT (NEW.PAPA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PAPA', NULL, NEW.PAPA);
  
  IF (NOT (NEW.MAMA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'MAMA', NULL, NEW.MAMA);
  
  IF (NOT (NEW.MARIAGE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'MARIAGE', NULL, NEW.MARIAGE);
  
  IF (NOT (NEW.N_CHILD IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_CHILD', NULL, NEW.N_CHILD);
  
  IF (NOT (NEW.EDUCATION IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'EDUCATION', NULL, NEW.EDUCATION);
  
  IF (NOT (NEW.ARMY IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'ARMY', NULL, NEW.ARMY);
  
  IF (NOT (NEW.SCHOLARSHIP IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'SCHOLARSHIP', NULL, NEW.SCHOLARSHIP);
  
  IF (NOT (NEW.HOSTEL IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'HOSTEL', NULL, NEW.HOSTEL);
  
  IF (NOT (NEW.WORK_PAPA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WORK_PAPA', NULL, NEW.WORK_PAPA);
  
  IF (NOT (NEW.WORK_MAMA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WORK_MAMA', NULL, NEW.WORK_MAMA);
  
  IF (NOT (NEW.NAME_EDUC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'NAME_EDUC', NULL, NEW.NAME_EDUC);
  
  IF (NOT (NEW.WHEN_EDUC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WHEN_EDUC', NULL, NEW.WHEN_EDUC);
  
  IF (NOT (NEW.WHERE_EDUC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WHERE_EDUC', NULL, NEW.WHERE_EDUC);
  
  IF (NOT (NEW.MIDDLE_B IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'MIDDLE_B', NULL, NEW.MIDDLE_B);
  
  IF (NOT (NEW.N_VID_SPORT IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_VID_SPORT', NULL, NEW.N_VID_SPORT);
  
  IF (NOT (NEW.N_DELA IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_DELA', NULL, NEW.N_DELA);
  
  IF (NOT (NEW.VID_EDU IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'VID_EDU', NULL, NEW.VID_EDU);
  
  IF (NOT (NEW.N_FAC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_FAC', NULL, NEW.N_FAC);
  
  IF (NOT (NEW.KURS IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'KURS', NULL, NEW.KURS);
  
  IF (NOT (NEW.N_SPEC IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPEC', NULL, NEW.N_SPEC);
  
  IF (NOT (NEW.N_SPECIALIZ IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_SPECIALIZ', NULL, NEW.N_SPECIALIZ);
  
  IF (NOT (NEW.N_PRIKAZ_KURS IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_PRIKAZ_KURS', NULL, NEW.N_PRIKAZ_KURS);
  
  IF (NOT (NEW.EDU_WORK IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'EDU_WORK', NULL, NEW.EDU_WORK);
  
  IF (NOT (NEW.D_PRIKAZ_KURS IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'D_PRIKAZ_KURS', NULL, NEW.D_PRIKAZ_KURS);
  
  IF (NOT (NEW.N_FOUND IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_FOUND', NULL, NEW.N_FOUND);
  
  IF (NOT (NEW.N_PRIKAZ_INCLUDE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_PRIKAZ_INCLUDE', NULL, NEW.N_PRIKAZ_INCLUDE);
  
  IF (NOT (NEW.D_PRIKAZ_INCLUDE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'D_PRIKAZ_INCLUDE', NULL, NEW.D_PRIKAZ_INCLUDE);
  
  IF (NOT (NEW.N_GROUP IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_GROUP', NULL, NEW.N_GROUP);
  
  IF (NOT (NEW.STATUS_PEOPLE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'STATUS_PEOPLE', NULL, NEW.STATUS_PEOPLE);
  
  IF (NOT (NEW.INC_GROUP IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'INC_GROUP', NULL, NEW.INC_GROUP);
  
  IF (NOT (NEW.WORK_BEFORE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'WORK_BEFORE', NULL, NEW.WORK_BEFORE);
  
  IF (NOT (NEW.ADDRESS_BEFORE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'ADDRESS_BEFORE', NULL, NEW.ADDRESS_BEFORE);
  
  IF (NOT (NEW.ADDRESS IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'ADDRESS', NULL, NEW.ADDRESS);
  
  IF (NOT (NEW.DATA_R IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'DATA_R', NULL, NEW.DATA_R);
  
  IF (NOT (NEW.F_OLD IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'F_OLD', NULL, NEW.F_OLD);
  
  IF (NOT (NEW.PHONE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'PHONE', NULL, NEW.PHONE);
  
  IF (NOT (NEW.STATUS_KURS IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'STATUS_KURS', NULL, NEW.STATUS_KURS);
  
  IF (NOT (NEW.N_ZACHET IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_ZACHET', NULL, NEW.N_ZACHET);
  
  IF (NOT (NEW.VID_EDU_INCLUDE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'VID_EDU_INCLUDE', NULL, NEW.VID_EDU_INCLUDE);
  
  IF (NOT (NEW.N_FOUND_INCLUDE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_FOUND_INCLUDE', NULL, NEW.N_FOUND_INCLUDE);
  
  IF (NOT (NEW.N_CENTRE IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_CENTRE', NULL, NEW.N_CENTRE);
  
  IF (NOT (NEW.GRAGDAN IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'GRAGDAN', NULL, NEW.GRAGDAN);
  
  IF (NOT (NEW.N_DOGOVOR IS NULL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID, 'N_DOGOVOR', NULL, NEW.N_DOGOVOR);
 
  
END
^


/* Trigger: IBE$PEOPLE_AU */
CREATE OR ALTER TRIGGER IBE$PEOPLE_AU FOR PEOPLE
ACTIVE AFTER UPDATE POSITION 32767
AS
DECLARE VARIABLE TID INTEGER;
BEGIN
  TID = GEN_ID(IBE$LOG_TABLES_GEN,1);
 
  INSERT INTO IBE$LOG_TABLES (ID, TABLE_NAME, OPERATION, DATE_TIME, USER_NAME)
    VALUES (:TID, 'PEOPLE', 'U', 'NOW', USER);
 
  INSERT INTO IBE$LOG_KEYS (LOG_TABLES_ID, KEY_FIELD, KEY_VALUE)
    VALUES (:TID, 'NOMER', OLD.NOMER);
 
  IF ((OLD.NOMER IS NULL AND NEW.NOMER IS NOT NULL) OR
      (NEW.NOMER IS NULL AND OLD.NOMER IS NOT NULL) OR
      (NEW.NOMER IS NOT NULL AND OLD.NOMER IS NOT NULL AND NEW.NOMER <> OLD.NOMER)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NOMER',OLD.NOMER, NEW.NOMER);
  
  IF ((OLD.FAM IS NULL AND NEW.FAM IS NOT NULL) OR
      (NEW.FAM IS NULL AND OLD.FAM IS NOT NULL) OR
      (NEW.FAM IS NOT NULL AND OLD.FAM IS NOT NULL AND NEW.FAM <> OLD.FAM)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'FAM',OLD.FAM, NEW.FAM);
  
  IF ((OLD.NAME IS NULL AND NEW.NAME IS NOT NULL) OR
      (NEW.NAME IS NULL AND OLD.NAME IS NOT NULL) OR
      (NEW.NAME IS NOT NULL AND OLD.NAME IS NOT NULL AND NEW.NAME <> OLD.NAME)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NAME',OLD.NAME, NEW.NAME);
  
  IF ((OLD.OTCH IS NULL AND NEW.OTCH IS NOT NULL) OR
      (NEW.OTCH IS NULL AND OLD.OTCH IS NOT NULL) OR
      (NEW.OTCH IS NOT NULL AND OLD.OTCH IS NOT NULL AND NEW.OTCH <> OLD.OTCH)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'OTCH',OLD.OTCH, NEW.OTCH);
  
  IF ((OLD.POL IS NULL AND NEW.POL IS NOT NULL) OR
      (NEW.POL IS NULL AND OLD.POL IS NOT NULL) OR
      (NEW.POL IS NOT NULL AND OLD.POL IS NOT NULL AND NEW.POL <> OLD.POL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'POL',OLD.POL, NEW.POL);
  
  IF ((OLD.PLACE_R IS NULL AND NEW.PLACE_R IS NOT NULL) OR
      (NEW.PLACE_R IS NULL AND OLD.PLACE_R IS NOT NULL) OR
      (NEW.PLACE_R IS NOT NULL AND OLD.PLACE_R IS NOT NULL AND NEW.PLACE_R <> OLD.PLACE_R)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PLACE_R',OLD.PLACE_R, NEW.PLACE_R);
  
  IF ((OLD.NAZ IS NULL AND NEW.NAZ IS NOT NULL) OR
      (NEW.NAZ IS NULL AND OLD.NAZ IS NOT NULL) OR
      (NEW.NAZ IS NOT NULL AND OLD.NAZ IS NOT NULL AND NEW.NAZ <> OLD.NAZ)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NAZ',OLD.NAZ, NEW.NAZ);
  
  IF ((OLD.PAPA IS NULL AND NEW.PAPA IS NOT NULL) OR
      (NEW.PAPA IS NULL AND OLD.PAPA IS NOT NULL) OR
      (NEW.PAPA IS NOT NULL AND OLD.PAPA IS NOT NULL AND NEW.PAPA <> OLD.PAPA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PAPA',OLD.PAPA, NEW.PAPA);
  
  IF ((OLD.MAMA IS NULL AND NEW.MAMA IS NOT NULL) OR
      (NEW.MAMA IS NULL AND OLD.MAMA IS NOT NULL) OR
      (NEW.MAMA IS NOT NULL AND OLD.MAMA IS NOT NULL AND NEW.MAMA <> OLD.MAMA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'MAMA',OLD.MAMA, NEW.MAMA);
  
  IF ((OLD.MARIAGE IS NULL AND NEW.MARIAGE IS NOT NULL) OR
      (NEW.MARIAGE IS NULL AND OLD.MARIAGE IS NOT NULL) OR
      (NEW.MARIAGE IS NOT NULL AND OLD.MARIAGE IS NOT NULL AND NEW.MARIAGE <> OLD.MARIAGE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'MARIAGE',OLD.MARIAGE, NEW.MARIAGE);
  
  IF ((OLD.N_CHILD IS NULL AND NEW.N_CHILD IS NOT NULL) OR
      (NEW.N_CHILD IS NULL AND OLD.N_CHILD IS NOT NULL) OR
      (NEW.N_CHILD IS NOT NULL AND OLD.N_CHILD IS NOT NULL AND NEW.N_CHILD <> OLD.N_CHILD)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_CHILD',OLD.N_CHILD, NEW.N_CHILD);
  
  IF ((OLD.EDUCATION IS NULL AND NEW.EDUCATION IS NOT NULL) OR
      (NEW.EDUCATION IS NULL AND OLD.EDUCATION IS NOT NULL) OR
      (NEW.EDUCATION IS NOT NULL AND OLD.EDUCATION IS NOT NULL AND NEW.EDUCATION <> OLD.EDUCATION)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'EDUCATION',OLD.EDUCATION, NEW.EDUCATION);
  
  IF ((OLD.ARMY IS NULL AND NEW.ARMY IS NOT NULL) OR
      (NEW.ARMY IS NULL AND OLD.ARMY IS NOT NULL) OR
      (NEW.ARMY IS NOT NULL AND OLD.ARMY IS NOT NULL AND NEW.ARMY <> OLD.ARMY)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'ARMY',OLD.ARMY, NEW.ARMY);
  
  IF ((OLD.SCHOLARSHIP IS NULL AND NEW.SCHOLARSHIP IS NOT NULL) OR
      (NEW.SCHOLARSHIP IS NULL AND OLD.SCHOLARSHIP IS NOT NULL) OR
      (NEW.SCHOLARSHIP IS NOT NULL AND OLD.SCHOLARSHIP IS NOT NULL AND NEW.SCHOLARSHIP <> OLD.SCHOLARSHIP)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'SCHOLARSHIP',OLD.SCHOLARSHIP, NEW.SCHOLARSHIP);
  
  IF ((OLD.HOSTEL IS NULL AND NEW.HOSTEL IS NOT NULL) OR
      (NEW.HOSTEL IS NULL AND OLD.HOSTEL IS NOT NULL) OR
      (NEW.HOSTEL IS NOT NULL AND OLD.HOSTEL IS NOT NULL AND NEW.HOSTEL <> OLD.HOSTEL)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'HOSTEL',OLD.HOSTEL, NEW.HOSTEL);
  
  IF ((OLD.WORK_PAPA IS NULL AND NEW.WORK_PAPA IS NOT NULL) OR
      (NEW.WORK_PAPA IS NULL AND OLD.WORK_PAPA IS NOT NULL) OR
      (NEW.WORK_PAPA IS NOT NULL AND OLD.WORK_PAPA IS NOT NULL AND NEW.WORK_PAPA <> OLD.WORK_PAPA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WORK_PAPA',OLD.WORK_PAPA, NEW.WORK_PAPA);
  
  IF ((OLD.WORK_MAMA IS NULL AND NEW.WORK_MAMA IS NOT NULL) OR
      (NEW.WORK_MAMA IS NULL AND OLD.WORK_MAMA IS NOT NULL) OR
      (NEW.WORK_MAMA IS NOT NULL AND OLD.WORK_MAMA IS NOT NULL AND NEW.WORK_MAMA <> OLD.WORK_MAMA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WORK_MAMA',OLD.WORK_MAMA, NEW.WORK_MAMA);
  
  IF ((OLD.NAME_EDUC IS NULL AND NEW.NAME_EDUC IS NOT NULL) OR
      (NEW.NAME_EDUC IS NULL AND OLD.NAME_EDUC IS NOT NULL) OR
      (NEW.NAME_EDUC IS NOT NULL AND OLD.NAME_EDUC IS NOT NULL AND NEW.NAME_EDUC <> OLD.NAME_EDUC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'NAME_EDUC',OLD.NAME_EDUC, NEW.NAME_EDUC);
  
  IF ((OLD.WHEN_EDUC IS NULL AND NEW.WHEN_EDUC IS NOT NULL) OR
      (NEW.WHEN_EDUC IS NULL AND OLD.WHEN_EDUC IS NOT NULL) OR
      (NEW.WHEN_EDUC IS NOT NULL AND OLD.WHEN_EDUC IS NOT NULL AND NEW.WHEN_EDUC <> OLD.WHEN_EDUC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WHEN_EDUC',OLD.WHEN_EDUC, NEW.WHEN_EDUC);
  
  IF ((OLD.WHERE_EDUC IS NULL AND NEW.WHERE_EDUC IS NOT NULL) OR
      (NEW.WHERE_EDUC IS NULL AND OLD.WHERE_EDUC IS NOT NULL) OR
      (NEW.WHERE_EDUC IS NOT NULL AND OLD.WHERE_EDUC IS NOT NULL AND NEW.WHERE_EDUC <> OLD.WHERE_EDUC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WHERE_EDUC',OLD.WHERE_EDUC, NEW.WHERE_EDUC);
  
  IF ((OLD.MIDDLE_B IS NULL AND NEW.MIDDLE_B IS NOT NULL) OR
      (NEW.MIDDLE_B IS NULL AND OLD.MIDDLE_B IS NOT NULL) OR
      (NEW.MIDDLE_B IS NOT NULL AND OLD.MIDDLE_B IS NOT NULL AND NEW.MIDDLE_B <> OLD.MIDDLE_B)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'MIDDLE_B',OLD.MIDDLE_B, NEW.MIDDLE_B);
  
  IF ((OLD.N_VID_SPORT IS NULL AND NEW.N_VID_SPORT IS NOT NULL) OR
      (NEW.N_VID_SPORT IS NULL AND OLD.N_VID_SPORT IS NOT NULL) OR
      (NEW.N_VID_SPORT IS NOT NULL AND OLD.N_VID_SPORT IS NOT NULL AND NEW.N_VID_SPORT <> OLD.N_VID_SPORT)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_VID_SPORT',OLD.N_VID_SPORT, NEW.N_VID_SPORT);
  
  IF ((OLD.N_DELA IS NULL AND NEW.N_DELA IS NOT NULL) OR
      (NEW.N_DELA IS NULL AND OLD.N_DELA IS NOT NULL) OR
      (NEW.N_DELA IS NOT NULL AND OLD.N_DELA IS NOT NULL AND NEW.N_DELA <> OLD.N_DELA)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_DELA',OLD.N_DELA, NEW.N_DELA);
  
  IF ((OLD.VID_EDU IS NULL AND NEW.VID_EDU IS NOT NULL) OR
      (NEW.VID_EDU IS NULL AND OLD.VID_EDU IS NOT NULL) OR
      (NEW.VID_EDU IS NOT NULL AND OLD.VID_EDU IS NOT NULL AND NEW.VID_EDU <> OLD.VID_EDU)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'VID_EDU',OLD.VID_EDU, NEW.VID_EDU);
  
  IF ((OLD.N_FAC IS NULL AND NEW.N_FAC IS NOT NULL) OR
      (NEW.N_FAC IS NULL AND OLD.N_FAC IS NOT NULL) OR
      (NEW.N_FAC IS NOT NULL AND OLD.N_FAC IS NOT NULL AND NEW.N_FAC <> OLD.N_FAC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_FAC',OLD.N_FAC, NEW.N_FAC);
  
  IF ((OLD.KURS IS NULL AND NEW.KURS IS NOT NULL) OR
      (NEW.KURS IS NULL AND OLD.KURS IS NOT NULL) OR
      (NEW.KURS IS NOT NULL AND OLD.KURS IS NOT NULL AND NEW.KURS <> OLD.KURS)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'KURS',OLD.KURS, NEW.KURS);
  
  IF ((OLD.N_SPEC IS NULL AND NEW.N_SPEC IS NOT NULL) OR
      (NEW.N_SPEC IS NULL AND OLD.N_SPEC IS NOT NULL) OR
      (NEW.N_SPEC IS NOT NULL AND OLD.N_SPEC IS NOT NULL AND NEW.N_SPEC <> OLD.N_SPEC)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_SPEC',OLD.N_SPEC, NEW.N_SPEC);
  
  IF ((OLD.N_SPECIALIZ IS NULL AND NEW.N_SPECIALIZ IS NOT NULL) OR
      (NEW.N_SPECIALIZ IS NULL AND OLD.N_SPECIALIZ IS NOT NULL) OR
      (NEW.N_SPECIALIZ IS NOT NULL AND OLD.N_SPECIALIZ IS NOT NULL AND NEW.N_SPECIALIZ <> OLD.N_SPECIALIZ)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_SPECIALIZ',OLD.N_SPECIALIZ, NEW.N_SPECIALIZ);
  
  IF ((OLD.N_PRIKAZ_KURS IS NULL AND NEW.N_PRIKAZ_KURS IS NOT NULL) OR
      (NEW.N_PRIKAZ_KURS IS NULL AND OLD.N_PRIKAZ_KURS IS NOT NULL) OR
      (NEW.N_PRIKAZ_KURS IS NOT NULL AND OLD.N_PRIKAZ_KURS IS NOT NULL AND NEW.N_PRIKAZ_KURS <> OLD.N_PRIKAZ_KURS)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_PRIKAZ_KURS',OLD.N_PRIKAZ_KURS, NEW.N_PRIKAZ_KURS);
  
  IF ((OLD.EDU_WORK IS NULL AND NEW.EDU_WORK IS NOT NULL) OR
      (NEW.EDU_WORK IS NULL AND OLD.EDU_WORK IS NOT NULL) OR
      (NEW.EDU_WORK IS NOT NULL AND OLD.EDU_WORK IS NOT NULL AND NEW.EDU_WORK <> OLD.EDU_WORK)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'EDU_WORK',OLD.EDU_WORK, NEW.EDU_WORK);
  
  IF ((OLD.D_PRIKAZ_KURS IS NULL AND NEW.D_PRIKAZ_KURS IS NOT NULL) OR
      (NEW.D_PRIKAZ_KURS IS NULL AND OLD.D_PRIKAZ_KURS IS NOT NULL) OR
      (NEW.D_PRIKAZ_KURS IS NOT NULL AND OLD.D_PRIKAZ_KURS IS NOT NULL AND NEW.D_PRIKAZ_KURS <> OLD.D_PRIKAZ_KURS)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'D_PRIKAZ_KURS',OLD.D_PRIKAZ_KURS, NEW.D_PRIKAZ_KURS);
  
  IF ((OLD.N_FOUND IS NULL AND NEW.N_FOUND IS NOT NULL) OR
      (NEW.N_FOUND IS NULL AND OLD.N_FOUND IS NOT NULL) OR
      (NEW.N_FOUND IS NOT NULL AND OLD.N_FOUND IS NOT NULL AND NEW.N_FOUND <> OLD.N_FOUND)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_FOUND',OLD.N_FOUND, NEW.N_FOUND);
  
  IF ((OLD.N_PRIKAZ_INCLUDE IS NULL AND NEW.N_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.N_PRIKAZ_INCLUDE IS NULL AND OLD.N_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.N_PRIKAZ_INCLUDE IS NOT NULL AND OLD.N_PRIKAZ_INCLUDE IS NOT NULL AND NEW.N_PRIKAZ_INCLUDE <> OLD.N_PRIKAZ_INCLUDE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_PRIKAZ_INCLUDE',OLD.N_PRIKAZ_INCLUDE, NEW.N_PRIKAZ_INCLUDE);
  
  IF ((OLD.D_PRIKAZ_INCLUDE IS NULL AND NEW.D_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.D_PRIKAZ_INCLUDE IS NULL AND OLD.D_PRIKAZ_INCLUDE IS NOT NULL) OR
      (NEW.D_PRIKAZ_INCLUDE IS NOT NULL AND OLD.D_PRIKAZ_INCLUDE IS NOT NULL AND NEW.D_PRIKAZ_INCLUDE <> OLD.D_PRIKAZ_INCLUDE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'D_PRIKAZ_INCLUDE',OLD.D_PRIKAZ_INCLUDE, NEW.D_PRIKAZ_INCLUDE);
  
  IF ((OLD.N_GROUP IS NULL AND NEW.N_GROUP IS NOT NULL) OR
      (NEW.N_GROUP IS NULL AND OLD.N_GROUP IS NOT NULL) OR
      (NEW.N_GROUP IS NOT NULL AND OLD.N_GROUP IS NOT NULL AND NEW.N_GROUP <> OLD.N_GROUP)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_GROUP',OLD.N_GROUP, NEW.N_GROUP);
  
  IF ((OLD.STATUS_PEOPLE IS NULL AND NEW.STATUS_PEOPLE IS NOT NULL) OR
      (NEW.STATUS_PEOPLE IS NULL AND OLD.STATUS_PEOPLE IS NOT NULL) OR
      (NEW.STATUS_PEOPLE IS NOT NULL AND OLD.STATUS_PEOPLE IS NOT NULL AND NEW.STATUS_PEOPLE <> OLD.STATUS_PEOPLE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STATUS_PEOPLE',OLD.STATUS_PEOPLE, NEW.STATUS_PEOPLE);
  
  IF ((OLD.INC_GROUP IS NULL AND NEW.INC_GROUP IS NOT NULL) OR
      (NEW.INC_GROUP IS NULL AND OLD.INC_GROUP IS NOT NULL) OR
      (NEW.INC_GROUP IS NOT NULL AND OLD.INC_GROUP IS NOT NULL AND NEW.INC_GROUP <> OLD.INC_GROUP)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'INC_GROUP',OLD.INC_GROUP, NEW.INC_GROUP);
  
  IF ((OLD.WORK_BEFORE IS NULL AND NEW.WORK_BEFORE IS NOT NULL) OR
      (NEW.WORK_BEFORE IS NULL AND OLD.WORK_BEFORE IS NOT NULL) OR
      (NEW.WORK_BEFORE IS NOT NULL AND OLD.WORK_BEFORE IS NOT NULL AND NEW.WORK_BEFORE <> OLD.WORK_BEFORE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'WORK_BEFORE',OLD.WORK_BEFORE, NEW.WORK_BEFORE);
  
  IF ((OLD.ADDRESS_BEFORE IS NULL AND NEW.ADDRESS_BEFORE IS NOT NULL) OR
      (NEW.ADDRESS_BEFORE IS NULL AND OLD.ADDRESS_BEFORE IS NOT NULL) OR
      (NEW.ADDRESS_BEFORE IS NOT NULL AND OLD.ADDRESS_BEFORE IS NOT NULL AND NEW.ADDRESS_BEFORE <> OLD.ADDRESS_BEFORE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'ADDRESS_BEFORE',OLD.ADDRESS_BEFORE, NEW.ADDRESS_BEFORE);
  
  IF ((OLD.ADDRESS IS NULL AND NEW.ADDRESS IS NOT NULL) OR
      (NEW.ADDRESS IS NULL AND OLD.ADDRESS IS NOT NULL) OR
      (NEW.ADDRESS IS NOT NULL AND OLD.ADDRESS IS NOT NULL AND NEW.ADDRESS <> OLD.ADDRESS)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'ADDRESS',OLD.ADDRESS, NEW.ADDRESS);
  
  IF ((OLD.DATA_R IS NULL AND NEW.DATA_R IS NOT NULL) OR
      (NEW.DATA_R IS NULL AND OLD.DATA_R IS NOT NULL) OR
      (NEW.DATA_R IS NOT NULL AND OLD.DATA_R IS NOT NULL AND NEW.DATA_R <> OLD.DATA_R)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'DATA_R',OLD.DATA_R, NEW.DATA_R);
  
  IF ((OLD.F_OLD IS NULL AND NEW.F_OLD IS NOT NULL) OR
      (NEW.F_OLD IS NULL AND OLD.F_OLD IS NOT NULL) OR
      (NEW.F_OLD IS NOT NULL AND OLD.F_OLD IS NOT NULL AND NEW.F_OLD <> OLD.F_OLD)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'F_OLD',OLD.F_OLD, NEW.F_OLD);
  
  IF ((OLD.PHONE IS NULL AND NEW.PHONE IS NOT NULL) OR
      (NEW.PHONE IS NULL AND OLD.PHONE IS NOT NULL) OR
      (NEW.PHONE IS NOT NULL AND OLD.PHONE IS NOT NULL AND NEW.PHONE <> OLD.PHONE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'PHONE',OLD.PHONE, NEW.PHONE);
  
  IF ((OLD.STATUS_KURS IS NULL AND NEW.STATUS_KURS IS NOT NULL) OR
      (NEW.STATUS_KURS IS NULL AND OLD.STATUS_KURS IS NOT NULL) OR
      (NEW.STATUS_KURS IS NOT NULL AND OLD.STATUS_KURS IS NOT NULL AND NEW.STATUS_KURS <> OLD.STATUS_KURS)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'STATUS_KURS',OLD.STATUS_KURS, NEW.STATUS_KURS);
  
  IF ((OLD.N_ZACHET IS NULL AND NEW.N_ZACHET IS NOT NULL) OR
      (NEW.N_ZACHET IS NULL AND OLD.N_ZACHET IS NOT NULL) OR
      (NEW.N_ZACHET IS NOT NULL AND OLD.N_ZACHET IS NOT NULL AND NEW.N_ZACHET <> OLD.N_ZACHET)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_ZACHET',OLD.N_ZACHET, NEW.N_ZACHET);
  
  IF ((OLD.VID_EDU_INCLUDE IS NULL AND NEW.VID_EDU_INCLUDE IS NOT NULL) OR
      (NEW.VID_EDU_INCLUDE IS NULL AND OLD.VID_EDU_INCLUDE IS NOT NULL) OR
      (NEW.VID_EDU_INCLUDE IS NOT NULL AND OLD.VID_EDU_INCLUDE IS NOT NULL AND NEW.VID_EDU_INCLUDE <> OLD.VID_EDU_INCLUDE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'VID_EDU_INCLUDE',OLD.VID_EDU_INCLUDE, NEW.VID_EDU_INCLUDE);
  
  IF ((OLD.N_FOUND_INCLUDE IS NULL AND NEW.N_FOUND_INCLUDE IS NOT NULL) OR
      (NEW.N_FOUND_INCLUDE IS NULL AND OLD.N_FOUND_INCLUDE IS NOT NULL) OR
      (NEW.N_FOUND_INCLUDE IS NOT NULL AND OLD.N_FOUND_INCLUDE IS NOT NULL AND NEW.N_FOUND_INCLUDE <> OLD.N_FOUND_INCLUDE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_FOUND_INCLUDE',OLD.N_FOUND_INCLUDE, NEW.N_FOUND_INCLUDE);
  
  IF ((OLD.N_CENTRE IS NULL AND NEW.N_CENTRE IS NOT NULL) OR
      (NEW.N_CENTRE IS NULL AND OLD.N_CENTRE IS NOT NULL) OR
      (NEW.N_CENTRE IS NOT NULL AND OLD.N_CENTRE IS NOT NULL AND NEW.N_CENTRE <> OLD.N_CENTRE)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_CENTRE',OLD.N_CENTRE, NEW.N_CENTRE);
  
  IF ((OLD.GRAGDAN IS NULL AND NEW.GRAGDAN IS NOT NULL) OR
      (NEW.GRAGDAN IS NULL AND OLD.GRAGDAN IS NOT NULL) OR
      (NEW.GRAGDAN IS NOT NULL AND OLD.GRAGDAN IS NOT NULL AND NEW.GRAGDAN <> OLD.GRAGDAN)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'GRAGDAN',OLD.GRAGDAN, NEW.GRAGDAN);
  
  IF ((OLD.N_DOGOVOR IS NULL AND NEW.N_DOGOVOR IS NOT NULL) OR
      (NEW.N_DOGOVOR IS NULL AND OLD.N_DOGOVOR IS NOT NULL) OR
      (NEW.N_DOGOVOR IS NOT NULL AND OLD.N_DOGOVOR IS NOT NULL AND NEW.N_DOGOVOR <> OLD.N_DOGOVOR)) THEN
    INSERT INTO IBE$LOG_FIELDS (LOG_TABLES_ID, FIELD_NAME, OLD_VALUE, NEW_VALUE)
           VALUES (:TID,'N_DOGOVOR',OLD.N_DOGOVOR, NEW.N_DOGOVOR);
 
  
END
^

SET TERM ; ^



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

COMMENT ON COLUMN PEOPLE.NOMER IS 
'Инкремент студента';

COMMENT ON COLUMN PEOPLE.N_ZACHET IS 
'Номер зачетной книжки';

COMMENT ON COLUMN PEOPLE.FAM IS 
'Фамилия';

COMMENT ON COLUMN PEOPLE.NAME IS 
'Имя';

COMMENT ON COLUMN PEOPLE.OTCH IS 
'Отчество';

COMMENT ON COLUMN PEOPLE.STATUS_KURS IS 
'0-переведен на след.курс
1-условно переведен';

COMMENT ON COLUMN PEOPLE.POL IS 
'Пол (М или Ж)';

COMMENT ON COLUMN PEOPLE.PLACE_R IS 
'Место рождения';

COMMENT ON COLUMN PEOPLE.NAZ IS 
'Национальность';

COMMENT ON COLUMN PEOPLE.PAPA IS 
'ФИО отца';

COMMENT ON COLUMN PEOPLE.MAMA IS 
'ФИО матери';

COMMENT ON COLUMN PEOPLE.MARIAGE IS 
'Семейное положение студента';

COMMENT ON COLUMN PEOPLE.N_CHILD IS 
'Количество детей у студента';

COMMENT ON COLUMN PEOPLE.EDUCATION IS 
'Образование:
1-среднее
2-средне специальное
3-незаконченное в/о
4-высшее
5-профессионально-техническое';

COMMENT ON COLUMN PEOPLE.ARMY IS 
'Служба в армии';

COMMENT ON COLUMN PEOPLE.SCHOLARSHIP IS 
'Регион (область) связь с таблицей REGION откуда прибыл студент';

COMMENT ON COLUMN PEOPLE.HOSTEL IS 
'Общежитие';

COMMENT ON COLUMN PEOPLE.WORK_PAPA IS 
'Место работы отца';

COMMENT ON COLUMN PEOPLE.WORK_MAMA IS 
'Место работы матери';

COMMENT ON COLUMN PEOPLE.NAME_EDUC IS 
'Какое учебное заведение закончил студент';

COMMENT ON COLUMN PEOPLE.WHEN_EDUC IS 
'Когда закончил учебное заведение до поступления в ВУЗ';

COMMENT ON COLUMN PEOPLE.WHERE_EDUC IS 
'Где находилось учебное заведение до поступления';

COMMENT ON COLUMN PEOPLE.MIDDLE_B IS 
'Средний балл документа об образовании';

COMMENT ON COLUMN PEOPLE.N_VID_SPORT IS 
'Вид спорта (основной)';

COMMENT ON COLUMN PEOPLE.N_DELA IS 
'№ приказа о выпуске студента';

COMMENT ON COLUMN PEOPLE.VID_EDU IS 
'0-дневное
1-заочное';

COMMENT ON COLUMN PEOPLE.N_FAC IS 
'Факультет';

COMMENT ON COLUMN PEOPLE.KURS IS 
'Курс обучения';

COMMENT ON COLUMN PEOPLE.N_SPEC IS 
'Специальность';

COMMENT ON COLUMN PEOPLE.N_SPECIALIZ IS 
'Специализация или направление специальности';

COMMENT ON COLUMN PEOPLE.N_PRIKAZ_KURS IS 
'На какой курс зачислен студент в БГУФК';

COMMENT ON COLUMN PEOPLE.D_PRIKAZ_KURS IS 
'Дата окончания учебного заведения';

COMMENT ON COLUMN PEOPLE.N_FOUND IS 
'Условия обучения (бюджет или договор)';

COMMENT ON COLUMN PEOPLE.N_PRIKAZ_INCLUDE IS 
'Номер приказа о зачислении';

COMMENT ON COLUMN PEOPLE.D_PRIKAZ_INCLUDE IS 
'Дата приказа о зачислении';

COMMENT ON COLUMN PEOPLE.N_GROUP IS 
'Номер группы';

COMMENT ON COLUMN PEOPLE.STATUS_PEOPLE IS 
'1-действующий
2-отчислен
3-академ.отпуск
4-повторный год (и перевод на др.фак-т)
6-выпускник
7-восстанавливаюйщийся';

COMMENT ON COLUMN PEOPLE.INC_GROUP IS 
'Инкремент группы';

COMMENT ON COLUMN PEOPLE.WORK_BEFORE IS 
'Место работы до поступления';

COMMENT ON COLUMN PEOPLE.N_CENTRE IS 
'районные центры';

COMMENT ON COLUMN PEOPLE.ADDRESS_BEFORE IS 
'Адрес до поступления';

COMMENT ON COLUMN PEOPLE.GRAGDAN IS 
'Гражданство';

COMMENT ON COLUMN PEOPLE.ADDRESS IS 
'Адрес регистрации во время обучения';

COMMENT ON COLUMN PEOPLE.ADDRESS_LIFE IS 
'Адрес проживания во время обучения';

COMMENT ON COLUMN PEOPLE.DATA_R IS 
'Дата рождения';

COMMENT ON COLUMN PEOPLE.F_OLD IS 
'Старая фамилия (в случае ее смены)';

COMMENT ON COLUMN PEOPLE.PHONE IS 
'Телефон до поступления или во время обучения';

COMMENT ON COLUMN PEOPLE.VID_EDU_INCLUDE IS 
'Вид обучения при поступлении';

COMMENT ON COLUMN PEOPLE.N_FOUND_INCLUDE IS 
'Причина зачисления';

COMMENT ON COLUMN PEOPLE.RASPREDELENIE IS 
'Тип распределения:
0 - свободное
1 - целевой контракт
2 - распределение в организацию';

COMMENT ON COLUMN PEOPLE.N_DOGOVOR IS 
'№ договора для студентов-платников';

COMMENT ON COLUMN PEOPLE.CONFIRM_RASPRED IS 
'Подтверждение распределения
0 - не подтверждено
1 - подтверждено';

COMMENT ON COLUMN PEOPLE.ADDRESS_POSLE IS 
'Адрес после окончания ВУЗа';

COMMENT ON COLUMN PEOPLE.PHONE_POSLE IS 
'Телефон после окончания ВУЗа';

COMMENT ON COLUMN PEOPLE.PASPORT IS 
'Серия и номер паспорта';

COMMENT ON COLUMN PEOPLE.PERSONAL_NOMER IS 
'Личный уникальный номер паспорта';

COMMENT ON COLUMN PEOPLE.D_INCLUDE IS 
'Дата, с которой является студентом';

COMMENT ON COLUMN PEOPLE.MOODLE_PASSWORD IS 
'Пароль к Moodle
NhgeCQ3t-6o7EiA_4z1nm4Hs - пароль не задавался';

COMMENT ON COLUMN PEOPLE.PHOTO IS 
'Фотография';

COMMENT ON COLUMN PEOPLE.NUMBER IS 
'Номер дела';



/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT ALL ON PEOPLE TO ABITUR1;
GRANT ALL ON PEOPLE TO ABITUR2;
GRANT ALL ON PEOPLE TO ABITUR3;
GRANT ALL ON PEOPLE TO ABITUR4;
GRANT ALL ON PEOPLE TO ALENA_2109;
GRANT ALL ON PEOPLE TO ALEXANDER_GONCHAROV;
GRANT ALL ON PEOPLE TO ALINA_E;
GRANT ALL ON PEOPLE TO ANNA;
GRANT ALL ON PEOPLE TO ASPA;
GRANT ALL ON PEOPLE TO ASPIRANTURA;
GRANT ALL ON PEOPLE TO ASU;
GRANT ALL ON PEOPLE TO ASU1;
GRANT ALL ON PEOPLE TO ASU2;
GRANT ALL ON PEOPLE TO ASU3;
GRANT ALL ON PEOPLE TO ASU4;
GRANT ALL ON PEOPLE TO BAKS16;
GRANT ALL ON PEOPLE TO BAKS68878;
GRANT ALL ON PEOPLE TO BOBROVICH_O;
GRANT ALL ON PEOPLE TO DEVELOPER;
GRANT ALL ON PEOPLE TO DEVELOPER2;
GRANT ALL ON PEOPLE TO DOBROVOLSKAYA;
GRANT ALL ON PEOPLE TO DVORETSKAYA_K;
GRANT ALL ON PEOPLE TO FACULTY1;
GRANT ALL ON PEOPLE TO GONCHAROV434_2;
GRANT ALL ON PEOPLE TO GUNICH_O;
GRANT ALL ON PEOPLE TO GUNICH_OKSANA;
GRANT ALL ON PEOPLE TO HOSTEL_PK1;
GRANT ALL ON PEOPLE TO HOSTEL_PK2;
GRANT ALL ON PEOPLE TO IMSIT_Z;
GRANT SELECT ON PEOPLE TO INTER_01;
GRANT SELECT ON PEOPLE TO INTER_02;
GRANT ALL ON PEOPLE TO IP_PROJECT;
GRANT ALL ON PEOPLE TO IRONSKULL;
GRANT ALL ON PEOPLE TO IT;
GRANT ALL ON PEOPLE TO IT2;
GRANT ALL ON PEOPLE TO IT5;
GRANT ALL ON PEOPLE TO IT6;
GRANT ALL ON PEOPLE TO IT7;
GRANT ALL ON PEOPLE TO IT8;
GRANT ALL ON PEOPLE TO IT_1;
GRANT ALL ON PEOPLE TO IT_2;
GRANT ALL ON PEOPLE TO IT_3;
GRANT ALL ON PEOPLE TO IT_8;
GRANT ALL ON PEOPLE TO IT_D;
GRANT ALL ON PEOPLE TO IT_L;
GRANT ALL ON PEOPLE TO IT_M;
GRANT ALL ON PEOPLE TO IT_PK;
GRANT ALL ON PEOPLE TO IT_Z;
GRANT ALL ON PEOPLE TO IVANOVA_A;
GRANT ALL ON PEOPLE TO JKMUF2507;
GRANT ALL ON PEOPLE TO KANDRUKEVICH_M;
GRANT ALL ON PEOPLE TO KAND_M;
GRANT ALL ON PEOPLE TO KOSIK_N;
GRANT ALL ON PEOPLE TO KRISTINA;
GRANT ALL ON PEOPLE TO LAVRENOVA_V;
GRANT ALL ON PEOPLE TO LENAUSOVA;
GRANT ALL ON PEOPLE TO LIASHKOVICH_I;
GRANT ALL ON PEOPLE TO LTRFYFN2019;
GRANT ALL ON PEOPLE TO MAG;
GRANT ALL ON PEOPLE TO MAGISTR;
GRANT ALL ON PEOPLE TO MARINA;
GRANT ALL ON PEOPLE TO MATUSEVICH;
GRANT ALL ON PEOPLE TO MATUSEVICH_M;
GRANT ALL ON PEOPLE TO MIMI;
GRANT ALL ON PEOPLE TO MSIT;
GRANT ALL ON PEOPLE TO MVS;
GRANT ALL ON PEOPLE TO MVS_1;
GRANT ALL ON PEOPLE TO MVS_D;
GRANT ALL ON PEOPLE TO MVS_D_L;
GRANT ALL ON PEOPLE TO MVS_ETB;
GRANT ALL ON PEOPLE TO MVS_G;
GRANT ALL ON PEOPLE TO MVS_L;
GRANT ALL ON PEOPLE TO MVS_LP;
GRANT ALL ON PEOPLE TO MVS_N;
GRANT ALL ON PEOPLE TO MVS_PK;
GRANT ALL ON PEOPLE TO MVS_V;
GRANT ALL ON PEOPLE TO MVS_Z;
GRANT ALL ON PEOPLE TO MVS_ZAM;
GRANT ALL ON PEOPLE TO MVS_Z_L;
GRANT ALL ON PEOPLE TO M_1;
GRANT ALL ON PEOPLE TO M_2;
GRANT ALL ON PEOPLE TO NEW78;
GRANT ALL ON PEOPLE TO NEWLOGIN;
GRANT ALL ON PEOPLE TO NEWUSER;
GRANT ALL ON PEOPLE TO NOVIK_A;
GRANT ALL ON PEOPLE TO OFKIT15;
GRANT ALL ON PEOPLE TO OFKITA;
GRANT ALL ON PEOPLE TO OFKIT_1;
GRANT ALL ON PEOPLE TO OFKIT_15;
GRANT ALL ON PEOPLE TO OFKIT_A;
GRANT ALL ON PEOPLE TO OFKIT_D;
GRANT ALL ON PEOPLE TO OFKIT_D_A;
GRANT ALL ON PEOPLE TO OFKIT_L;
GRANT ALL ON PEOPLE TO OFKIT_LAB;
GRANT ALL ON PEOPLE TO OFKIT_M;
GRANT ALL ON PEOPLE TO OFKIT_N;
GRANT ALL ON PEOPLE TO OFKIT_PK;
GRANT ALL ON PEOPLE TO OFKIT_Z;
GRANT ALL ON PEOPLE TO OK;
GRANT ALL ON PEOPLE TO OK1;
GRANT ALL ON PEOPLE TO OK2;
GRANT ALL ON PEOPLE TO OKSANA;
GRANT ALL ON PEOPLE TO OK_ST;
GRANT ALL ON PEOPLE TO OK_STUD;
GRANT ALL ON PEOPLE TO OK_STUD_1;
GRANT ALL ON PEOPLE TO OK_STUD_2;
GRANT ALL ON PEOPLE TO OK_STUD_N;
GRANT ALL ON PEOPLE TO OK_STUD_SL;
GRANT ALL ON PEOPLE TO OK_STUD_US;
GRANT ALL ON PEOPLE TO PK;
GRANT ALL ON PEOPLE TO PK_IT;
GRANT ALL ON PEOPLE TO PK_IT1;
GRANT ALL ON PEOPLE TO PK_IT2;
GRANT ALL ON PEOPLE TO PK_IT3;
GRANT ALL ON PEOPLE TO PK_IT4;
GRANT ALL ON PEOPLE TO PK_IT5;
GRANT ALL ON PEOPLE TO PK_MSTIG1;
GRANT ALL ON PEOPLE TO PK_MSTIG2;
GRANT ALL ON PEOPLE TO PK_MSTIG3;
GRANT ALL ON PEOPLE TO PK_MSTIG4;
GRANT ALL ON PEOPLE TO PK_MSTIGP1;
GRANT ALL ON PEOPLE TO PK_MSTIGP2;
GRANT ALL ON PEOPLE TO PK_MSTIG_1;
GRANT ALL ON PEOPLE TO PK_MSTIG_2;
GRANT ALL ON PEOPLE TO PK_MSTIG_3;
GRANT ALL ON PEOPLE TO PK_MSTIG_4;
GRANT ALL ON PEOPLE TO PK_MSTIG_P1;
GRANT ALL ON PEOPLE TO PK_MSTIG_P2;
GRANT ALL ON PEOPLE TO PK_MVS;
GRANT ALL ON PEOPLE TO PK_MVS1;
GRANT ALL ON PEOPLE TO PK_MVS2;
GRANT ALL ON PEOPLE TO PK_MVS3;
GRANT ALL ON PEOPLE TO PK_MVS4;
GRANT ALL ON PEOPLE TO PK_MVS5;
GRANT ALL ON PEOPLE TO PK_MVSP1;
GRANT ALL ON PEOPLE TO PK_MVSP2;
GRANT ALL ON PEOPLE TO PK_MVS_1;
GRANT ALL ON PEOPLE TO PK_MVS_2;
GRANT ALL ON PEOPLE TO PK_MVS_3;
GRANT ALL ON PEOPLE TO PK_MVS_4;
GRANT ALL ON PEOPLE TO PK_MVS_P1;
GRANT ALL ON PEOPLE TO PK_MVS_P2;
GRANT ALL ON PEOPLE TO PK_OFKIT;
GRANT ALL ON PEOPLE TO PK_OFKIT1;
GRANT ALL ON PEOPLE TO PK_OFKIT2;
GRANT ALL ON PEOPLE TO PK_OFKIT3;
GRANT ALL ON PEOPLE TO PK_OFKIT4;
GRANT ALL ON PEOPLE TO PK_OFKIT5;
GRANT ALL ON PEOPLE TO PK_OFKITP1;
GRANT ALL ON PEOPLE TO PK_OFKITP2;
GRANT ALL ON PEOPLE TO PK_OFK_1;
GRANT ALL ON PEOPLE TO PK_OFK_2;
GRANT ALL ON PEOPLE TO PK_OFK_3;
GRANT ALL ON PEOPLE TO PK_OFK_4;
GRANT ALL ON PEOPLE TO PK_OFK_P1;
GRANT ALL ON PEOPLE TO PK_OFK_P2;
GRANT ALL ON PEOPLE TO PK_OTV1;
GRANT ALL ON PEOPLE TO PK_OTV2;
GRANT ALL ON PEOPLE TO PK_OTV3;
GRANT ALL ON PEOPLE TO PK_OTV4;
GRANT ALL ON PEOPLE TO PK_SIIE;
GRANT ALL ON PEOPLE TO PK_SIIE1;
GRANT ALL ON PEOPLE TO PK_SIIE2;
GRANT ALL ON PEOPLE TO PK_SIIE3;
GRANT ALL ON PEOPLE TO PK_SIIE4;
GRANT ALL ON PEOPLE TO PK_SIIE5;
GRANT ALL ON PEOPLE TO PK_SIIEP1;
GRANT ALL ON PEOPLE TO PK_SIIEP2;
GRANT ALL ON PEOPLE TO PK_SIIE_1;
GRANT ALL ON PEOPLE TO PK_SIIE_2;
GRANT ALL ON PEOPLE TO PK_SIIE_3;
GRANT ALL ON PEOPLE TO PK_SIIE_4;
GRANT ALL ON PEOPLE TO PK_SIIE_P1;
GRANT ALL ON PEOPLE TO PK_SIIE_P2;
GRANT ALL ON PEOPLE TO PLANIDA_E;
GRANT SELECT ON PEOPLE TO PRESS_01;
GRANT ALL ON PEOPLE TO PRIEM1;
GRANT ALL ON PEOPLE TO SADIK;
GRANT ALL ON PEOPLE TO SEL_COM;
GRANT ALL ON PEOPLE TO SERAFIMOVICH_Y;
GRANT ALL ON PEOPLE TO SETUN1998;
GRANT ALL ON PEOPLE TO SHMAENKOVA_M;
GRANT ALL ON PEOPLE TO SHPAKEVICH_P;
GRANT ALL ON PEOPLE TO SIIE1;
GRANT ALL ON PEOPLE TO SIIE10;
GRANT ALL ON PEOPLE TO SIIE12;
GRANT ALL ON PEOPLE TO SIIE123;
GRANT ALL ON PEOPLE TO SIIE1234;
GRANT ALL ON PEOPLE TO SIIE2;
GRANT ALL ON PEOPLE TO SIIE3;
GRANT ALL ON PEOPLE TO SIIE4;
GRANT ALL ON PEOPLE TO SIIE6;
GRANT ALL ON PEOPLE TO SIIE_123;
GRANT ALL ON PEOPLE TO SIIE_2;
GRANT ALL ON PEOPLE TO SIIE_5;
GRANT ALL ON PEOPLE TO SIIE_BELAYA_M;
GRANT ALL ON PEOPLE TO SIIE_D;
GRANT ALL ON PEOPLE TO SIIE_D2;
GRANT ALL ON PEOPLE TO SIIE_LAB;
GRANT ALL ON PEOPLE TO SIIE_LAB_D;
GRANT ALL ON PEOPLE TO SIIE_LAB_Z;
GRANT ALL ON PEOPLE TO SIIE_LAB_Z2;
GRANT ALL ON PEOPLE TO SIIE_LAB_Z3;
GRANT ALL ON PEOPLE TO SIIE_NEW;
GRANT ALL ON PEOPLE TO SIIE_O;
GRANT ALL ON PEOPLE TO SIIE_PK;
GRANT ALL ON PEOPLE TO SIIE_Z;
GRANT ALL ON PEOPLE TO SIIE_Z1;
GRANT ALL ON PEOPLE TO SIIE_Z12;
GRANT ALL ON PEOPLE TO SMOLENKOVA_T;
GRANT SELECT ON PEOPLE TO STUDENT;
GRANT ALL ON PEOPLE TO STUD_KADR1;
GRANT ALL ON PEOPLE TO STUD_KADR2;
GRANT ALL ON PEOPLE TO STUD_KADR3;
GRANT ALL ON PEOPLE TO STUD_KADR4;
GRANT ALL ON PEOPLE TO SVETA;
GRANT ALL ON PEOPLE TO TEST_PREPOD;
GRANT ALL ON PEOPLE TO TEST_PROBA;
GRANT ALL ON PEOPLE TO TEST_STUD;
GRANT ALL ON PEOPLE TO UHNOVEC;
GRANT ALL ON PEOPLE TO UO_LAB;
GRANT ALL ON PEOPLE TO UO_M;
GRANT ALL ON PEOPLE TO UO_N;
GRANT ALL ON PEOPLE TO UO_Z;
GRANT ALL ON PEOPLE TO USER123;
GRANT ALL ON PEOPLE TO USER622;
GRANT SELECT ON PEOPLE TO VIEWER1;
GRANT ALL ON PEOPLE TO VIEWER_MOB;
GRANT ALL ON PEOPLE TO VNUK;
GRANT ALL ON PEOPLE TO VOROBEI75;
GRANT ALL ON PEOPLE TO YA;
GRANT ALL ON PEOPLE TO YAUHENI_HATSURA;
GRANT ALL ON PEOPLE TO ZHANNA_73;

/* Privileges of triggers */
GRANT INSERT ON IBE$LOG_FIELDS TO TRIGGER IBE$PEOPLE_AD;
GRANT INSERT ON IBE$LOG_KEYS TO TRIGGER IBE$PEOPLE_AD;
GRANT INSERT ON IBE$LOG_TABLES TO TRIGGER IBE$PEOPLE_AD;
GRANT UPDATE, REFERENCES ON PEOPLE TO TRIGGER IBE$PEOPLE_AD;
GRANT INSERT ON IBE$LOG_FIELDS TO TRIGGER IBE$PEOPLE_AI;
GRANT INSERT ON IBE$LOG_KEYS TO TRIGGER IBE$PEOPLE_AI;
GRANT INSERT ON IBE$LOG_TABLES TO TRIGGER IBE$PEOPLE_AI;
GRANT UPDATE, REFERENCES ON PEOPLE TO TRIGGER IBE$PEOPLE_AI;
GRANT INSERT ON IBE$LOG_FIELDS TO TRIGGER IBE$PEOPLE_AU;
GRANT INSERT ON IBE$LOG_KEYS TO TRIGGER IBE$PEOPLE_AU;
GRANT INSERT ON IBE$LOG_TABLES TO TRIGGER IBE$PEOPLE_AU;
GRANT UPDATE, REFERENCES ON PEOPLE TO TRIGGER IBE$PEOPLE_AU;